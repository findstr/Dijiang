!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_CHAIN_CHAIN_ONLY_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_CHAIN_ONLY_BIT = 1 << 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_FLATTEN_ALL_MEMBERS_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_FLATTEN_ALL_MEMBERS_BIT = 1 << 5,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_FORCE_COMPOSITE_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_FORCE_COMPOSITE_BIT = 1 << 6$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_INDEX_IS_LITERAL_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_INDEX_IS_LITERAL_BIT = 1 << 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_LITERAL_MSB_FORCE_ID	spirv_glsl.hpp	/^	ACCESS_CHAIN_LITERAL_MSB_FORCE_ID = 1 << 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_PTR_CHAIN_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_PTR_CHAIN_BIT = 1 << 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ACCESS_CHAIN_SKIP_REGISTER_EXPRESSION_READ_BIT	spirv_glsl.hpp	/^	ACCESS_CHAIN_SKIP_REGISTER_EXPRESSION_READ_BIT = 1 << 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::AccessChainFlagBits
ADD_ARG_IDX_TO_BINDING_NUM_LOOKUP	spirv_msl.cpp	113;"	d	file:
ADD_ARG_IDX_TO_BINDING_NUM_LOOKUP	spirv_msl.cpp	77;"	d	file:
AMD_gcn_shader	spirv_glsl.hpp	/^			AMD_gcn_shader,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
ARB_shader_ballot	spirv_glsl.hpp	/^			ARB_shader_ballot,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
ARB_shader_group_vote	spirv_glsl.hpp	/^			ARB_shader_group_vote,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
AccelerationStructure	spirv_common.hpp	/^		AccelerationStructure,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
AccessChainFlagBits	spirv_glsl.hpp	/^enum AccessChainFlagBits$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
AccessChainFlags	spirv_glsl.hpp	/^typedef uint32_t AccessChainFlags;$/;"	t	namespace:SPIRV_CROSS_NAMESPACE
AccessChainMeta	spirv_common.hpp	/^struct AccessChainMeta$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
AccessQualifier	spirv.hpp	/^enum AccessQualifier {$/;"	g	namespace:spv
AccessQualifierMax	spirv.hpp	/^    AccessQualifierMax = 0x7fffffff,$/;"	e	enum:spv::AccessQualifier
AccessQualifierReadOnly	spirv.hpp	/^    AccessQualifierReadOnly = 0,$/;"	e	enum:spv::AccessQualifier
AccessQualifierReadWrite	spirv.hpp	/^    AccessQualifierReadWrite = 2,$/;"	e	enum:spv::AccessQualifier
AccessQualifierWriteOnly	spirv.hpp	/^    AccessQualifierWriteOnly = 1,$/;"	e	enum:spv::AccessQualifier
ActiveBuiltinHandler	spirv_cross.hpp	/^		ActiveBuiltinHandler(Compiler &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::ActiveBuiltinHandler
ActiveBuiltinHandler	spirv_cross.hpp	/^	struct ActiveBuiltinHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
AddressingModel	spirv.hpp	/^enum AddressingModel {$/;"	g	namespace:spv
AddressingModelLogical	spirv.hpp	/^    AddressingModelLogical = 0,$/;"	e	enum:spv::AddressingModel
AddressingModelMax	spirv.hpp	/^    AddressingModelMax = 0x7fffffff,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysical32	spirv.hpp	/^    AddressingModelPhysical32 = 1,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysical64	spirv.hpp	/^    AddressingModelPhysical64 = 2,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysicalStorageBuffer64	spirv.hpp	/^    AddressingModelPhysicalStorageBuffer64 = 5348,$/;"	e	enum:spv::AddressingModel
AddressingModelPhysicalStorageBuffer64EXT	spirv.hpp	/^    AddressingModelPhysicalStorageBuffer64EXT = 5348,$/;"	e	enum:spv::AddressingModel
AlignedBuffer	spirv_cross_containers.hpp	/^class AlignedBuffer$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
AlignedBuffer	spirv_cross_containers.hpp	/^class AlignedBuffer<T, 0>$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
AnalyzeVariableScopeAccessHandler	spirv_cross.cpp	/^Compiler::AnalyzeVariableScopeAccessHandler::AnalyzeVariableScopeAccessHandler(Compiler &compiler_,$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
AnalyzeVariableScopeAccessHandler	spirv_cross.hpp	/^	struct AnalyzeVariableScopeAccessHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
Array	spirv_reflect.cpp	/^	Array,$/;"	m	class:simple_json::Type	file:
AtomicCounter	spirv_common.hpp	/^		AtomicCounter,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
BLOCK_META_CONTINUE_BIT	spirv_cross_parsed_ir.hpp	/^		BLOCK_META_CONTINUE_BIT = 1 << 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ParsedIR::BlockMetaFlagBits
BLOCK_META_LOOP_HEADER_BIT	spirv_cross_parsed_ir.hpp	/^		BLOCK_META_LOOP_HEADER_BIT = 1 << 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ParsedIR::BlockMetaFlagBits
BLOCK_META_LOOP_MERGE_BIT	spirv_cross_parsed_ir.hpp	/^		BLOCK_META_LOOP_MERGE_BIT = 1 << 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ParsedIR::BlockMetaFlagBits
BLOCK_META_MULTISELECT_MERGE_BIT	spirv_cross_parsed_ir.hpp	/^		BLOCK_META_MULTISELECT_MERGE_BIT = 1 << 4$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ParsedIR::BlockMetaFlagBits
BLOCK_META_SELECTION_MERGE_BIT	spirv_cross_parsed_ir.hpp	/^		BLOCK_META_SELECTION_MERGE_BIT = 1 << 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ParsedIR::BlockMetaFlagBits
BackendVariations	spirv_glsl.hpp	/^	struct BackendVariations$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
BaseType	spirv_common.hpp	/^	enum BaseType$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRType
Binding	spirv_hlsl.hpp	/^	struct Binding$/;"	s	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding
BitcastType	spirv_hlsl.hpp	/^	enum BitcastType$/;"	g	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
Bitset	spirv_common.hpp	/^	explicit inline Bitset(uint64_t lower_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
Bitset	spirv_common.hpp	/^class Bitset$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
BlockMetaFlagBits	spirv_cross_parsed_ir.hpp	/^	enum BlockMetaFlagBits$/;"	g	class:SPIRV_CROSS_NAMESPACE::ParsedIR
Boolean	spirv_common.hpp	/^		Boolean,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
Buffer	spirv_cross_containers.hpp	/^	struct Buffer$/;"	s	class:SPIRV_CROSS_NAMESPACE::StringStream
BufferAccessHandler	spirv_cross.hpp	/^		BufferAccessHandler(const Compiler &compiler_, SmallVector<BufferRange> &ranges_, uint32_t id_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
BufferAccessHandler	spirv_cross.hpp	/^	struct BufferAccessHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
BufferPackingHLSLCbuffer	spirv_cross.hpp	/^	BufferPackingHLSLCbuffer,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingHLSLCbufferPackOffset	spirv_cross.hpp	/^	BufferPackingHLSLCbufferPackOffset,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingScalar	spirv_cross.hpp	/^	BufferPackingScalar,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingScalarEnhancedLayout	spirv_cross.hpp	/^	BufferPackingScalarEnhancedLayout$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingStandard	spirv_cross.hpp	/^enum BufferPackingStandard$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
BufferPackingStd140	spirv_cross.hpp	/^	BufferPackingStd140,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingStd140EnhancedLayout	spirv_cross.hpp	/^	BufferPackingStd140EnhancedLayout,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingStd430	spirv_cross.hpp	/^	BufferPackingStd430,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferPackingStd430EnhancedLayout	spirv_cross.hpp	/^	BufferPackingStd430EnhancedLayout,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::BufferPackingStandard
BufferRange	spirv_cross.hpp	/^struct BufferRange$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
BuiltIn	spirv.hpp	/^enum BuiltIn {$/;"	g	namespace:spv
BuiltInBaryCoordKHR	spirv.hpp	/^    BuiltInBaryCoordKHR = 5286,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNV	spirv.hpp	/^    BuiltInBaryCoordNV = 5286,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNoPerspAMD	spirv.hpp	/^    BuiltInBaryCoordNoPerspAMD = 4992,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNoPerspCentroidAMD	spirv.hpp	/^    BuiltInBaryCoordNoPerspCentroidAMD = 4993,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNoPerspKHR	spirv.hpp	/^    BuiltInBaryCoordNoPerspKHR = 5287,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNoPerspNV	spirv.hpp	/^    BuiltInBaryCoordNoPerspNV = 5287,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordNoPerspSampleAMD	spirv.hpp	/^    BuiltInBaryCoordNoPerspSampleAMD = 4994,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordPullModelAMD	spirv.hpp	/^    BuiltInBaryCoordPullModelAMD = 4998,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordSmoothAMD	spirv.hpp	/^    BuiltInBaryCoordSmoothAMD = 4995,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordSmoothCentroidAMD	spirv.hpp	/^    BuiltInBaryCoordSmoothCentroidAMD = 4996,$/;"	e	enum:spv::BuiltIn
BuiltInBaryCoordSmoothSampleAMD	spirv.hpp	/^    BuiltInBaryCoordSmoothSampleAMD = 4997,$/;"	e	enum:spv::BuiltIn
BuiltInBaseInstance	spirv.hpp	/^    BuiltInBaseInstance = 4425,$/;"	e	enum:spv::BuiltIn
BuiltInBaseVertex	spirv.hpp	/^    BuiltInBaseVertex = 4424,$/;"	e	enum:spv::BuiltIn
BuiltInClipDistance	spirv.hpp	/^    BuiltInClipDistance = 3,$/;"	e	enum:spv::BuiltIn
BuiltInClipDistancePerViewNV	spirv.hpp	/^    BuiltInClipDistancePerViewNV = 5277,$/;"	e	enum:spv::BuiltIn
BuiltInCullDistance	spirv.hpp	/^    BuiltInCullDistance = 4,$/;"	e	enum:spv::BuiltIn
BuiltInCullDistancePerViewNV	spirv.hpp	/^    BuiltInCullDistancePerViewNV = 5278,$/;"	e	enum:spv::BuiltIn
BuiltInCurrentRayTimeNV	spirv.hpp	/^    BuiltInCurrentRayTimeNV = 5334,$/;"	e	enum:spv::BuiltIn
BuiltInDeviceIndex	spirv.hpp	/^    BuiltInDeviceIndex = 4438,$/;"	e	enum:spv::BuiltIn
BuiltInDrawIndex	spirv.hpp	/^    BuiltInDrawIndex = 4426,$/;"	e	enum:spv::BuiltIn
BuiltInEnqueuedWorkgroupSize	spirv.hpp	/^    BuiltInEnqueuedWorkgroupSize = 32,$/;"	e	enum:spv::BuiltIn
BuiltInFragCoord	spirv.hpp	/^    BuiltInFragCoord = 15,$/;"	e	enum:spv::BuiltIn
BuiltInFragDepth	spirv.hpp	/^    BuiltInFragDepth = 22,$/;"	e	enum:spv::BuiltIn
BuiltInFragInvocationCountEXT	spirv.hpp	/^    BuiltInFragInvocationCountEXT = 5293,$/;"	e	enum:spv::BuiltIn
BuiltInFragSizeEXT	spirv.hpp	/^    BuiltInFragSizeEXT = 5292,$/;"	e	enum:spv::BuiltIn
BuiltInFragStencilRefEXT	spirv.hpp	/^    BuiltInFragStencilRefEXT = 5014,$/;"	e	enum:spv::BuiltIn
BuiltInFragmentSizeNV	spirv.hpp	/^    BuiltInFragmentSizeNV = 5292,$/;"	e	enum:spv::BuiltIn
BuiltInFrontFacing	spirv.hpp	/^    BuiltInFrontFacing = 17,$/;"	e	enum:spv::BuiltIn
BuiltInFullyCoveredEXT	spirv.hpp	/^    BuiltInFullyCoveredEXT = 5264,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalInvocationId	spirv.hpp	/^    BuiltInGlobalInvocationId = 28,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalLinearId	spirv.hpp	/^    BuiltInGlobalLinearId = 34,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalOffset	spirv.hpp	/^    BuiltInGlobalOffset = 33,$/;"	e	enum:spv::BuiltIn
BuiltInGlobalSize	spirv.hpp	/^    BuiltInGlobalSize = 31,$/;"	e	enum:spv::BuiltIn
BuiltInHelperInvocation	spirv.hpp	/^    BuiltInHelperInvocation = 23,$/;"	e	enum:spv::BuiltIn
BuiltInHitKindKHR	spirv.hpp	/^    BuiltInHitKindKHR = 5333,$/;"	e	enum:spv::BuiltIn
BuiltInHitKindNV	spirv.hpp	/^    BuiltInHitKindNV = 5333,$/;"	e	enum:spv::BuiltIn
BuiltInHitTNV	spirv.hpp	/^    BuiltInHitTNV = 5332,$/;"	e	enum:spv::BuiltIn
BuiltInIncomingRayFlagsKHR	spirv.hpp	/^    BuiltInIncomingRayFlagsKHR = 5351,$/;"	e	enum:spv::BuiltIn
BuiltInIncomingRayFlagsNV	spirv.hpp	/^    BuiltInIncomingRayFlagsNV = 5351,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceCustomIndexKHR	spirv.hpp	/^    BuiltInInstanceCustomIndexKHR = 5327,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceCustomIndexNV	spirv.hpp	/^    BuiltInInstanceCustomIndexNV = 5327,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceId	spirv.hpp	/^    BuiltInInstanceId = 6,$/;"	e	enum:spv::BuiltIn
BuiltInInstanceIndex	spirv.hpp	/^    BuiltInInstanceIndex = 43,$/;"	e	enum:spv::BuiltIn
BuiltInInvocationId	spirv.hpp	/^    BuiltInInvocationId = 8,$/;"	e	enum:spv::BuiltIn
BuiltInInvocationsPerPixelNV	spirv.hpp	/^    BuiltInInvocationsPerPixelNV = 5293,$/;"	e	enum:spv::BuiltIn
BuiltInLaunchIdKHR	spirv.hpp	/^    BuiltInLaunchIdKHR = 5319,$/;"	e	enum:spv::BuiltIn
BuiltInLaunchIdNV	spirv.hpp	/^    BuiltInLaunchIdNV = 5319,$/;"	e	enum:spv::BuiltIn
BuiltInLaunchSizeKHR	spirv.hpp	/^    BuiltInLaunchSizeKHR = 5320,$/;"	e	enum:spv::BuiltIn
BuiltInLaunchSizeNV	spirv.hpp	/^    BuiltInLaunchSizeNV = 5320,$/;"	e	enum:spv::BuiltIn
BuiltInLayer	spirv.hpp	/^    BuiltInLayer = 9,$/;"	e	enum:spv::BuiltIn
BuiltInLayerPerViewNV	spirv.hpp	/^    BuiltInLayerPerViewNV = 5279,$/;"	e	enum:spv::BuiltIn
BuiltInLocalInvocationId	spirv.hpp	/^    BuiltInLocalInvocationId = 27,$/;"	e	enum:spv::BuiltIn
BuiltInLocalInvocationIndex	spirv.hpp	/^    BuiltInLocalInvocationIndex = 29,$/;"	e	enum:spv::BuiltIn
BuiltInMax	spirv.hpp	/^    BuiltInMax = 0x7fffffff,$/;"	e	enum:spv::BuiltIn
BuiltInMeshViewCountNV	spirv.hpp	/^    BuiltInMeshViewCountNV = 5280,$/;"	e	enum:spv::BuiltIn
BuiltInMeshViewIndicesNV	spirv.hpp	/^    BuiltInMeshViewIndicesNV = 5281,$/;"	e	enum:spv::BuiltIn
BuiltInNumEnqueuedSubgroups	spirv.hpp	/^    BuiltInNumEnqueuedSubgroups = 39,$/;"	e	enum:spv::BuiltIn
BuiltInNumSubgroups	spirv.hpp	/^    BuiltInNumSubgroups = 38,$/;"	e	enum:spv::BuiltIn
BuiltInNumWorkgroups	spirv.hpp	/^    BuiltInNumWorkgroups = 24,$/;"	e	enum:spv::BuiltIn
BuiltInObjectRayDirectionKHR	spirv.hpp	/^    BuiltInObjectRayDirectionKHR = 5324,$/;"	e	enum:spv::BuiltIn
BuiltInObjectRayDirectionNV	spirv.hpp	/^    BuiltInObjectRayDirectionNV = 5324,$/;"	e	enum:spv::BuiltIn
BuiltInObjectRayOriginKHR	spirv.hpp	/^    BuiltInObjectRayOriginKHR = 5323,$/;"	e	enum:spv::BuiltIn
BuiltInObjectRayOriginNV	spirv.hpp	/^    BuiltInObjectRayOriginNV = 5323,$/;"	e	enum:spv::BuiltIn
BuiltInObjectToWorldKHR	spirv.hpp	/^    BuiltInObjectToWorldKHR = 5330,$/;"	e	enum:spv::BuiltIn
BuiltInObjectToWorldNV	spirv.hpp	/^    BuiltInObjectToWorldNV = 5330,$/;"	e	enum:spv::BuiltIn
BuiltInPatchVertices	spirv.hpp	/^    BuiltInPatchVertices = 14,$/;"	e	enum:spv::BuiltIn
BuiltInPointCoord	spirv.hpp	/^    BuiltInPointCoord = 16,$/;"	e	enum:spv::BuiltIn
BuiltInPointSize	spirv.hpp	/^    BuiltInPointSize = 1,$/;"	e	enum:spv::BuiltIn
BuiltInPosition	spirv.hpp	/^    BuiltInPosition = 0,$/;"	e	enum:spv::BuiltIn
BuiltInPositionPerViewNV	spirv.hpp	/^    BuiltInPositionPerViewNV = 5261,$/;"	e	enum:spv::BuiltIn
BuiltInPrimitiveCountNV	spirv.hpp	/^    BuiltInPrimitiveCountNV = 5275,$/;"	e	enum:spv::BuiltIn
BuiltInPrimitiveId	spirv.hpp	/^    BuiltInPrimitiveId = 7,$/;"	e	enum:spv::BuiltIn
BuiltInPrimitiveIndicesNV	spirv.hpp	/^    BuiltInPrimitiveIndicesNV = 5276,$/;"	e	enum:spv::BuiltIn
BuiltInPrimitiveShadingRateKHR	spirv.hpp	/^    BuiltInPrimitiveShadingRateKHR = 4432,$/;"	e	enum:spv::BuiltIn
BuiltInRayGeometryIndexKHR	spirv.hpp	/^    BuiltInRayGeometryIndexKHR = 5352,$/;"	e	enum:spv::BuiltIn
BuiltInRayTmaxKHR	spirv.hpp	/^    BuiltInRayTmaxKHR = 5326,$/;"	e	enum:spv::BuiltIn
BuiltInRayTmaxNV	spirv.hpp	/^    BuiltInRayTmaxNV = 5326,$/;"	e	enum:spv::BuiltIn
BuiltInRayTminKHR	spirv.hpp	/^    BuiltInRayTminKHR = 5325,$/;"	e	enum:spv::BuiltIn
BuiltInRayTminNV	spirv.hpp	/^    BuiltInRayTminNV = 5325,$/;"	e	enum:spv::BuiltIn
BuiltInResource	spirv_cross.hpp	/^struct BuiltInResource$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
BuiltInSMCountNV	spirv.hpp	/^    BuiltInSMCountNV = 5375,$/;"	e	enum:spv::BuiltIn
BuiltInSMIDNV	spirv.hpp	/^    BuiltInSMIDNV = 5377,$/;"	e	enum:spv::BuiltIn
BuiltInSampleId	spirv.hpp	/^    BuiltInSampleId = 18,$/;"	e	enum:spv::BuiltIn
BuiltInSampleMask	spirv.hpp	/^    BuiltInSampleMask = 20,$/;"	e	enum:spv::BuiltIn
BuiltInSamplePosition	spirv.hpp	/^    BuiltInSamplePosition = 19,$/;"	e	enum:spv::BuiltIn
BuiltInSecondaryPositionNV	spirv.hpp	/^    BuiltInSecondaryPositionNV = 5257,$/;"	e	enum:spv::BuiltIn
BuiltInSecondaryViewportMaskNV	spirv.hpp	/^    BuiltInSecondaryViewportMaskNV = 5258,$/;"	e	enum:spv::BuiltIn
BuiltInShadingRateKHR	spirv.hpp	/^    BuiltInShadingRateKHR = 4444,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupEqMask	spirv.hpp	/^    BuiltInSubgroupEqMask = 4416,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupEqMaskKHR	spirv.hpp	/^    BuiltInSubgroupEqMaskKHR = 4416,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupGeMask	spirv.hpp	/^    BuiltInSubgroupGeMask = 4417,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupGeMaskKHR	spirv.hpp	/^    BuiltInSubgroupGeMaskKHR = 4417,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupGtMask	spirv.hpp	/^    BuiltInSubgroupGtMask = 4418,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupGtMaskKHR	spirv.hpp	/^    BuiltInSubgroupGtMaskKHR = 4418,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupId	spirv.hpp	/^    BuiltInSubgroupId = 40,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLeMask	spirv.hpp	/^    BuiltInSubgroupLeMask = 4419,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLeMaskKHR	spirv.hpp	/^    BuiltInSubgroupLeMaskKHR = 4419,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLocalInvocationId	spirv.hpp	/^    BuiltInSubgroupLocalInvocationId = 41,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLtMask	spirv.hpp	/^    BuiltInSubgroupLtMask = 4420,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupLtMaskKHR	spirv.hpp	/^    BuiltInSubgroupLtMaskKHR = 4420,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupMaxSize	spirv.hpp	/^    BuiltInSubgroupMaxSize = 37,$/;"	e	enum:spv::BuiltIn
BuiltInSubgroupSize	spirv.hpp	/^    BuiltInSubgroupSize = 36,$/;"	e	enum:spv::BuiltIn
BuiltInTaskCountNV	spirv.hpp	/^    BuiltInTaskCountNV = 5274,$/;"	e	enum:spv::BuiltIn
BuiltInTessCoord	spirv.hpp	/^    BuiltInTessCoord = 13,$/;"	e	enum:spv::BuiltIn
BuiltInTessLevelInner	spirv.hpp	/^    BuiltInTessLevelInner = 12,$/;"	e	enum:spv::BuiltIn
BuiltInTessLevelOuter	spirv.hpp	/^    BuiltInTessLevelOuter = 11,$/;"	e	enum:spv::BuiltIn
BuiltInVertexId	spirv.hpp	/^    BuiltInVertexId = 5,$/;"	e	enum:spv::BuiltIn
BuiltInVertexIndex	spirv.hpp	/^    BuiltInVertexIndex = 42,$/;"	e	enum:spv::BuiltIn
BuiltInViewIndex	spirv.hpp	/^    BuiltInViewIndex = 4440,$/;"	e	enum:spv::BuiltIn
BuiltInViewportIndex	spirv.hpp	/^    BuiltInViewportIndex = 10,$/;"	e	enum:spv::BuiltIn
BuiltInViewportMaskNV	spirv.hpp	/^    BuiltInViewportMaskNV = 5253,$/;"	e	enum:spv::BuiltIn
BuiltInViewportMaskPerViewNV	spirv.hpp	/^    BuiltInViewportMaskPerViewNV = 5262,$/;"	e	enum:spv::BuiltIn
BuiltInWarpIDNV	spirv.hpp	/^    BuiltInWarpIDNV = 5376,$/;"	e	enum:spv::BuiltIn
BuiltInWarpsPerSMNV	spirv.hpp	/^    BuiltInWarpsPerSMNV = 5374,$/;"	e	enum:spv::BuiltIn
BuiltInWorkDim	spirv.hpp	/^    BuiltInWorkDim = 30,$/;"	e	enum:spv::BuiltIn
BuiltInWorkgroupId	spirv.hpp	/^    BuiltInWorkgroupId = 26,$/;"	e	enum:spv::BuiltIn
BuiltInWorkgroupSize	spirv.hpp	/^    BuiltInWorkgroupSize = 25,$/;"	e	enum:spv::BuiltIn
BuiltInWorldRayDirectionKHR	spirv.hpp	/^    BuiltInWorldRayDirectionKHR = 5322,$/;"	e	enum:spv::BuiltIn
BuiltInWorldRayDirectionNV	spirv.hpp	/^    BuiltInWorldRayDirectionNV = 5322,$/;"	e	enum:spv::BuiltIn
BuiltInWorldRayOriginKHR	spirv.hpp	/^    BuiltInWorldRayOriginKHR = 5321,$/;"	e	enum:spv::BuiltIn
BuiltInWorldRayOriginNV	spirv.hpp	/^    BuiltInWorldRayOriginNV = 5321,$/;"	e	enum:spv::BuiltIn
BuiltInWorldToObjectKHR	spirv.hpp	/^    BuiltInWorldToObjectKHR = 5331,$/;"	e	enum:spv::BuiltIn
BuiltInWorldToObjectNV	spirv.hpp	/^    BuiltInWorldToObjectNV = 5331,$/;"	e	enum:spv::BuiltIn
CFG	spirv_cfg.cpp	/^CFG::CFG(Compiler &compiler_, const SPIRFunction &func_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
CFG	spirv_cfg.hpp	/^class CFG$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CFGBuilder	spirv_cross.cpp	/^Compiler::CFGBuilder::CFGBuilder(Compiler &compiler_)$/;"	f	class:Compiler::CFGBuilder
CFGBuilder	spirv_cross.hpp	/^	struct CFGBuilder : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
CHECK_MODE	main.cpp	488;"	d	file:
CLIArguments	main.cpp	/^struct CLIArguments$/;"	s	file:
CLICallbacks	main.cpp	/^struct CLICallbacks$/;"	s	file:
CLIParser	main.cpp	/^	CLIParser(CLICallbacks cbs_, int argc_, char *argv_[])$/;"	f	struct:CLIParser
CLIParser	main.cpp	/^struct CLIParser$/;"	s	file:
CLI_OBJECTS	Makefile	/^CLI_OBJECTS := $(CLI_SOURCES:.cpp=.o)$/;"	m
CLI_SOURCES	Makefile	/^CLI_SOURCES := main.cpp$/;"	m
Candidate	spirv_glsl.hpp	/^		enum Candidate$/;"	g	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper
CandidateCount	spirv_glsl.hpp	/^			CandidateCount$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
Capability	spirv.hpp	/^enum Capability {$/;"	g	namespace:spv
CapabilityAddresses	spirv.hpp	/^    CapabilityAddresses = 4,$/;"	e	enum:spv::Capability
CapabilityArbitraryPrecisionFixedPointINTEL	spirv.hpp	/^    CapabilityArbitraryPrecisionFixedPointINTEL = 5922,$/;"	e	enum:spv::Capability
CapabilityArbitraryPrecisionFloatingPointINTEL	spirv.hpp	/^    CapabilityArbitraryPrecisionFloatingPointINTEL = 5845,$/;"	e	enum:spv::Capability
CapabilityArbitraryPrecisionIntegersINTEL	spirv.hpp	/^    CapabilityArbitraryPrecisionIntegersINTEL = 5844,$/;"	e	enum:spv::Capability
CapabilityAsmINTEL	spirv.hpp	/^    CapabilityAsmINTEL = 5606,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat16AddEXT	spirv.hpp	/^    CapabilityAtomicFloat16AddEXT = 6095,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat16MinMaxEXT	spirv.hpp	/^    CapabilityAtomicFloat16MinMaxEXT = 5616,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat32AddEXT	spirv.hpp	/^    CapabilityAtomicFloat32AddEXT = 6033,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat32MinMaxEXT	spirv.hpp	/^    CapabilityAtomicFloat32MinMaxEXT = 5612,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat64AddEXT	spirv.hpp	/^    CapabilityAtomicFloat64AddEXT = 6034,$/;"	e	enum:spv::Capability
CapabilityAtomicFloat64MinMaxEXT	spirv.hpp	/^    CapabilityAtomicFloat64MinMaxEXT = 5613,$/;"	e	enum:spv::Capability
CapabilityAtomicStorage	spirv.hpp	/^    CapabilityAtomicStorage = 21,$/;"	e	enum:spv::Capability
CapabilityAtomicStorageOps	spirv.hpp	/^    CapabilityAtomicStorageOps = 4445,$/;"	e	enum:spv::Capability
CapabilityBindlessTextureNV	spirv.hpp	/^    CapabilityBindlessTextureNV = 5390,$/;"	e	enum:spv::Capability
CapabilityBitInstructions	spirv.hpp	/^    CapabilityBitInstructions = 6025,$/;"	e	enum:spv::Capability
CapabilityBlockingPipesINTEL	spirv.hpp	/^    CapabilityBlockingPipesINTEL = 5945,$/;"	e	enum:spv::Capability
CapabilityClipDistance	spirv.hpp	/^    CapabilityClipDistance = 32,$/;"	e	enum:spv::Capability
CapabilityComputeDerivativeGroupLinearNV	spirv.hpp	/^    CapabilityComputeDerivativeGroupLinearNV = 5350,$/;"	e	enum:spv::Capability
CapabilityComputeDerivativeGroupQuadsNV	spirv.hpp	/^    CapabilityComputeDerivativeGroupQuadsNV = 5288,$/;"	e	enum:spv::Capability
CapabilityCooperativeMatrixNV	spirv.hpp	/^    CapabilityCooperativeMatrixNV = 5357,$/;"	e	enum:spv::Capability
CapabilityCullDistance	spirv.hpp	/^    CapabilityCullDistance = 33,$/;"	e	enum:spv::Capability
CapabilityDebugInfoModuleINTEL	spirv.hpp	/^    CapabilityDebugInfoModuleINTEL = 6114,$/;"	e	enum:spv::Capability
CapabilityDemoteToHelperInvocation	spirv.hpp	/^    CapabilityDemoteToHelperInvocation = 5379,$/;"	e	enum:spv::Capability
CapabilityDemoteToHelperInvocationEXT	spirv.hpp	/^    CapabilityDemoteToHelperInvocationEXT = 5379,$/;"	e	enum:spv::Capability
CapabilityDenormFlushToZero	spirv.hpp	/^    CapabilityDenormFlushToZero = 4465,$/;"	e	enum:spv::Capability
CapabilityDenormPreserve	spirv.hpp	/^    CapabilityDenormPreserve = 4464,$/;"	e	enum:spv::Capability
CapabilityDerivativeControl	spirv.hpp	/^    CapabilityDerivativeControl = 51,$/;"	e	enum:spv::Capability
CapabilityDeviceEnqueue	spirv.hpp	/^    CapabilityDeviceEnqueue = 19,$/;"	e	enum:spv::Capability
CapabilityDeviceGroup	spirv.hpp	/^    CapabilityDeviceGroup = 4437,$/;"	e	enum:spv::Capability
CapabilityDotProduct	spirv.hpp	/^    CapabilityDotProduct = 6019,$/;"	e	enum:spv::Capability
CapabilityDotProductInput4x8Bit	spirv.hpp	/^    CapabilityDotProductInput4x8Bit = 6017,$/;"	e	enum:spv::Capability
CapabilityDotProductInput4x8BitKHR	spirv.hpp	/^    CapabilityDotProductInput4x8BitKHR = 6017,$/;"	e	enum:spv::Capability
CapabilityDotProductInput4x8BitPacked	spirv.hpp	/^    CapabilityDotProductInput4x8BitPacked = 6018,$/;"	e	enum:spv::Capability
CapabilityDotProductInput4x8BitPackedKHR	spirv.hpp	/^    CapabilityDotProductInput4x8BitPackedKHR = 6018,$/;"	e	enum:spv::Capability
CapabilityDotProductInputAll	spirv.hpp	/^    CapabilityDotProductInputAll = 6016,$/;"	e	enum:spv::Capability
CapabilityDotProductInputAllKHR	spirv.hpp	/^    CapabilityDotProductInputAllKHR = 6016,$/;"	e	enum:spv::Capability
CapabilityDotProductKHR	spirv.hpp	/^    CapabilityDotProductKHR = 6019,$/;"	e	enum:spv::Capability
CapabilityDrawParameters	spirv.hpp	/^    CapabilityDrawParameters = 4427,$/;"	e	enum:spv::Capability
CapabilityExpectAssumeKHR	spirv.hpp	/^    CapabilityExpectAssumeKHR = 5629,$/;"	e	enum:spv::Capability
CapabilityFPFastMathModeINTEL	spirv.hpp	/^    CapabilityFPFastMathModeINTEL = 5837,$/;"	e	enum:spv::Capability
CapabilityFPGABufferLocationINTEL	spirv.hpp	/^    CapabilityFPGABufferLocationINTEL = 5920,$/;"	e	enum:spv::Capability
CapabilityFPGAClusterAttributesINTEL	spirv.hpp	/^    CapabilityFPGAClusterAttributesINTEL = 5904,$/;"	e	enum:spv::Capability
CapabilityFPGAKernelAttributesINTEL	spirv.hpp	/^    CapabilityFPGAKernelAttributesINTEL = 5897,$/;"	e	enum:spv::Capability
CapabilityFPGALoopControlsINTEL	spirv.hpp	/^    CapabilityFPGALoopControlsINTEL = 5888,$/;"	e	enum:spv::Capability
CapabilityFPGAMemoryAccessesINTEL	spirv.hpp	/^    CapabilityFPGAMemoryAccessesINTEL = 5898,$/;"	e	enum:spv::Capability
CapabilityFPGAMemoryAttributesINTEL	spirv.hpp	/^    CapabilityFPGAMemoryAttributesINTEL = 5824,$/;"	e	enum:spv::Capability
CapabilityFPGARegINTEL	spirv.hpp	/^    CapabilityFPGARegINTEL = 5948,$/;"	e	enum:spv::Capability
CapabilityFloat16	spirv.hpp	/^    CapabilityFloat16 = 9,$/;"	e	enum:spv::Capability
CapabilityFloat16Buffer	spirv.hpp	/^    CapabilityFloat16Buffer = 8,$/;"	e	enum:spv::Capability
CapabilityFloat16ImageAMD	spirv.hpp	/^    CapabilityFloat16ImageAMD = 5008,$/;"	e	enum:spv::Capability
CapabilityFloat64	spirv.hpp	/^    CapabilityFloat64 = 10,$/;"	e	enum:spv::Capability
CapabilityFloatingPointModeINTEL	spirv.hpp	/^    CapabilityFloatingPointModeINTEL = 5583,$/;"	e	enum:spv::Capability
CapabilityFragmentBarycentricKHR	spirv.hpp	/^    CapabilityFragmentBarycentricKHR = 5284,$/;"	e	enum:spv::Capability
CapabilityFragmentBarycentricNV	spirv.hpp	/^    CapabilityFragmentBarycentricNV = 5284,$/;"	e	enum:spv::Capability
CapabilityFragmentDensityEXT	spirv.hpp	/^    CapabilityFragmentDensityEXT = 5291,$/;"	e	enum:spv::Capability
CapabilityFragmentFullyCoveredEXT	spirv.hpp	/^    CapabilityFragmentFullyCoveredEXT = 5265,$/;"	e	enum:spv::Capability
CapabilityFragmentMaskAMD	spirv.hpp	/^    CapabilityFragmentMaskAMD = 5010,$/;"	e	enum:spv::Capability
CapabilityFragmentShaderPixelInterlockEXT	spirv.hpp	/^    CapabilityFragmentShaderPixelInterlockEXT = 5378,$/;"	e	enum:spv::Capability
CapabilityFragmentShaderSampleInterlockEXT	spirv.hpp	/^    CapabilityFragmentShaderSampleInterlockEXT = 5363,$/;"	e	enum:spv::Capability
CapabilityFragmentShaderShadingRateInterlockEXT	spirv.hpp	/^    CapabilityFragmentShaderShadingRateInterlockEXT = 5372,$/;"	e	enum:spv::Capability
CapabilityFragmentShadingRateKHR	spirv.hpp	/^    CapabilityFragmentShadingRateKHR = 4422,$/;"	e	enum:spv::Capability
CapabilityFunctionFloatControlINTEL	spirv.hpp	/^    CapabilityFunctionFloatControlINTEL = 5821,$/;"	e	enum:spv::Capability
CapabilityFunctionPointersINTEL	spirv.hpp	/^    CapabilityFunctionPointersINTEL = 5603,$/;"	e	enum:spv::Capability
CapabilityGenericPointer	spirv.hpp	/^    CapabilityGenericPointer = 38,$/;"	e	enum:spv::Capability
CapabilityGeometry	spirv.hpp	/^    CapabilityGeometry = 2,$/;"	e	enum:spv::Capability
CapabilityGeometryPointSize	spirv.hpp	/^    CapabilityGeometryPointSize = 24,$/;"	e	enum:spv::Capability
CapabilityGeometryShaderPassthroughNV	spirv.hpp	/^    CapabilityGeometryShaderPassthroughNV = 5251,$/;"	e	enum:spv::Capability
CapabilityGeometryStreams	spirv.hpp	/^    CapabilityGeometryStreams = 54,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniform	spirv.hpp	/^    CapabilityGroupNonUniform = 61,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformArithmetic	spirv.hpp	/^    CapabilityGroupNonUniformArithmetic = 63,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformBallot	spirv.hpp	/^    CapabilityGroupNonUniformBallot = 64,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformClustered	spirv.hpp	/^    CapabilityGroupNonUniformClustered = 67,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformPartitionedNV	spirv.hpp	/^    CapabilityGroupNonUniformPartitionedNV = 5297,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformQuad	spirv.hpp	/^    CapabilityGroupNonUniformQuad = 68,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformShuffle	spirv.hpp	/^    CapabilityGroupNonUniformShuffle = 65,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformShuffleRelative	spirv.hpp	/^    CapabilityGroupNonUniformShuffleRelative = 66,$/;"	e	enum:spv::Capability
CapabilityGroupNonUniformVote	spirv.hpp	/^    CapabilityGroupNonUniformVote = 62,$/;"	e	enum:spv::Capability
CapabilityGroups	spirv.hpp	/^    CapabilityGroups = 18,$/;"	e	enum:spv::Capability
CapabilityIOPipesINTEL	spirv.hpp	/^    CapabilityIOPipesINTEL = 5943,$/;"	e	enum:spv::Capability
CapabilityImage1D	spirv.hpp	/^    CapabilityImage1D = 44,$/;"	e	enum:spv::Capability
CapabilityImageBasic	spirv.hpp	/^    CapabilityImageBasic = 13,$/;"	e	enum:spv::Capability
CapabilityImageBuffer	spirv.hpp	/^    CapabilityImageBuffer = 47,$/;"	e	enum:spv::Capability
CapabilityImageCubeArray	spirv.hpp	/^    CapabilityImageCubeArray = 34,$/;"	e	enum:spv::Capability
CapabilityImageFootprintNV	spirv.hpp	/^    CapabilityImageFootprintNV = 5282,$/;"	e	enum:spv::Capability
CapabilityImageGatherBiasLodAMD	spirv.hpp	/^    CapabilityImageGatherBiasLodAMD = 5009,$/;"	e	enum:spv::Capability
CapabilityImageGatherExtended	spirv.hpp	/^    CapabilityImageGatherExtended = 25,$/;"	e	enum:spv::Capability
CapabilityImageMSArray	spirv.hpp	/^    CapabilityImageMSArray = 48,$/;"	e	enum:spv::Capability
CapabilityImageMipmap	spirv.hpp	/^    CapabilityImageMipmap = 15,$/;"	e	enum:spv::Capability
CapabilityImageQuery	spirv.hpp	/^    CapabilityImageQuery = 50,$/;"	e	enum:spv::Capability
CapabilityImageReadWrite	spirv.hpp	/^    CapabilityImageReadWrite = 14,$/;"	e	enum:spv::Capability
CapabilityImageReadWriteLodAMD	spirv.hpp	/^    CapabilityImageReadWriteLodAMD = 5015,$/;"	e	enum:spv::Capability
CapabilityImageRect	spirv.hpp	/^    CapabilityImageRect = 36,$/;"	e	enum:spv::Capability
CapabilityIndirectReferencesINTEL	spirv.hpp	/^    CapabilityIndirectReferencesINTEL = 5604,$/;"	e	enum:spv::Capability
CapabilityInputAttachment	spirv.hpp	/^    CapabilityInputAttachment = 40,$/;"	e	enum:spv::Capability
CapabilityInputAttachmentArrayDynamicIndexing	spirv.hpp	/^    CapabilityInputAttachmentArrayDynamicIndexing = 5303,$/;"	e	enum:spv::Capability
CapabilityInputAttachmentArrayDynamicIndexingEXT	spirv.hpp	/^    CapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,$/;"	e	enum:spv::Capability
CapabilityInputAttachmentArrayNonUniformIndexing	spirv.hpp	/^    CapabilityInputAttachmentArrayNonUniformIndexing = 5310,$/;"	e	enum:spv::Capability
CapabilityInputAttachmentArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,$/;"	e	enum:spv::Capability
CapabilityInt16	spirv.hpp	/^    CapabilityInt16 = 22,$/;"	e	enum:spv::Capability
CapabilityInt64	spirv.hpp	/^    CapabilityInt64 = 11,$/;"	e	enum:spv::Capability
CapabilityInt64Atomics	spirv.hpp	/^    CapabilityInt64Atomics = 12,$/;"	e	enum:spv::Capability
CapabilityInt64ImageEXT	spirv.hpp	/^    CapabilityInt64ImageEXT = 5016,$/;"	e	enum:spv::Capability
CapabilityInt8	spirv.hpp	/^    CapabilityInt8 = 39,$/;"	e	enum:spv::Capability
CapabilityIntegerFunctions2INTEL	spirv.hpp	/^    CapabilityIntegerFunctions2INTEL = 5584,$/;"	e	enum:spv::Capability
CapabilityInterpolationFunction	spirv.hpp	/^    CapabilityInterpolationFunction = 52,$/;"	e	enum:spv::Capability
CapabilityKernel	spirv.hpp	/^    CapabilityKernel = 6,$/;"	e	enum:spv::Capability
CapabilityKernelAttributesINTEL	spirv.hpp	/^    CapabilityKernelAttributesINTEL = 5892,$/;"	e	enum:spv::Capability
CapabilityLinkage	spirv.hpp	/^    CapabilityLinkage = 5,$/;"	e	enum:spv::Capability
CapabilityLiteralSampler	spirv.hpp	/^    CapabilityLiteralSampler = 20,$/;"	e	enum:spv::Capability
CapabilityLongConstantCompositeINTEL	spirv.hpp	/^    CapabilityLongConstantCompositeINTEL = 6089,$/;"	e	enum:spv::Capability
CapabilityLoopFuseINTEL	spirv.hpp	/^    CapabilityLoopFuseINTEL = 5906,$/;"	e	enum:spv::Capability
CapabilityMatrix	spirv.hpp	/^    CapabilityMatrix = 0,$/;"	e	enum:spv::Capability
CapabilityMax	spirv.hpp	/^    CapabilityMax = 0x7fffffff,$/;"	e	enum:spv::Capability
CapabilityMeshShadingNV	spirv.hpp	/^    CapabilityMeshShadingNV = 5266,$/;"	e	enum:spv::Capability
CapabilityMinLod	spirv.hpp	/^    CapabilityMinLod = 42,$/;"	e	enum:spv::Capability
CapabilityMultiView	spirv.hpp	/^    CapabilityMultiView = 4439,$/;"	e	enum:spv::Capability
CapabilityMultiViewport	spirv.hpp	/^    CapabilityMultiViewport = 57,$/;"	e	enum:spv::Capability
CapabilityNamedBarrier	spirv.hpp	/^    CapabilityNamedBarrier = 59,$/;"	e	enum:spv::Capability
CapabilityOptNoneINTEL	spirv.hpp	/^    CapabilityOptNoneINTEL = 6094,$/;"	e	enum:spv::Capability
CapabilityPerViewAttributesNV	spirv.hpp	/^    CapabilityPerViewAttributesNV = 5260,$/;"	e	enum:spv::Capability
CapabilityPhysicalStorageBufferAddresses	spirv.hpp	/^    CapabilityPhysicalStorageBufferAddresses = 5347,$/;"	e	enum:spv::Capability
CapabilityPhysicalStorageBufferAddressesEXT	spirv.hpp	/^    CapabilityPhysicalStorageBufferAddressesEXT = 5347,$/;"	e	enum:spv::Capability
CapabilityPipeStorage	spirv.hpp	/^    CapabilityPipeStorage = 60,$/;"	e	enum:spv::Capability
CapabilityPipes	spirv.hpp	/^    CapabilityPipes = 17,$/;"	e	enum:spv::Capability
CapabilityRayQueryKHR	spirv.hpp	/^    CapabilityRayQueryKHR = 4472,$/;"	e	enum:spv::Capability
CapabilityRayQueryProvisionalKHR	spirv.hpp	/^    CapabilityRayQueryProvisionalKHR = 4471,$/;"	e	enum:spv::Capability
CapabilityRayTracingKHR	spirv.hpp	/^    CapabilityRayTracingKHR = 4479,$/;"	e	enum:spv::Capability
CapabilityRayTracingMotionBlurNV	spirv.hpp	/^    CapabilityRayTracingMotionBlurNV = 5341,$/;"	e	enum:spv::Capability
CapabilityRayTracingNV	spirv.hpp	/^    CapabilityRayTracingNV = 5340,$/;"	e	enum:spv::Capability
CapabilityRayTracingProvisionalKHR	spirv.hpp	/^    CapabilityRayTracingProvisionalKHR = 5353,$/;"	e	enum:spv::Capability
CapabilityRayTraversalPrimitiveCullingKHR	spirv.hpp	/^    CapabilityRayTraversalPrimitiveCullingKHR = 4478,$/;"	e	enum:spv::Capability
CapabilityRoundToInfinityINTEL	spirv.hpp	/^    CapabilityRoundToInfinityINTEL = 5582,$/;"	e	enum:spv::Capability
CapabilityRoundingModeRTE	spirv.hpp	/^    CapabilityRoundingModeRTE = 4467,$/;"	e	enum:spv::Capability
CapabilityRoundingModeRTZ	spirv.hpp	/^    CapabilityRoundingModeRTZ = 4468,$/;"	e	enum:spv::Capability
CapabilityRuntimeDescriptorArray	spirv.hpp	/^    CapabilityRuntimeDescriptorArray = 5302,$/;"	e	enum:spv::Capability
CapabilityRuntimeDescriptorArrayEXT	spirv.hpp	/^    CapabilityRuntimeDescriptorArrayEXT = 5302,$/;"	e	enum:spv::Capability
CapabilitySampleMaskOverrideCoverageNV	spirv.hpp	/^    CapabilitySampleMaskOverrideCoverageNV = 5249,$/;"	e	enum:spv::Capability
CapabilitySampleMaskPostDepthCoverage	spirv.hpp	/^    CapabilitySampleMaskPostDepthCoverage = 4447,$/;"	e	enum:spv::Capability
CapabilitySampleRateShading	spirv.hpp	/^    CapabilitySampleRateShading = 35,$/;"	e	enum:spv::Capability
CapabilitySampled1D	spirv.hpp	/^    CapabilitySampled1D = 43,$/;"	e	enum:spv::Capability
CapabilitySampledBuffer	spirv.hpp	/^    CapabilitySampledBuffer = 46,$/;"	e	enum:spv::Capability
CapabilitySampledCubeArray	spirv.hpp	/^    CapabilitySampledCubeArray = 45,$/;"	e	enum:spv::Capability
CapabilitySampledImageArrayDynamicIndexing	spirv.hpp	/^    CapabilitySampledImageArrayDynamicIndexing = 29,$/;"	e	enum:spv::Capability
CapabilitySampledImageArrayNonUniformIndexing	spirv.hpp	/^    CapabilitySampledImageArrayNonUniformIndexing = 5307,$/;"	e	enum:spv::Capability
CapabilitySampledImageArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilitySampledImageArrayNonUniformIndexingEXT = 5307,$/;"	e	enum:spv::Capability
CapabilitySampledRect	spirv.hpp	/^    CapabilitySampledRect = 37,$/;"	e	enum:spv::Capability
CapabilityShader	spirv.hpp	/^    CapabilityShader = 1,$/;"	e	enum:spv::Capability
CapabilityShaderClockKHR	spirv.hpp	/^    CapabilityShaderClockKHR = 5055,$/;"	e	enum:spv::Capability
CapabilityShaderLayer	spirv.hpp	/^    CapabilityShaderLayer = 69,$/;"	e	enum:spv::Capability
CapabilityShaderNonUniform	spirv.hpp	/^    CapabilityShaderNonUniform = 5301,$/;"	e	enum:spv::Capability
CapabilityShaderNonUniformEXT	spirv.hpp	/^    CapabilityShaderNonUniformEXT = 5301,$/;"	e	enum:spv::Capability
CapabilityShaderSMBuiltinsNV	spirv.hpp	/^    CapabilityShaderSMBuiltinsNV = 5373,$/;"	e	enum:spv::Capability
CapabilityShaderStereoViewNV	spirv.hpp	/^    CapabilityShaderStereoViewNV = 5259,$/;"	e	enum:spv::Capability
CapabilityShaderViewportIndex	spirv.hpp	/^    CapabilityShaderViewportIndex = 70,$/;"	e	enum:spv::Capability
CapabilityShaderViewportIndexLayerEXT	spirv.hpp	/^    CapabilityShaderViewportIndexLayerEXT = 5254,$/;"	e	enum:spv::Capability
CapabilityShaderViewportIndexLayerNV	spirv.hpp	/^    CapabilityShaderViewportIndexLayerNV = 5254,$/;"	e	enum:spv::Capability
CapabilityShaderViewportMaskNV	spirv.hpp	/^    CapabilityShaderViewportMaskNV = 5255,$/;"	e	enum:spv::Capability
CapabilityShadingRateNV	spirv.hpp	/^    CapabilityShadingRateNV = 5291,$/;"	e	enum:spv::Capability
CapabilitySignedZeroInfNanPreserve	spirv.hpp	/^    CapabilitySignedZeroInfNanPreserve = 4466,$/;"	e	enum:spv::Capability
CapabilitySparseResidency	spirv.hpp	/^    CapabilitySparseResidency = 41,$/;"	e	enum:spv::Capability
CapabilityStencilExportEXT	spirv.hpp	/^    CapabilityStencilExportEXT = 5013,$/;"	e	enum:spv::Capability
CapabilityStorageBuffer16BitAccess	spirv.hpp	/^    CapabilityStorageBuffer16BitAccess = 4433,$/;"	e	enum:spv::Capability
CapabilityStorageBuffer8BitAccess	spirv.hpp	/^    CapabilityStorageBuffer8BitAccess = 4448,$/;"	e	enum:spv::Capability
CapabilityStorageBufferArrayDynamicIndexing	spirv.hpp	/^    CapabilityStorageBufferArrayDynamicIndexing = 30,$/;"	e	enum:spv::Capability
CapabilityStorageBufferArrayNonUniformIndexing	spirv.hpp	/^    CapabilityStorageBufferArrayNonUniformIndexing = 5308,$/;"	e	enum:spv::Capability
CapabilityStorageBufferArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,$/;"	e	enum:spv::Capability
CapabilityStorageImageArrayDynamicIndexing	spirv.hpp	/^    CapabilityStorageImageArrayDynamicIndexing = 31,$/;"	e	enum:spv::Capability
CapabilityStorageImageArrayNonUniformIndexing	spirv.hpp	/^    CapabilityStorageImageArrayNonUniformIndexing = 5309,$/;"	e	enum:spv::Capability
CapabilityStorageImageArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityStorageImageArrayNonUniformIndexingEXT = 5309,$/;"	e	enum:spv::Capability
CapabilityStorageImageExtendedFormats	spirv.hpp	/^    CapabilityStorageImageExtendedFormats = 49,$/;"	e	enum:spv::Capability
CapabilityStorageImageMultisample	spirv.hpp	/^    CapabilityStorageImageMultisample = 27,$/;"	e	enum:spv::Capability
CapabilityStorageImageReadWithoutFormat	spirv.hpp	/^    CapabilityStorageImageReadWithoutFormat = 55,$/;"	e	enum:spv::Capability
CapabilityStorageImageWriteWithoutFormat	spirv.hpp	/^    CapabilityStorageImageWriteWithoutFormat = 56,$/;"	e	enum:spv::Capability
CapabilityStorageInputOutput16	spirv.hpp	/^    CapabilityStorageInputOutput16 = 4436,$/;"	e	enum:spv::Capability
CapabilityStoragePushConstant16	spirv.hpp	/^    CapabilityStoragePushConstant16 = 4435,$/;"	e	enum:spv::Capability
CapabilityStoragePushConstant8	spirv.hpp	/^    CapabilityStoragePushConstant8 = 4450,$/;"	e	enum:spv::Capability
CapabilityStorageTexelBufferArrayDynamicIndexing	spirv.hpp	/^    CapabilityStorageTexelBufferArrayDynamicIndexing = 5305,$/;"	e	enum:spv::Capability
CapabilityStorageTexelBufferArrayDynamicIndexingEXT	spirv.hpp	/^    CapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,$/;"	e	enum:spv::Capability
CapabilityStorageTexelBufferArrayNonUniformIndexing	spirv.hpp	/^    CapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,$/;"	e	enum:spv::Capability
CapabilityStorageTexelBufferArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,$/;"	e	enum:spv::Capability
CapabilityStorageUniform16	spirv.hpp	/^    CapabilityStorageUniform16 = 4434,$/;"	e	enum:spv::Capability
CapabilityStorageUniformBufferBlock16	spirv.hpp	/^    CapabilityStorageUniformBufferBlock16 = 4433,$/;"	e	enum:spv::Capability
CapabilitySubgroupAvcMotionEstimationChromaINTEL	spirv.hpp	/^    CapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,$/;"	e	enum:spv::Capability
CapabilitySubgroupAvcMotionEstimationINTEL	spirv.hpp	/^    CapabilitySubgroupAvcMotionEstimationINTEL = 5696,$/;"	e	enum:spv::Capability
CapabilitySubgroupAvcMotionEstimationIntraINTEL	spirv.hpp	/^    CapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,$/;"	e	enum:spv::Capability
CapabilitySubgroupBallotKHR	spirv.hpp	/^    CapabilitySubgroupBallotKHR = 4423,$/;"	e	enum:spv::Capability
CapabilitySubgroupBufferBlockIOINTEL	spirv.hpp	/^    CapabilitySubgroupBufferBlockIOINTEL = 5569,$/;"	e	enum:spv::Capability
CapabilitySubgroupDispatch	spirv.hpp	/^    CapabilitySubgroupDispatch = 58,$/;"	e	enum:spv::Capability
CapabilitySubgroupImageBlockIOINTEL	spirv.hpp	/^    CapabilitySubgroupImageBlockIOINTEL = 5570,$/;"	e	enum:spv::Capability
CapabilitySubgroupImageMediaBlockIOINTEL	spirv.hpp	/^    CapabilitySubgroupImageMediaBlockIOINTEL = 5579,$/;"	e	enum:spv::Capability
CapabilitySubgroupShuffleINTEL	spirv.hpp	/^    CapabilitySubgroupShuffleINTEL = 5568,$/;"	e	enum:spv::Capability
CapabilitySubgroupVoteKHR	spirv.hpp	/^    CapabilitySubgroupVoteKHR = 4431,$/;"	e	enum:spv::Capability
CapabilityTessellation	spirv.hpp	/^    CapabilityTessellation = 3,$/;"	e	enum:spv::Capability
CapabilityTessellationPointSize	spirv.hpp	/^    CapabilityTessellationPointSize = 23,$/;"	e	enum:spv::Capability
CapabilityTransformFeedback	spirv.hpp	/^    CapabilityTransformFeedback = 53,$/;"	e	enum:spv::Capability
CapabilityUSMStorageClassesINTEL	spirv.hpp	/^    CapabilityUSMStorageClassesINTEL = 5935,$/;"	e	enum:spv::Capability
CapabilityUniformAndStorageBuffer16BitAccess	spirv.hpp	/^    CapabilityUniformAndStorageBuffer16BitAccess = 4434,$/;"	e	enum:spv::Capability
CapabilityUniformAndStorageBuffer8BitAccess	spirv.hpp	/^    CapabilityUniformAndStorageBuffer8BitAccess = 4449,$/;"	e	enum:spv::Capability
CapabilityUniformBufferArrayDynamicIndexing	spirv.hpp	/^    CapabilityUniformBufferArrayDynamicIndexing = 28,$/;"	e	enum:spv::Capability
CapabilityUniformBufferArrayNonUniformIndexing	spirv.hpp	/^    CapabilityUniformBufferArrayNonUniformIndexing = 5306,$/;"	e	enum:spv::Capability
CapabilityUniformBufferArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,$/;"	e	enum:spv::Capability
CapabilityUniformDecoration	spirv.hpp	/^    CapabilityUniformDecoration = 71,$/;"	e	enum:spv::Capability
CapabilityUniformTexelBufferArrayDynamicIndexing	spirv.hpp	/^    CapabilityUniformTexelBufferArrayDynamicIndexing = 5304,$/;"	e	enum:spv::Capability
CapabilityUniformTexelBufferArrayDynamicIndexingEXT	spirv.hpp	/^    CapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,$/;"	e	enum:spv::Capability
CapabilityUniformTexelBufferArrayNonUniformIndexing	spirv.hpp	/^    CapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,$/;"	e	enum:spv::Capability
CapabilityUniformTexelBufferArrayNonUniformIndexingEXT	spirv.hpp	/^    CapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,$/;"	e	enum:spv::Capability
CapabilityUnstructuredLoopControlsINTEL	spirv.hpp	/^    CapabilityUnstructuredLoopControlsINTEL = 5886,$/;"	e	enum:spv::Capability
CapabilityVariableLengthArrayINTEL	spirv.hpp	/^    CapabilityVariableLengthArrayINTEL = 5817,$/;"	e	enum:spv::Capability
CapabilityVariablePointers	spirv.hpp	/^    CapabilityVariablePointers = 4442,$/;"	e	enum:spv::Capability
CapabilityVariablePointersStorageBuffer	spirv.hpp	/^    CapabilityVariablePointersStorageBuffer = 4441,$/;"	e	enum:spv::Capability
CapabilityVector16	spirv.hpp	/^    CapabilityVector16 = 7,$/;"	e	enum:spv::Capability
CapabilityVectorAnyINTEL	spirv.hpp	/^    CapabilityVectorAnyINTEL = 5619,$/;"	e	enum:spv::Capability
CapabilityVectorComputeINTEL	spirv.hpp	/^    CapabilityVectorComputeINTEL = 5617,$/;"	e	enum:spv::Capability
CapabilityVulkanMemoryModel	spirv.hpp	/^    CapabilityVulkanMemoryModel = 5345,$/;"	e	enum:spv::Capability
CapabilityVulkanMemoryModelDeviceScope	spirv.hpp	/^    CapabilityVulkanMemoryModelDeviceScope = 5346,$/;"	e	enum:spv::Capability
CapabilityVulkanMemoryModelDeviceScopeKHR	spirv.hpp	/^    CapabilityVulkanMemoryModelDeviceScopeKHR = 5346,$/;"	e	enum:spv::Capability
CapabilityVulkanMemoryModelKHR	spirv.hpp	/^    CapabilityVulkanMemoryModelKHR = 5345,$/;"	e	enum:spv::Capability
CapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR	spirv.hpp	/^    CapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR = 4430,$/;"	e	enum:spv::Capability
CapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR	spirv.hpp	/^    CapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR = 4429,$/;"	e	enum:spv::Capability
CapabilityWorkgroupMemoryExplicitLayoutKHR	spirv.hpp	/^    CapabilityWorkgroupMemoryExplicitLayoutKHR = 4428,$/;"	e	enum:spv::Capability
Case	spirv_common.hpp	/^	struct Case$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
Char	spirv_common.hpp	/^		Char$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
CombinedImageSampler	spirv_cross.hpp	/^struct CombinedImageSampler$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
CombinedImageSamplerDrefHandler	spirv_cross.hpp	/^		CombinedImageSamplerDrefHandler(Compiler &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerDrefHandler
CombinedImageSamplerDrefHandler	spirv_cross.hpp	/^	struct CombinedImageSamplerDrefHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
CombinedImageSamplerHandler	spirv_cross.hpp	/^		CombinedImageSamplerHandler(Compiler &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
CombinedImageSamplerHandler	spirv_cross.hpp	/^	struct CombinedImageSamplerHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
CombinedImageSamplerParameter	spirv_common.hpp	/^	struct CombinedImageSamplerParameter$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
CombinedImageSamplerUsageHandler	spirv_cross.hpp	/^		CombinedImageSamplerUsageHandler(Compiler &compiler_,$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
CombinedImageSamplerUsageHandler	spirv_cross.hpp	/^	struct CombinedImageSamplerUsageHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
Compiler	spirv_cross.cpp	/^Compiler::Compiler(ParsedIR &&ir_)$/;"	f	class:Compiler
Compiler	spirv_cross.cpp	/^Compiler::Compiler(const ParsedIR &ir_)$/;"	f	class:Compiler
Compiler	spirv_cross.cpp	/^Compiler::Compiler(const uint32_t *ir_, size_t word_count)$/;"	f	class:Compiler
Compiler	spirv_cross.cpp	/^Compiler::Compiler(vector<uint32_t> ir_)$/;"	f	class:Compiler
Compiler	spirv_cross.hpp	/^class Compiler$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CompilerCPP	spirv_cpp.hpp	/^	CompilerCPP(const uint32_t *ir_, size_t word_count)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
CompilerCPP	spirv_cpp.hpp	/^	explicit CompilerCPP(ParsedIR &&ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
CompilerCPP	spirv_cpp.hpp	/^	explicit CompilerCPP(const ParsedIR &ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
CompilerCPP	spirv_cpp.hpp	/^	explicit CompilerCPP(std::vector<uint32_t> spirv_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
CompilerCPP	spirv_cpp.hpp	/^class CompilerCPP : public CompilerGLSL$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CompilerGLSL	spirv_glsl.hpp	/^	CompilerGLSL(const uint32_t *ir_, size_t word_count)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
CompilerGLSL	spirv_glsl.hpp	/^	explicit CompilerGLSL(ParsedIR &&ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
CompilerGLSL	spirv_glsl.hpp	/^	explicit CompilerGLSL(const ParsedIR &ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
CompilerGLSL	spirv_glsl.hpp	/^	explicit CompilerGLSL(std::vector<uint32_t> spirv_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
CompilerGLSL	spirv_glsl.hpp	/^class CompilerGLSL : public Compiler$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CompilerHLSL	spirv_hlsl.hpp	/^	CompilerHLSL(const uint32_t *ir_, size_t size)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
CompilerHLSL	spirv_hlsl.hpp	/^	explicit CompilerHLSL(ParsedIR &&ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
CompilerHLSL	spirv_hlsl.hpp	/^	explicit CompilerHLSL(const ParsedIR &ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
CompilerHLSL	spirv_hlsl.hpp	/^	explicit CompilerHLSL(std::vector<uint32_t> spirv_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
CompilerHLSL	spirv_hlsl.hpp	/^class CompilerHLSL : public CompilerGLSL$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CompilerMSL	spirv_msl.cpp	/^CompilerMSL::CompilerMSL(ParsedIR &&ir_)$/;"	f	class:CompilerMSL
CompilerMSL	spirv_msl.cpp	/^CompilerMSL::CompilerMSL(const ParsedIR &ir_)$/;"	f	class:CompilerMSL
CompilerMSL	spirv_msl.cpp	/^CompilerMSL::CompilerMSL(const uint32_t *ir_, size_t word_count)$/;"	f	class:CompilerMSL
CompilerMSL	spirv_msl.cpp	/^CompilerMSL::CompilerMSL(std::vector<uint32_t> spirv_)$/;"	f	class:CompilerMSL
CompilerMSL	spirv_msl.hpp	/^class CompilerMSL : public CompilerGLSL$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
CompilerReflection	spirv_reflect.hpp	/^	CompilerReflection(const uint32_t *ir_, size_t word_count)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
CompilerReflection	spirv_reflect.hpp	/^	explicit CompilerReflection(ParsedIR &&ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
CompilerReflection	spirv_reflect.hpp	/^	explicit CompilerReflection(const ParsedIR &ir_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
CompilerReflection	spirv_reflect.hpp	/^	explicit CompilerReflection(std::vector<uint32_t> spirv_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
CompilerReflection	spirv_reflect.hpp	/^class CompilerReflection : public CompilerGLSL$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
ComplexLoop	spirv_common.hpp	/^		ComplexLoop$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::ContinueBlockType
Constant	spirv_common.hpp	/^	union Constant$/;"	u	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
ConstantMatrix	spirv_common.hpp	/^	struct ConstantMatrix$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
ConstantVector	spirv_common.hpp	/^		ConstantVector()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantVector
ConstantVector	spirv_common.hpp	/^	struct ConstantVector$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
ContinueBlockType	spirv_common.hpp	/^	enum ContinueBlockType$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
ContinueNone	spirv_common.hpp	/^		ContinueNone,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::ContinueBlockType
ControlPointArray	spirv_common.hpp	/^		ControlPointArray,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
DEPS	Makefile	/^DEPS := $(OBJECTS:.o=.d) $(CLI_OBJECTS:.o=.d)$/;"	m
Decoration	spirv.hpp	/^enum Decoration {$/;"	g	namespace:spv
Decoration	spirv_common.hpp	/^	struct Decoration$/;"	s	struct:SPIRV_CROSS_NAMESPACE::Meta
DecorationAliased	spirv.hpp	/^    DecorationAliased = 20,$/;"	e	enum:spv::Decoration
DecorationAliasedPointer	spirv.hpp	/^    DecorationAliasedPointer = 5356,$/;"	e	enum:spv::Decoration
DecorationAliasedPointerEXT	spirv.hpp	/^    DecorationAliasedPointerEXT = 5356,$/;"	e	enum:spv::Decoration
DecorationAlignment	spirv.hpp	/^    DecorationAlignment = 44,$/;"	e	enum:spv::Decoration
DecorationAlignmentId	spirv.hpp	/^    DecorationAlignmentId = 46,$/;"	e	enum:spv::Decoration
DecorationArrayStride	spirv.hpp	/^    DecorationArrayStride = 6,$/;"	e	enum:spv::Decoration
DecorationBankBitsINTEL	spirv.hpp	/^    DecorationBankBitsINTEL = 5835,$/;"	e	enum:spv::Decoration
DecorationBankwidthINTEL	spirv.hpp	/^    DecorationBankwidthINTEL = 5828,$/;"	e	enum:spv::Decoration
DecorationBinding	spirv.hpp	/^    DecorationBinding = 33,$/;"	e	enum:spv::Decoration
DecorationBindlessImageNV	spirv.hpp	/^    DecorationBindlessImageNV = 5399,$/;"	e	enum:spv::Decoration
DecorationBindlessSamplerNV	spirv.hpp	/^    DecorationBindlessSamplerNV = 5398,$/;"	e	enum:spv::Decoration
DecorationBlock	spirv.hpp	/^    DecorationBlock = 2,$/;"	e	enum:spv::Decoration
DecorationBoundImageNV	spirv.hpp	/^    DecorationBoundImageNV = 5401,$/;"	e	enum:spv::Decoration
DecorationBoundSamplerNV	spirv.hpp	/^    DecorationBoundSamplerNV = 5400,$/;"	e	enum:spv::Decoration
DecorationBufferBlock	spirv.hpp	/^    DecorationBufferBlock = 3,$/;"	e	enum:spv::Decoration
DecorationBufferLocationINTEL	spirv.hpp	/^    DecorationBufferLocationINTEL = 5921,$/;"	e	enum:spv::Decoration
DecorationBuiltIn	spirv.hpp	/^    DecorationBuiltIn = 11,$/;"	e	enum:spv::Decoration
DecorationBurstCoalesceINTEL	spirv.hpp	/^    DecorationBurstCoalesceINTEL = 5899,$/;"	e	enum:spv::Decoration
DecorationCPacked	spirv.hpp	/^    DecorationCPacked = 10,$/;"	e	enum:spv::Decoration
DecorationCacheSizeINTEL	spirv.hpp	/^    DecorationCacheSizeINTEL = 5900,$/;"	e	enum:spv::Decoration
DecorationCentroid	spirv.hpp	/^    DecorationCentroid = 16,$/;"	e	enum:spv::Decoration
DecorationClobberINTEL	spirv.hpp	/^    DecorationClobberINTEL = 5607,$/;"	e	enum:spv::Decoration
DecorationCoherent	spirv.hpp	/^    DecorationCoherent = 23,$/;"	e	enum:spv::Decoration
DecorationColMajor	spirv.hpp	/^    DecorationColMajor = 5,$/;"	e	enum:spv::Decoration
DecorationComponent	spirv.hpp	/^    DecorationComponent = 31,$/;"	e	enum:spv::Decoration
DecorationConstant	spirv.hpp	/^    DecorationConstant = 22,$/;"	e	enum:spv::Decoration
DecorationCounterBuffer	spirv.hpp	/^    DecorationCounterBuffer = 5634,$/;"	e	enum:spv::Decoration
DecorationDescriptorSet	spirv.hpp	/^    DecorationDescriptorSet = 34,$/;"	e	enum:spv::Decoration
DecorationDontStaticallyCoalesceINTEL	spirv.hpp	/^    DecorationDontStaticallyCoalesceINTEL = 5901,$/;"	e	enum:spv::Decoration
DecorationDoublepumpINTEL	spirv.hpp	/^    DecorationDoublepumpINTEL = 5831,$/;"	e	enum:spv::Decoration
DecorationExplicitInterpAMD	spirv.hpp	/^    DecorationExplicitInterpAMD = 4999,$/;"	e	enum:spv::Decoration
DecorationFPFastMathMode	spirv.hpp	/^    DecorationFPFastMathMode = 40,$/;"	e	enum:spv::Decoration
DecorationFPRoundingMode	spirv.hpp	/^    DecorationFPRoundingMode = 39,$/;"	e	enum:spv::Decoration
DecorationFlat	spirv.hpp	/^    DecorationFlat = 14,$/;"	e	enum:spv::Decoration
DecorationForcePow2DepthINTEL	spirv.hpp	/^    DecorationForcePow2DepthINTEL = 5836,$/;"	e	enum:spv::Decoration
DecorationFuncParamAttr	spirv.hpp	/^    DecorationFuncParamAttr = 38,$/;"	e	enum:spv::Decoration
DecorationFuncParamIOKindINTEL	spirv.hpp	/^    DecorationFuncParamIOKindINTEL = 5625,$/;"	e	enum:spv::Decoration
DecorationFunctionDenormModeINTEL	spirv.hpp	/^    DecorationFunctionDenormModeINTEL = 5823,$/;"	e	enum:spv::Decoration
DecorationFunctionFloatingPointModeINTEL	spirv.hpp	/^    DecorationFunctionFloatingPointModeINTEL = 6080,$/;"	e	enum:spv::Decoration
DecorationFunctionRoundingModeINTEL	spirv.hpp	/^    DecorationFunctionRoundingModeINTEL = 5822,$/;"	e	enum:spv::Decoration
DecorationFuseLoopsInFunctionINTEL	spirv.hpp	/^    DecorationFuseLoopsInFunctionINTEL = 5907,$/;"	e	enum:spv::Decoration
DecorationGLSLPacked	spirv.hpp	/^    DecorationGLSLPacked = 9,$/;"	e	enum:spv::Decoration
DecorationGLSLShared	spirv.hpp	/^    DecorationGLSLShared = 8,$/;"	e	enum:spv::Decoration
DecorationGlobalVariableOffsetINTEL	spirv.hpp	/^    DecorationGlobalVariableOffsetINTEL = 5628,$/;"	e	enum:spv::Decoration
DecorationHlslCounterBufferGOOGLE	spirv.hpp	/^    DecorationHlslCounterBufferGOOGLE = 5634,$/;"	e	enum:spv::Decoration
DecorationHlslSemanticGOOGLE	spirv.hpp	/^    DecorationHlslSemanticGOOGLE = 5635,$/;"	e	enum:spv::Decoration
DecorationIOPipeStorageINTEL	spirv.hpp	/^    DecorationIOPipeStorageINTEL = 5944,$/;"	e	enum:spv::Decoration
DecorationIndex	spirv.hpp	/^    DecorationIndex = 32,$/;"	e	enum:spv::Decoration
DecorationInputAttachmentIndex	spirv.hpp	/^    DecorationInputAttachmentIndex = 43,$/;"	e	enum:spv::Decoration
DecorationInvariant	spirv.hpp	/^    DecorationInvariant = 18,$/;"	e	enum:spv::Decoration
DecorationLinkageAttributes	spirv.hpp	/^    DecorationLinkageAttributes = 41,$/;"	e	enum:spv::Decoration
DecorationLocation	spirv.hpp	/^    DecorationLocation = 30,$/;"	e	enum:spv::Decoration
DecorationMatrixStride	spirv.hpp	/^    DecorationMatrixStride = 7,$/;"	e	enum:spv::Decoration
DecorationMax	spirv.hpp	/^    DecorationMax = 0x7fffffff,$/;"	e	enum:spv::Decoration
DecorationMaxByteOffset	spirv.hpp	/^    DecorationMaxByteOffset = 45,$/;"	e	enum:spv::Decoration
DecorationMaxByteOffsetId	spirv.hpp	/^    DecorationMaxByteOffsetId = 47,$/;"	e	enum:spv::Decoration
DecorationMaxPrivateCopiesINTEL	spirv.hpp	/^    DecorationMaxPrivateCopiesINTEL = 5829,$/;"	e	enum:spv::Decoration
DecorationMaxReplicatesINTEL	spirv.hpp	/^    DecorationMaxReplicatesINTEL = 5832,$/;"	e	enum:spv::Decoration
DecorationMediaBlockIOINTEL	spirv.hpp	/^    DecorationMediaBlockIOINTEL = 6140,$/;"	e	enum:spv::Decoration
DecorationMemoryINTEL	spirv.hpp	/^    DecorationMemoryINTEL = 5826,$/;"	e	enum:spv::Decoration
DecorationMergeINTEL	spirv.hpp	/^    DecorationMergeINTEL = 5834,$/;"	e	enum:spv::Decoration
DecorationNoContraction	spirv.hpp	/^    DecorationNoContraction = 42,$/;"	e	enum:spv::Decoration
DecorationNoPerspective	spirv.hpp	/^    DecorationNoPerspective = 13,$/;"	e	enum:spv::Decoration
DecorationNoSignedWrap	spirv.hpp	/^    DecorationNoSignedWrap = 4469,$/;"	e	enum:spv::Decoration
DecorationNoUnsignedWrap	spirv.hpp	/^    DecorationNoUnsignedWrap = 4470,$/;"	e	enum:spv::Decoration
DecorationNonReadable	spirv.hpp	/^    DecorationNonReadable = 25,$/;"	e	enum:spv::Decoration
DecorationNonUniform	spirv.hpp	/^    DecorationNonUniform = 5300,$/;"	e	enum:spv::Decoration
DecorationNonUniformEXT	spirv.hpp	/^    DecorationNonUniformEXT = 5300,$/;"	e	enum:spv::Decoration
DecorationNonWritable	spirv.hpp	/^    DecorationNonWritable = 24,$/;"	e	enum:spv::Decoration
DecorationNumbanksINTEL	spirv.hpp	/^    DecorationNumbanksINTEL = 5827,$/;"	e	enum:spv::Decoration
DecorationOffset	spirv.hpp	/^    DecorationOffset = 35,$/;"	e	enum:spv::Decoration
DecorationOverrideCoverageNV	spirv.hpp	/^    DecorationOverrideCoverageNV = 5248,$/;"	e	enum:spv::Decoration
DecorationPassthroughNV	spirv.hpp	/^    DecorationPassthroughNV = 5250,$/;"	e	enum:spv::Decoration
DecorationPatch	spirv.hpp	/^    DecorationPatch = 15,$/;"	e	enum:spv::Decoration
DecorationPerPrimitiveNV	spirv.hpp	/^    DecorationPerPrimitiveNV = 5271,$/;"	e	enum:spv::Decoration
DecorationPerTaskNV	spirv.hpp	/^    DecorationPerTaskNV = 5273,$/;"	e	enum:spv::Decoration
DecorationPerVertexKHR	spirv.hpp	/^    DecorationPerVertexKHR = 5285,$/;"	e	enum:spv::Decoration
DecorationPerVertexNV	spirv.hpp	/^    DecorationPerVertexNV = 5285,$/;"	e	enum:spv::Decoration
DecorationPerViewNV	spirv.hpp	/^    DecorationPerViewNV = 5272,$/;"	e	enum:spv::Decoration
DecorationPrefetchINTEL	spirv.hpp	/^    DecorationPrefetchINTEL = 5902,$/;"	e	enum:spv::Decoration
DecorationReferencedIndirectlyINTEL	spirv.hpp	/^    DecorationReferencedIndirectlyINTEL = 5602,$/;"	e	enum:spv::Decoration
DecorationRegisterINTEL	spirv.hpp	/^    DecorationRegisterINTEL = 5825,$/;"	e	enum:spv::Decoration
DecorationRelaxedPrecision	spirv.hpp	/^    DecorationRelaxedPrecision = 0,$/;"	e	enum:spv::Decoration
DecorationRestrict	spirv.hpp	/^    DecorationRestrict = 19,$/;"	e	enum:spv::Decoration
DecorationRestrictPointer	spirv.hpp	/^    DecorationRestrictPointer = 5355,$/;"	e	enum:spv::Decoration
DecorationRestrictPointerEXT	spirv.hpp	/^    DecorationRestrictPointerEXT = 5355,$/;"	e	enum:spv::Decoration
DecorationRowMajor	spirv.hpp	/^    DecorationRowMajor = 4,$/;"	e	enum:spv::Decoration
DecorationSIMTCallINTEL	spirv.hpp	/^    DecorationSIMTCallINTEL = 5599,$/;"	e	enum:spv::Decoration
DecorationSample	spirv.hpp	/^    DecorationSample = 17,$/;"	e	enum:spv::Decoration
DecorationSaturatedConversion	spirv.hpp	/^    DecorationSaturatedConversion = 28,$/;"	e	enum:spv::Decoration
DecorationSecondaryViewportRelativeNV	spirv.hpp	/^    DecorationSecondaryViewportRelativeNV = 5256,$/;"	e	enum:spv::Decoration
DecorationSideEffectsINTEL	spirv.hpp	/^    DecorationSideEffectsINTEL = 5608,$/;"	e	enum:spv::Decoration
DecorationSimpleDualPortINTEL	spirv.hpp	/^    DecorationSimpleDualPortINTEL = 5833,$/;"	e	enum:spv::Decoration
DecorationSingleElementVectorINTEL	spirv.hpp	/^    DecorationSingleElementVectorINTEL = 6085,$/;"	e	enum:spv::Decoration
DecorationSinglepumpINTEL	spirv.hpp	/^    DecorationSinglepumpINTEL = 5830,$/;"	e	enum:spv::Decoration
DecorationSpecId	spirv.hpp	/^    DecorationSpecId = 1,$/;"	e	enum:spv::Decoration
DecorationStackCallINTEL	spirv.hpp	/^    DecorationStackCallINTEL = 5627,$/;"	e	enum:spv::Decoration
DecorationStallEnableINTEL	spirv.hpp	/^    DecorationStallEnableINTEL = 5905,$/;"	e	enum:spv::Decoration
DecorationStream	spirv.hpp	/^    DecorationStream = 29,$/;"	e	enum:spv::Decoration
DecorationUniform	spirv.hpp	/^    DecorationUniform = 26,$/;"	e	enum:spv::Decoration
DecorationUniformId	spirv.hpp	/^    DecorationUniformId = 27,$/;"	e	enum:spv::Decoration
DecorationUserSemantic	spirv.hpp	/^    DecorationUserSemantic = 5635,$/;"	e	enum:spv::Decoration
DecorationUserTypeGOOGLE	spirv.hpp	/^    DecorationUserTypeGOOGLE = 5636,$/;"	e	enum:spv::Decoration
DecorationVectorComputeCallableFunctionINTEL	spirv.hpp	/^    DecorationVectorComputeCallableFunctionINTEL = 6087,$/;"	e	enum:spv::Decoration
DecorationVectorComputeFunctionINTEL	spirv.hpp	/^    DecorationVectorComputeFunctionINTEL = 5626,$/;"	e	enum:spv::Decoration
DecorationVectorComputeVariableINTEL	spirv.hpp	/^    DecorationVectorComputeVariableINTEL = 5624,$/;"	e	enum:spv::Decoration
DecorationViewportRelativeNV	spirv.hpp	/^    DecorationViewportRelativeNV = 5252,$/;"	e	enum:spv::Decoration
DecorationVolatile	spirv.hpp	/^    DecorationVolatile = 21,$/;"	e	enum:spv::Decoration
DecorationXfbBuffer	spirv.hpp	/^    DecorationXfbBuffer = 36,$/;"	e	enum:spv::Decoration
DecorationXfbStride	spirv.hpp	/^    DecorationXfbStride = 37,$/;"	e	enum:spv::Decoration
Dim	spirv.hpp	/^enum Dim {$/;"	g	namespace:spv
Dim1D	spirv.hpp	/^    Dim1D = 0,$/;"	e	enum:spv::Dim
Dim2D	spirv.hpp	/^    Dim2D = 1,$/;"	e	enum:spv::Dim
Dim3D	spirv.hpp	/^    Dim3D = 2,$/;"	e	enum:spv::Dim
DimBuffer	spirv.hpp	/^    DimBuffer = 5,$/;"	e	enum:spv::Dim
DimCube	spirv.hpp	/^    DimCube = 3,$/;"	e	enum:spv::Dim
DimMax	spirv.hpp	/^    DimMax = 0x7fffffff,$/;"	e	enum:spv::Dim
DimRect	spirv.hpp	/^    DimRect = 4,$/;"	e	enum:spv::Dim
DimSubpassData	spirv.hpp	/^    DimSubpassData = 6,$/;"	e	enum:spv::Dim
Direct	spirv_common.hpp	/^		Direct, \/\/ Emit next block directly without a particular condition.$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
DoWhileLoop	spirv_common.hpp	/^		DoWhileLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::ContinueBlockType
DominatorBuilder	spirv_cfg.cpp	/^DominatorBuilder::DominatorBuilder(const CFG &cfg_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
DominatorBuilder	spirv_cfg.hpp	/^class DominatorBuilder$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
DontCare	spirv_glsl.hpp	/^			DontCare,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::Precision
Double	spirv_common.hpp	/^		Double,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
DummySamplerForCombinedImageHandler	spirv_cross.hpp	/^		DummySamplerForCombinedImageHandler(Compiler &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::DummySamplerForCombinedImageHandler
DummySamplerForCombinedImageHandler	spirv_cross.hpp	/^	struct DummySamplerForCombinedImageHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
EXTRA_SUB_EXPRESSION_TYPE_AUX	spirv_glsl.cpp	/^	EXTRA_SUB_EXPRESSION_TYPE_AUX = 0x20000000$/;"	e	enum:ExtraSubExpressionType	file:
EXTRA_SUB_EXPRESSION_TYPE_STREAM_OFFSET	spirv_glsl.cpp	/^	EXTRA_SUB_EXPRESSION_TYPE_STREAM_OFFSET = 0x10000000,$/;"	e	enum:ExtraSubExpressionType	file:
EmbeddedInstruction	spirv_common.hpp	/^struct EmbeddedInstruction : Instruction$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
EntryLine	spirv_common.hpp	/^	struct EntryLine$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
EntryPoint	spirv_cross.hpp	/^struct EntryPoint$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
ExecutionMode	spirv.hpp	/^enum ExecutionMode {$/;"	g	namespace:spv
ExecutionModeContractionOff	spirv.hpp	/^    ExecutionModeContractionOff = 31,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDenormFlushToZero	spirv.hpp	/^    ExecutionModeDenormFlushToZero = 4460,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDenormPreserve	spirv.hpp	/^    ExecutionModeDenormPreserve = 4459,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthGreater	spirv.hpp	/^    ExecutionModeDepthGreater = 14,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthLess	spirv.hpp	/^    ExecutionModeDepthLess = 15,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthReplacing	spirv.hpp	/^    ExecutionModeDepthReplacing = 12,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDepthUnchanged	spirv.hpp	/^    ExecutionModeDepthUnchanged = 16,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDerivativeGroupLinearNV	spirv.hpp	/^    ExecutionModeDerivativeGroupLinearNV = 5290,$/;"	e	enum:spv::ExecutionMode
ExecutionModeDerivativeGroupQuadsNV	spirv.hpp	/^    ExecutionModeDerivativeGroupQuadsNV = 5289,$/;"	e	enum:spv::ExecutionMode
ExecutionModeEarlyFragmentTests	spirv.hpp	/^    ExecutionModeEarlyFragmentTests = 9,$/;"	e	enum:spv::ExecutionMode
ExecutionModeFinalizer	spirv.hpp	/^    ExecutionModeFinalizer = 34,$/;"	e	enum:spv::ExecutionMode
ExecutionModeFloatingPointModeALTINTEL	spirv.hpp	/^    ExecutionModeFloatingPointModeALTINTEL = 5622,$/;"	e	enum:spv::ExecutionMode
ExecutionModeFloatingPointModeIEEEINTEL	spirv.hpp	/^    ExecutionModeFloatingPointModeIEEEINTEL = 5623,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInitializer	spirv.hpp	/^    ExecutionModeInitializer = 33,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputLines	spirv.hpp	/^    ExecutionModeInputLines = 20,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputLinesAdjacency	spirv.hpp	/^    ExecutionModeInputLinesAdjacency = 21,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputPoints	spirv.hpp	/^    ExecutionModeInputPoints = 19,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInputTrianglesAdjacency	spirv.hpp	/^    ExecutionModeInputTrianglesAdjacency = 23,$/;"	e	enum:spv::ExecutionMode
ExecutionModeInvocations	spirv.hpp	/^    ExecutionModeInvocations = 0,$/;"	e	enum:spv::ExecutionMode
ExecutionModeIsolines	spirv.hpp	/^    ExecutionModeIsolines = 25,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSize	spirv.hpp	/^    ExecutionModeLocalSize = 17,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSizeHint	spirv.hpp	/^    ExecutionModeLocalSizeHint = 18,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSizeHintId	spirv.hpp	/^    ExecutionModeLocalSizeHintId = 39,$/;"	e	enum:spv::ExecutionMode
ExecutionModeLocalSizeId	spirv.hpp	/^    ExecutionModeLocalSizeId = 38,$/;"	e	enum:spv::ExecutionMode
ExecutionModeMax	spirv.hpp	/^    ExecutionModeMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionMode
ExecutionModeMaxWorkDimINTEL	spirv.hpp	/^    ExecutionModeMaxWorkDimINTEL = 5894,$/;"	e	enum:spv::ExecutionMode
ExecutionModeMaxWorkgroupSizeINTEL	spirv.hpp	/^    ExecutionModeMaxWorkgroupSizeINTEL = 5893,$/;"	e	enum:spv::ExecutionMode
ExecutionModeNoGlobalOffsetINTEL	spirv.hpp	/^    ExecutionModeNoGlobalOffsetINTEL = 5895,$/;"	e	enum:spv::ExecutionMode
ExecutionModeNumSIMDWorkitemsINTEL	spirv.hpp	/^    ExecutionModeNumSIMDWorkitemsINTEL = 5896,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOriginLowerLeft	spirv.hpp	/^    ExecutionModeOriginLowerLeft = 8,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOriginUpperLeft	spirv.hpp	/^    ExecutionModeOriginUpperLeft = 7,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputLineStrip	spirv.hpp	/^    ExecutionModeOutputLineStrip = 28,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputLinesNV	spirv.hpp	/^    ExecutionModeOutputLinesNV = 5269,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputPoints	spirv.hpp	/^    ExecutionModeOutputPoints = 27,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputPrimitivesNV	spirv.hpp	/^    ExecutionModeOutputPrimitivesNV = 5270,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputTriangleStrip	spirv.hpp	/^    ExecutionModeOutputTriangleStrip = 29,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputTrianglesNV	spirv.hpp	/^    ExecutionModeOutputTrianglesNV = 5298,$/;"	e	enum:spv::ExecutionMode
ExecutionModeOutputVertices	spirv.hpp	/^    ExecutionModeOutputVertices = 26,$/;"	e	enum:spv::ExecutionMode
ExecutionModePixelCenterInteger	spirv.hpp	/^    ExecutionModePixelCenterInteger = 6,$/;"	e	enum:spv::ExecutionMode
ExecutionModePixelInterlockOrderedEXT	spirv.hpp	/^    ExecutionModePixelInterlockOrderedEXT = 5366,$/;"	e	enum:spv::ExecutionMode
ExecutionModePixelInterlockUnorderedEXT	spirv.hpp	/^    ExecutionModePixelInterlockUnorderedEXT = 5367,$/;"	e	enum:spv::ExecutionMode
ExecutionModePointMode	spirv.hpp	/^    ExecutionModePointMode = 10,$/;"	e	enum:spv::ExecutionMode
ExecutionModePostDepthCoverage	spirv.hpp	/^    ExecutionModePostDepthCoverage = 4446,$/;"	e	enum:spv::ExecutionMode
ExecutionModeQuads	spirv.hpp	/^    ExecutionModeQuads = 24,$/;"	e	enum:spv::ExecutionMode
ExecutionModeRoundingModeRTE	spirv.hpp	/^    ExecutionModeRoundingModeRTE = 4462,$/;"	e	enum:spv::ExecutionMode
ExecutionModeRoundingModeRTNINTEL	spirv.hpp	/^    ExecutionModeRoundingModeRTNINTEL = 5621,$/;"	e	enum:spv::ExecutionMode
ExecutionModeRoundingModeRTPINTEL	spirv.hpp	/^    ExecutionModeRoundingModeRTPINTEL = 5620,$/;"	e	enum:spv::ExecutionMode
ExecutionModeRoundingModeRTZ	spirv.hpp	/^    ExecutionModeRoundingModeRTZ = 4463,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSampleInterlockOrderedEXT	spirv.hpp	/^    ExecutionModeSampleInterlockOrderedEXT = 5368,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSampleInterlockUnorderedEXT	spirv.hpp	/^    ExecutionModeSampleInterlockUnorderedEXT = 5369,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSchedulerTargetFmaxMhzINTEL	spirv.hpp	/^    ExecutionModeSchedulerTargetFmaxMhzINTEL = 5903,$/;"	e	enum:spv::ExecutionMode
ExecutionModeShadingRateInterlockOrderedEXT	spirv.hpp	/^    ExecutionModeShadingRateInterlockOrderedEXT = 5370,$/;"	e	enum:spv::ExecutionMode
ExecutionModeShadingRateInterlockUnorderedEXT	spirv.hpp	/^    ExecutionModeShadingRateInterlockUnorderedEXT = 5371,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSharedLocalMemorySizeINTEL	spirv.hpp	/^    ExecutionModeSharedLocalMemorySizeINTEL = 5618,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSignedZeroInfNanPreserve	spirv.hpp	/^    ExecutionModeSignedZeroInfNanPreserve = 4461,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingEqual	spirv.hpp	/^    ExecutionModeSpacingEqual = 1,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingFractionalEven	spirv.hpp	/^    ExecutionModeSpacingFractionalEven = 2,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSpacingFractionalOdd	spirv.hpp	/^    ExecutionModeSpacingFractionalOdd = 3,$/;"	e	enum:spv::ExecutionMode
ExecutionModeStencilRefReplacingEXT	spirv.hpp	/^    ExecutionModeStencilRefReplacingEXT = 5027,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupSize	spirv.hpp	/^    ExecutionModeSubgroupSize = 35,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupUniformControlFlowKHR	spirv.hpp	/^    ExecutionModeSubgroupUniformControlFlowKHR = 4421,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupsPerWorkgroup	spirv.hpp	/^    ExecutionModeSubgroupsPerWorkgroup = 36,$/;"	e	enum:spv::ExecutionMode
ExecutionModeSubgroupsPerWorkgroupId	spirv.hpp	/^    ExecutionModeSubgroupsPerWorkgroupId = 37,$/;"	e	enum:spv::ExecutionMode
ExecutionModeTriangles	spirv.hpp	/^    ExecutionModeTriangles = 22,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVecTypeHint	spirv.hpp	/^    ExecutionModeVecTypeHint = 30,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVertexOrderCcw	spirv.hpp	/^    ExecutionModeVertexOrderCcw = 5,$/;"	e	enum:spv::ExecutionMode
ExecutionModeVertexOrderCw	spirv.hpp	/^    ExecutionModeVertexOrderCw = 4,$/;"	e	enum:spv::ExecutionMode
ExecutionModeXfb	spirv.hpp	/^    ExecutionModeXfb = 11,$/;"	e	enum:spv::ExecutionMode
ExecutionModel	spirv.hpp	/^enum ExecutionModel {$/;"	g	namespace:spv
ExecutionModelAnyHitKHR	spirv.hpp	/^    ExecutionModelAnyHitKHR = 5315,$/;"	e	enum:spv::ExecutionModel
ExecutionModelAnyHitNV	spirv.hpp	/^    ExecutionModelAnyHitNV = 5315,$/;"	e	enum:spv::ExecutionModel
ExecutionModelCallableKHR	spirv.hpp	/^    ExecutionModelCallableKHR = 5318,$/;"	e	enum:spv::ExecutionModel
ExecutionModelCallableNV	spirv.hpp	/^    ExecutionModelCallableNV = 5318,$/;"	e	enum:spv::ExecutionModel
ExecutionModelClosestHitKHR	spirv.hpp	/^    ExecutionModelClosestHitKHR = 5316,$/;"	e	enum:spv::ExecutionModel
ExecutionModelClosestHitNV	spirv.hpp	/^    ExecutionModelClosestHitNV = 5316,$/;"	e	enum:spv::ExecutionModel
ExecutionModelFragment	spirv.hpp	/^    ExecutionModelFragment = 4,$/;"	e	enum:spv::ExecutionModel
ExecutionModelGLCompute	spirv.hpp	/^    ExecutionModelGLCompute = 5,$/;"	e	enum:spv::ExecutionModel
ExecutionModelGeometry	spirv.hpp	/^    ExecutionModelGeometry = 3,$/;"	e	enum:spv::ExecutionModel
ExecutionModelIntersectionKHR	spirv.hpp	/^    ExecutionModelIntersectionKHR = 5314,$/;"	e	enum:spv::ExecutionModel
ExecutionModelIntersectionNV	spirv.hpp	/^    ExecutionModelIntersectionNV = 5314,$/;"	e	enum:spv::ExecutionModel
ExecutionModelKernel	spirv.hpp	/^    ExecutionModelKernel = 6,$/;"	e	enum:spv::ExecutionModel
ExecutionModelMax	spirv.hpp	/^    ExecutionModelMax = 0x7fffffff,$/;"	e	enum:spv::ExecutionModel
ExecutionModelMeshNV	spirv.hpp	/^    ExecutionModelMeshNV = 5268,$/;"	e	enum:spv::ExecutionModel
ExecutionModelMissKHR	spirv.hpp	/^    ExecutionModelMissKHR = 5317,$/;"	e	enum:spv::ExecutionModel
ExecutionModelMissNV	spirv.hpp	/^    ExecutionModelMissNV = 5317,$/;"	e	enum:spv::ExecutionModel
ExecutionModelRayGenerationKHR	spirv.hpp	/^    ExecutionModelRayGenerationKHR = 5313,$/;"	e	enum:spv::ExecutionModel
ExecutionModelRayGenerationNV	spirv.hpp	/^    ExecutionModelRayGenerationNV = 5313,$/;"	e	enum:spv::ExecutionModel
ExecutionModelTaskNV	spirv.hpp	/^    ExecutionModelTaskNV = 5267,$/;"	e	enum:spv::ExecutionModel
ExecutionModelTessellationControl	spirv.hpp	/^    ExecutionModelTessellationControl = 1,$/;"	e	enum:spv::ExecutionModel
ExecutionModelTessellationEvaluation	spirv.hpp	/^    ExecutionModelTessellationEvaluation = 2,$/;"	e	enum:spv::ExecutionModel
ExecutionModelVertex	spirv.hpp	/^    ExecutionModelVertex = 0,$/;"	e	enum:spv::ExecutionModel
Extended	spirv_common.hpp	/^			Extended()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration::Extended
Extended	spirv_common.hpp	/^		struct Extended$/;"	s	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
ExtendedDecorations	spirv_common.hpp	/^enum ExtendedDecorations$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
Extension	spirv_common.hpp	/^	enum Extension$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRExtension
ExtraSubExpressionType	spirv_glsl.cpp	/^enum ExtraSubExpressionType$/;"	g	file:
FPDenormMode	spirv.hpp	/^enum FPDenormMode {$/;"	g	namespace:spv
FPDenormModeFlushToZero	spirv.hpp	/^    FPDenormModeFlushToZero = 1,$/;"	e	enum:spv::FPDenormMode
FPDenormModeMax	spirv.hpp	/^    FPDenormModeMax = 0x7fffffff,$/;"	e	enum:spv::FPDenormMode
FPDenormModePreserve	spirv.hpp	/^    FPDenormModePreserve = 0,$/;"	e	enum:spv::FPDenormMode
FPFastMathModeAllowContractFastINTELMask	spirv.hpp	/^    FPFastMathModeAllowContractFastINTELMask = 0x00010000,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeAllowContractFastINTELShift	spirv.hpp	/^    FPFastMathModeAllowContractFastINTELShift = 16,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeAllowReassocINTELMask	spirv.hpp	/^    FPFastMathModeAllowReassocINTELMask = 0x00020000,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeAllowReassocINTELShift	spirv.hpp	/^    FPFastMathModeAllowReassocINTELShift = 17,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeAllowRecipMask	spirv.hpp	/^    FPFastMathModeAllowRecipMask = 0x00000008,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeAllowRecipShift	spirv.hpp	/^    FPFastMathModeAllowRecipShift = 3,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeFastMask	spirv.hpp	/^    FPFastMathModeFastMask = 0x00000010,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeFastShift	spirv.hpp	/^    FPFastMathModeFastShift = 4,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeMask	spirv.hpp	/^enum FPFastMathModeMask {$/;"	g	namespace:spv
FPFastMathModeMaskNone	spirv.hpp	/^    FPFastMathModeMaskNone = 0,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeMax	spirv.hpp	/^    FPFastMathModeMax = 0x7fffffff,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNSZMask	spirv.hpp	/^    FPFastMathModeNSZMask = 0x00000004,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNSZShift	spirv.hpp	/^    FPFastMathModeNSZShift = 2,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNotInfMask	spirv.hpp	/^    FPFastMathModeNotInfMask = 0x00000002,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNotInfShift	spirv.hpp	/^    FPFastMathModeNotInfShift = 1,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeNotNaNMask	spirv.hpp	/^    FPFastMathModeNotNaNMask = 0x00000001,$/;"	e	enum:spv::FPFastMathModeMask
FPFastMathModeNotNaNShift	spirv.hpp	/^    FPFastMathModeNotNaNShift = 0,$/;"	e	enum:spv::FPFastMathModeShift
FPFastMathModeShift	spirv.hpp	/^enum FPFastMathModeShift {$/;"	g	namespace:spv
FPOperationMode	spirv.hpp	/^enum FPOperationMode {$/;"	g	namespace:spv
FPOperationModeALT	spirv.hpp	/^    FPOperationModeALT = 1,$/;"	e	enum:spv::FPOperationMode
FPOperationModeIEEE	spirv.hpp	/^    FPOperationModeIEEE = 0,$/;"	e	enum:spv::FPOperationMode
FPOperationModeMax	spirv.hpp	/^    FPOperationModeMax = 0x7fffffff,$/;"	e	enum:spv::FPOperationMode
FPRoundingMode	spirv.hpp	/^enum FPRoundingMode {$/;"	g	namespace:spv
FPRoundingModeMax	spirv.hpp	/^    FPRoundingModeMax = 0x7fffffff,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTE	spirv.hpp	/^    FPRoundingModeRTE = 0,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTN	spirv.hpp	/^    FPRoundingModeRTN = 3,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTP	spirv.hpp	/^    FPRoundingModeRTP = 2,$/;"	e	enum:spv::FPRoundingMode
FPRoundingModeRTZ	spirv.hpp	/^    FPRoundingModeRTZ = 1,$/;"	e	enum:spv::FPRoundingMode
Feature	spirv_glsl.hpp	/^		enum Feature$/;"	g	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper
FeatureCount	spirv_glsl.hpp	/^			FeatureCount$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
FeatureCount	spirv_glsl.hpp	/^		static_assert(sizeof(FeatureMask) * 8u >= FeatureCount, "Mask type needs more bits.");$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper
Float	spirv_common.hpp	/^		Float,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
ForLoop	spirv_common.hpp	/^		ForLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::ContinueBlockType
FragmentOptions	spirv_glsl.hpp	/^		struct FragmentOptions$/;"	s	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
FragmentShadingRateHorizontal2PixelsMask	spirv.hpp	/^    FragmentShadingRateHorizontal2PixelsMask = 0x00000004,$/;"	e	enum:spv::FragmentShadingRateMask
FragmentShadingRateHorizontal2PixelsShift	spirv.hpp	/^    FragmentShadingRateHorizontal2PixelsShift = 2,$/;"	e	enum:spv::FragmentShadingRateShift
FragmentShadingRateHorizontal4PixelsMask	spirv.hpp	/^    FragmentShadingRateHorizontal4PixelsMask = 0x00000008,$/;"	e	enum:spv::FragmentShadingRateMask
FragmentShadingRateHorizontal4PixelsShift	spirv.hpp	/^    FragmentShadingRateHorizontal4PixelsShift = 3,$/;"	e	enum:spv::FragmentShadingRateShift
FragmentShadingRateMask	spirv.hpp	/^enum FragmentShadingRateMask {$/;"	g	namespace:spv
FragmentShadingRateMaskNone	spirv.hpp	/^    FragmentShadingRateMaskNone = 0,$/;"	e	enum:spv::FragmentShadingRateMask
FragmentShadingRateMax	spirv.hpp	/^    FragmentShadingRateMax = 0x7fffffff,$/;"	e	enum:spv::FragmentShadingRateShift
FragmentShadingRateShift	spirv.hpp	/^enum FragmentShadingRateShift {$/;"	g	namespace:spv
FragmentShadingRateVertical2PixelsMask	spirv.hpp	/^    FragmentShadingRateVertical2PixelsMask = 0x00000001,$/;"	e	enum:spv::FragmentShadingRateMask
FragmentShadingRateVertical2PixelsShift	spirv.hpp	/^    FragmentShadingRateVertical2PixelsShift = 0,$/;"	e	enum:spv::FragmentShadingRateShift
FragmentShadingRateVertical4PixelsMask	spirv.hpp	/^    FragmentShadingRateVertical4PixelsMask = 0x00000002,$/;"	e	enum:spv::FragmentShadingRateMask
FragmentShadingRateVertical4PixelsShift	spirv.hpp	/^    FragmentShadingRateVertical4PixelsShift = 1,$/;"	e	enum:spv::FragmentShadingRateShift
FunctionControlConstMask	spirv.hpp	/^    FunctionControlConstMask = 0x00000008,$/;"	e	enum:spv::FunctionControlMask
FunctionControlConstShift	spirv.hpp	/^    FunctionControlConstShift = 3,$/;"	e	enum:spv::FunctionControlShift
FunctionControlDontInlineMask	spirv.hpp	/^    FunctionControlDontInlineMask = 0x00000002,$/;"	e	enum:spv::FunctionControlMask
FunctionControlDontInlineShift	spirv.hpp	/^    FunctionControlDontInlineShift = 1,$/;"	e	enum:spv::FunctionControlShift
FunctionControlInlineMask	spirv.hpp	/^    FunctionControlInlineMask = 0x00000001,$/;"	e	enum:spv::FunctionControlMask
FunctionControlInlineShift	spirv.hpp	/^    FunctionControlInlineShift = 0,$/;"	e	enum:spv::FunctionControlShift
FunctionControlMask	spirv.hpp	/^enum FunctionControlMask {$/;"	g	namespace:spv
FunctionControlMaskNone	spirv.hpp	/^    FunctionControlMaskNone = 0,$/;"	e	enum:spv::FunctionControlMask
FunctionControlMax	spirv.hpp	/^    FunctionControlMax = 0x7fffffff,$/;"	e	enum:spv::FunctionControlShift
FunctionControlOptNoneINTELMask	spirv.hpp	/^    FunctionControlOptNoneINTELMask = 0x00010000,$/;"	e	enum:spv::FunctionControlMask
FunctionControlOptNoneINTELShift	spirv.hpp	/^    FunctionControlOptNoneINTELShift = 16,$/;"	e	enum:spv::FunctionControlShift
FunctionControlPureMask	spirv.hpp	/^    FunctionControlPureMask = 0x00000004,$/;"	e	enum:spv::FunctionControlMask
FunctionControlPureShift	spirv.hpp	/^    FunctionControlPureShift = 2,$/;"	e	enum:spv::FunctionControlShift
FunctionControlShift	spirv.hpp	/^enum FunctionControlShift {$/;"	g	namespace:spv
FunctionParameterAttribute	spirv.hpp	/^enum FunctionParameterAttribute {$/;"	g	namespace:spv
FunctionParameterAttributeByVal	spirv.hpp	/^    FunctionParameterAttributeByVal = 2,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeMax	spirv.hpp	/^    FunctionParameterAttributeMax = 0x7fffffff,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoAlias	spirv.hpp	/^    FunctionParameterAttributeNoAlias = 4,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoCapture	spirv.hpp	/^    FunctionParameterAttributeNoCapture = 5,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoReadWrite	spirv.hpp	/^    FunctionParameterAttributeNoReadWrite = 7,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeNoWrite	spirv.hpp	/^    FunctionParameterAttributeNoWrite = 6,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeSext	spirv.hpp	/^    FunctionParameterAttributeSext = 1,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeSret	spirv.hpp	/^    FunctionParameterAttributeSret = 3,$/;"	e	enum:spv::FunctionParameterAttribute
FunctionParameterAttributeZext	spirv.hpp	/^    FunctionParameterAttributeZext = 0,$/;"	e	enum:spv::FunctionParameterAttribute
GLSL	spirv_common.hpp	/^		GLSL,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
GLSL_BFOP	spirv_glsl.cpp	10524;"	d	file:
GLSL_BFOP	spirv_glsl.cpp	10527;"	d	file:
GLSL_BFOP_CAST	spirv_glsl.cpp	10525;"	d	file:
GLSL_BOP	spirv_glsl.cpp	10518;"	d	file:
GLSL_BOP	spirv_glsl.cpp	4848;"	d	file:
GLSL_BOP	spirv_glsl.cpp	5003;"	d	file:
GLSL_BOP_CAST	spirv_glsl.cpp	10519;"	d	file:
GLSL_GROUP_OP	spirv_glsl.cpp	8216;"	d	file:
GLSL_GROUP_OP	spirv_glsl.cpp	8266;"	d	file:
GLSL_GROUP_OP_CAST	spirv_glsl.cpp	8233;"	d	file:
GLSL_GROUP_OP_CAST	spirv_glsl.cpp	8267;"	d	file:
GLSL_QFOP	spirv_glsl.cpp	10522;"	d	file:
GLSL_RAY_QUERY_GET_OP	spirv_glsl.cpp	13164;"	d	file:
GLSL_RAY_QUERY_GET_OP	spirv_glsl.cpp	13192;"	d	file:
GLSL_RAY_QUERY_GET_OP2	spirv_glsl.cpp	13169;"	d	file:
GLSL_RAY_QUERY_GET_OP2	spirv_glsl.cpp	13193;"	d	file:
GLSL_TFOP	spirv_glsl.cpp	10523;"	d	file:
GLSL_UFOP	spirv_glsl.cpp	10528;"	d	file:
GLSL_UOP	spirv_glsl.cpp	10521;"	d	file:
GLSL_UOP	spirv_glsl.cpp	4854;"	d	file:
GLSL_UOP	spirv_glsl.cpp	5004;"	d	file:
GLSLstd450	GLSL.std.450.h	/^enum GLSLstd450 {$/;"	g
GLSLstd450Acos	GLSL.std.450.h	/^    GLSLstd450Acos = 17,$/;"	e	enum:GLSLstd450
GLSLstd450Acosh	GLSL.std.450.h	/^    GLSLstd450Acosh = 23,$/;"	e	enum:GLSLstd450
GLSLstd450Asin	GLSL.std.450.h	/^    GLSLstd450Asin = 16,$/;"	e	enum:GLSLstd450
GLSLstd450Asinh	GLSL.std.450.h	/^    GLSLstd450Asinh = 22,$/;"	e	enum:GLSLstd450
GLSLstd450Atan	GLSL.std.450.h	/^    GLSLstd450Atan = 18,$/;"	e	enum:GLSLstd450
GLSLstd450Atan2	GLSL.std.450.h	/^    GLSLstd450Atan2 = 25,$/;"	e	enum:GLSLstd450
GLSLstd450Atanh	GLSL.std.450.h	/^    GLSLstd450Atanh = 24,$/;"	e	enum:GLSLstd450
GLSLstd450Bad	GLSL.std.450.h	/^    GLSLstd450Bad = 0,              \/\/ Don't use$/;"	e	enum:GLSLstd450
GLSLstd450Ceil	GLSL.std.450.h	/^    GLSLstd450Ceil = 9,$/;"	e	enum:GLSLstd450
GLSLstd450Cos	GLSL.std.450.h	/^    GLSLstd450Cos = 14,$/;"	e	enum:GLSLstd450
GLSLstd450Cosh	GLSL.std.450.h	/^    GLSLstd450Cosh = 20,$/;"	e	enum:GLSLstd450
GLSLstd450Count	GLSL.std.450.h	/^    GLSLstd450Count$/;"	e	enum:GLSLstd450
GLSLstd450Cross	GLSL.std.450.h	/^    GLSLstd450Cross = 68,$/;"	e	enum:GLSLstd450
GLSLstd450Degrees	GLSL.std.450.h	/^    GLSLstd450Degrees = 12,$/;"	e	enum:GLSLstd450
GLSLstd450Determinant	GLSL.std.450.h	/^    GLSLstd450Determinant = 33,$/;"	e	enum:GLSLstd450
GLSLstd450Distance	GLSL.std.450.h	/^    GLSLstd450Distance = 67,$/;"	e	enum:GLSLstd450
GLSLstd450Exp	GLSL.std.450.h	/^    GLSLstd450Exp = 27,$/;"	e	enum:GLSLstd450
GLSLstd450Exp2	GLSL.std.450.h	/^    GLSLstd450Exp2 = 29,$/;"	e	enum:GLSLstd450
GLSLstd450FAbs	GLSL.std.450.h	/^    GLSLstd450FAbs = 4,$/;"	e	enum:GLSLstd450
GLSLstd450FClamp	GLSL.std.450.h	/^    GLSLstd450FClamp = 43,$/;"	e	enum:GLSLstd450
GLSLstd450FMax	GLSL.std.450.h	/^    GLSLstd450FMax = 40,$/;"	e	enum:GLSLstd450
GLSLstd450FMin	GLSL.std.450.h	/^    GLSLstd450FMin = 37,$/;"	e	enum:GLSLstd450
GLSLstd450FMix	GLSL.std.450.h	/^    GLSLstd450FMix = 46,$/;"	e	enum:GLSLstd450
GLSLstd450FSign	GLSL.std.450.h	/^    GLSLstd450FSign = 6,$/;"	e	enum:GLSLstd450
GLSLstd450FaceForward	GLSL.std.450.h	/^    GLSLstd450FaceForward = 70,$/;"	e	enum:GLSLstd450
GLSLstd450FindILsb	GLSL.std.450.h	/^    GLSLstd450FindILsb = 73,$/;"	e	enum:GLSLstd450
GLSLstd450FindSMsb	GLSL.std.450.h	/^    GLSLstd450FindSMsb = 74,$/;"	e	enum:GLSLstd450
GLSLstd450FindUMsb	GLSL.std.450.h	/^    GLSLstd450FindUMsb = 75,$/;"	e	enum:GLSLstd450
GLSLstd450Floor	GLSL.std.450.h	/^    GLSLstd450Floor = 8,$/;"	e	enum:GLSLstd450
GLSLstd450Fma	GLSL.std.450.h	/^    GLSLstd450Fma = 50,$/;"	e	enum:GLSLstd450
GLSLstd450Fract	GLSL.std.450.h	/^    GLSLstd450Fract = 10,$/;"	e	enum:GLSLstd450
GLSLstd450Frexp	GLSL.std.450.h	/^    GLSLstd450Frexp = 51,            \/\/ second operand needs an OpVariable to write to$/;"	e	enum:GLSLstd450
GLSLstd450FrexpStruct	GLSL.std.450.h	/^    GLSLstd450FrexpStruct = 52,      \/\/ no OpVariable operand$/;"	e	enum:GLSLstd450
GLSLstd450IMix	GLSL.std.450.h	/^    GLSLstd450IMix = 47,            \/\/ Reserved$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtCentroid	GLSL.std.450.h	/^    GLSLstd450InterpolateAtCentroid = 76,$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtOffset	GLSL.std.450.h	/^    GLSLstd450InterpolateAtOffset = 78,$/;"	e	enum:GLSLstd450
GLSLstd450InterpolateAtSample	GLSL.std.450.h	/^    GLSLstd450InterpolateAtSample = 77,$/;"	e	enum:GLSLstd450
GLSLstd450InverseSqrt	GLSL.std.450.h	/^    GLSLstd450InverseSqrt = 32,$/;"	e	enum:GLSLstd450
GLSLstd450Ldexp	GLSL.std.450.h	/^    GLSLstd450Ldexp = 53,$/;"	e	enum:GLSLstd450
GLSLstd450Length	GLSL.std.450.h	/^    GLSLstd450Length = 66,$/;"	e	enum:GLSLstd450
GLSLstd450Log	GLSL.std.450.h	/^    GLSLstd450Log = 28,$/;"	e	enum:GLSLstd450
GLSLstd450Log2	GLSL.std.450.h	/^    GLSLstd450Log2 = 30,$/;"	e	enum:GLSLstd450
GLSLstd450MatrixInverse	GLSL.std.450.h	/^    GLSLstd450MatrixInverse = 34,$/;"	e	enum:GLSLstd450
GLSLstd450Modf	GLSL.std.450.h	/^    GLSLstd450Modf = 35,            \/\/ second operand needs an OpVariable to write to$/;"	e	enum:GLSLstd450
GLSLstd450ModfStruct	GLSL.std.450.h	/^    GLSLstd450ModfStruct = 36,      \/\/ no OpVariable operand$/;"	e	enum:GLSLstd450
GLSLstd450NClamp	GLSL.std.450.h	/^    GLSLstd450NClamp = 81,$/;"	e	enum:GLSLstd450
GLSLstd450NMax	GLSL.std.450.h	/^    GLSLstd450NMax = 80,$/;"	e	enum:GLSLstd450
GLSLstd450NMin	GLSL.std.450.h	/^    GLSLstd450NMin = 79,$/;"	e	enum:GLSLstd450
GLSLstd450Normalize	GLSL.std.450.h	/^    GLSLstd450Normalize = 69,$/;"	e	enum:GLSLstd450
GLSLstd450PackDouble2x32	GLSL.std.450.h	/^    GLSLstd450PackDouble2x32 = 59,$/;"	e	enum:GLSLstd450
GLSLstd450PackHalf2x16	GLSL.std.450.h	/^    GLSLstd450PackHalf2x16 = 58,$/;"	e	enum:GLSLstd450
GLSLstd450PackSnorm2x16	GLSL.std.450.h	/^    GLSLstd450PackSnorm2x16 = 56,$/;"	e	enum:GLSLstd450
GLSLstd450PackSnorm4x8	GLSL.std.450.h	/^    GLSLstd450PackSnorm4x8 = 54,$/;"	e	enum:GLSLstd450
GLSLstd450PackUnorm2x16	GLSL.std.450.h	/^    GLSLstd450PackUnorm2x16 = 57,$/;"	e	enum:GLSLstd450
GLSLstd450PackUnorm4x8	GLSL.std.450.h	/^    GLSLstd450PackUnorm4x8 = 55,$/;"	e	enum:GLSLstd450
GLSLstd450Pow	GLSL.std.450.h	/^    GLSLstd450Pow = 26,$/;"	e	enum:GLSLstd450
GLSLstd450Radians	GLSL.std.450.h	/^    GLSLstd450Radians = 11,$/;"	e	enum:GLSLstd450
GLSLstd450Reflect	GLSL.std.450.h	/^    GLSLstd450Reflect = 71,$/;"	e	enum:GLSLstd450
GLSLstd450Refract	GLSL.std.450.h	/^    GLSLstd450Refract = 72,$/;"	e	enum:GLSLstd450
GLSLstd450Revision	GLSL.std.450.h	/^static const int GLSLstd450Revision = 3;$/;"	v
GLSLstd450Round	GLSL.std.450.h	/^    GLSLstd450Round = 1,$/;"	e	enum:GLSLstd450
GLSLstd450RoundEven	GLSL.std.450.h	/^    GLSLstd450RoundEven = 2,$/;"	e	enum:GLSLstd450
GLSLstd450SAbs	GLSL.std.450.h	/^    GLSLstd450SAbs = 5,$/;"	e	enum:GLSLstd450
GLSLstd450SClamp	GLSL.std.450.h	/^    GLSLstd450SClamp = 45,$/;"	e	enum:GLSLstd450
GLSLstd450SMax	GLSL.std.450.h	/^    GLSLstd450SMax = 42,$/;"	e	enum:GLSLstd450
GLSLstd450SMin	GLSL.std.450.h	/^    GLSLstd450SMin = 39,$/;"	e	enum:GLSLstd450
GLSLstd450SSign	GLSL.std.450.h	/^    GLSLstd450SSign = 7,$/;"	e	enum:GLSLstd450
GLSLstd450Sin	GLSL.std.450.h	/^    GLSLstd450Sin = 13,$/;"	e	enum:GLSLstd450
GLSLstd450Sinh	GLSL.std.450.h	/^    GLSLstd450Sinh = 19,$/;"	e	enum:GLSLstd450
GLSLstd450SmoothStep	GLSL.std.450.h	/^    GLSLstd450SmoothStep = 49,$/;"	e	enum:GLSLstd450
GLSLstd450Sqrt	GLSL.std.450.h	/^    GLSLstd450Sqrt = 31,$/;"	e	enum:GLSLstd450
GLSLstd450Step	GLSL.std.450.h	/^    GLSLstd450Step = 48,$/;"	e	enum:GLSLstd450
GLSLstd450Tan	GLSL.std.450.h	/^    GLSLstd450Tan = 15,$/;"	e	enum:GLSLstd450
GLSLstd450Tanh	GLSL.std.450.h	/^    GLSLstd450Tanh = 21,$/;"	e	enum:GLSLstd450
GLSLstd450Trunc	GLSL.std.450.h	/^    GLSLstd450Trunc = 3,$/;"	e	enum:GLSLstd450
GLSLstd450UClamp	GLSL.std.450.h	/^    GLSLstd450UClamp = 44,$/;"	e	enum:GLSLstd450
GLSLstd450UMax	GLSL.std.450.h	/^    GLSLstd450UMax = 41,$/;"	e	enum:GLSLstd450
GLSLstd450UMin	GLSL.std.450.h	/^    GLSLstd450UMin = 38,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackDouble2x32	GLSL.std.450.h	/^    GLSLstd450UnpackDouble2x32 = 65,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackHalf2x16	GLSL.std.450.h	/^    GLSLstd450UnpackHalf2x16 = 62,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackSnorm2x16	GLSL.std.450.h	/^    GLSLstd450UnpackSnorm2x16 = 60,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackSnorm4x8	GLSL.std.450.h	/^    GLSLstd450UnpackSnorm4x8 = 63,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackUnorm2x16	GLSL.std.450.h	/^    GLSLstd450UnpackUnorm2x16 = 61,$/;"	e	enum:GLSLstd450
GLSLstd450UnpackUnorm4x8	GLSL.std.450.h	/^    GLSLstd450UnpackUnorm4x8 = 64,$/;"	e	enum:GLSLstd450
GLSLstd450Version	GLSL.std.450.h	/^static const int GLSLstd450Version = 100;$/;"	v
GLSLstd450_H	GLSL.std.450.h	11;"	d
GroupOperation	spirv.hpp	/^enum GroupOperation {$/;"	g	namespace:spv
GroupOperationClusteredReduce	spirv.hpp	/^    GroupOperationClusteredReduce = 3,$/;"	e	enum:spv::GroupOperation
GroupOperationExclusiveScan	spirv.hpp	/^    GroupOperationExclusiveScan = 2,$/;"	e	enum:spv::GroupOperation
GroupOperationInclusiveScan	spirv.hpp	/^    GroupOperationInclusiveScan = 1,$/;"	e	enum:spv::GroupOperation
GroupOperationMax	spirv.hpp	/^    GroupOperationMax = 0x7fffffff,$/;"	e	enum:spv::GroupOperation
GroupOperationPartitionedExclusiveScanNV	spirv.hpp	/^    GroupOperationPartitionedExclusiveScanNV = 8,$/;"	e	enum:spv::GroupOperation
GroupOperationPartitionedInclusiveScanNV	spirv.hpp	/^    GroupOperationPartitionedInclusiveScanNV = 7,$/;"	e	enum:spv::GroupOperation
GroupOperationPartitionedReduceNV	spirv.hpp	/^    GroupOperationPartitionedReduceNV = 6,$/;"	e	enum:spv::GroupOperation
GroupOperationReduce	spirv.hpp	/^    GroupOperationReduce = 0,$/;"	e	enum:spv::GroupOperation
HLSLBindingFlagBits	spirv_hlsl.hpp	/^enum HLSLBindingFlagBits$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
HLSLResourceBinding	spirv_hlsl.hpp	/^struct HLSLResourceBinding$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
HLSLVertexAttributeRemap	spirv_hlsl.hpp	/^struct HLSLVertexAttributeRemap$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
HLSL_BFOP	spirv_hlsl.cpp	4873;"	d	file:
HLSL_BFOP	spirv_hlsl.cpp	4876;"	d	file:
HLSL_BFOP_CAST	spirv_hlsl.cpp	4874;"	d	file:
HLSL_BINDING_AUTO_ALL	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_ALL = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_CBV_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_CBV_BIT = 1 << 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_NONE_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_NONE_BIT = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT = 1 << 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_SAMPLER_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_SAMPLER_BIT = 1 << 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_SRV_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_SRV_BIT = 1 << 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BINDING_AUTO_UAV_BIT	spirv_hlsl.hpp	/^	HLSL_BINDING_AUTO_UAV_BIT = 1 << 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::HLSLBindingFlagBits
HLSL_BOP	spirv_hlsl.cpp	4867;"	d	file:
HLSL_BOP_CAST	spirv_hlsl.cpp	4868;"	d	file:
HLSL_GROUP_OP	spirv_hlsl.cpp	4782;"	d	file:
HLSL_GROUP_OP	spirv_hlsl.cpp	4831;"	d	file:
HLSL_GROUP_OP_CAST	spirv_hlsl.cpp	4803;"	d	file:
HLSL_GROUP_OP_CAST	spirv_hlsl.cpp	4832;"	d	file:
HLSL_QFOP	spirv_hlsl.cpp	4871;"	d	file:
HLSL_TFOP	spirv_hlsl.cpp	4872;"	d	file:
HLSL_UFOP	spirv_hlsl.cpp	4877;"	d	file:
HLSL_UOP	spirv_hlsl.cpp	4870;"	d	file:
Half	spirv_common.hpp	/^		Half,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
HasResultAndType	spirv.hpp	/^inline void HasResultAndType(Op opcode, bool *hasResult, bool *hasResultType) {$/;"	f	namespace:spv
Hasher	spirv_common.hpp	/^class Hasher$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Highp	spirv_glsl.hpp	/^			Highp$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::Precision
HintDontFlatten	spirv_common.hpp	/^		HintDontFlatten$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Hints
HintDontUnroll	spirv_common.hpp	/^		HintDontUnroll,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Hints
HintFlatten	spirv_common.hpp	/^		HintFlatten,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Hints
HintNone	spirv_common.hpp	/^		HintNone,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Hints
HintUnroll	spirv_common.hpp	/^		HintUnroll,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Hints
Hints	spirv_common.hpp	/^	enum Hints$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
IVariant	spirv_common.hpp	/^struct IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Id	spirv.hpp	/^typedef unsigned int Id;$/;"	t	namespace:spv
IgnoreIntersection	spirv_common.hpp	/^		IgnoreIntersection, \/\/ Ray Tracing$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
Image	spirv_common.hpp	/^		Image,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
ImageChannelDataType	spirv.hpp	/^enum ImageChannelDataType {$/;"	g	namespace:spv
ImageChannelDataTypeFloat	spirv.hpp	/^    ImageChannelDataTypeFloat = 14,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeHalfFloat	spirv.hpp	/^    ImageChannelDataTypeHalfFloat = 13,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeMax	spirv.hpp	/^    ImageChannelDataTypeMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt16	spirv.hpp	/^    ImageChannelDataTypeSignedInt16 = 8,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt32	spirv.hpp	/^    ImageChannelDataTypeSignedInt32 = 9,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSignedInt8	spirv.hpp	/^    ImageChannelDataTypeSignedInt8 = 7,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSnormInt16	spirv.hpp	/^    ImageChannelDataTypeSnormInt16 = 1,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeSnormInt8	spirv.hpp	/^    ImageChannelDataTypeSnormInt8 = 0,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt101010	spirv.hpp	/^    ImageChannelDataTypeUnormInt101010 = 6,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt101010_2	spirv.hpp	/^    ImageChannelDataTypeUnormInt101010_2 = 16,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt16	spirv.hpp	/^    ImageChannelDataTypeUnormInt16 = 3,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt24	spirv.hpp	/^    ImageChannelDataTypeUnormInt24 = 15,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormInt8	spirv.hpp	/^    ImageChannelDataTypeUnormInt8 = 2,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormShort555	spirv.hpp	/^    ImageChannelDataTypeUnormShort555 = 5,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnormShort565	spirv.hpp	/^    ImageChannelDataTypeUnormShort565 = 4,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt16	spirv.hpp	/^    ImageChannelDataTypeUnsignedInt16 = 11,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt32	spirv.hpp	/^    ImageChannelDataTypeUnsignedInt32 = 12,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelDataTypeUnsignedInt8	spirv.hpp	/^    ImageChannelDataTypeUnsignedInt8 = 10,$/;"	e	enum:spv::ImageChannelDataType
ImageChannelOrder	spirv.hpp	/^enum ImageChannelOrder {$/;"	g	namespace:spv
ImageChannelOrderA	spirv.hpp	/^    ImageChannelOrderA = 1,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderABGR	spirv.hpp	/^    ImageChannelOrderABGR = 19,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderARGB	spirv.hpp	/^    ImageChannelOrderARGB = 7,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderBGRA	spirv.hpp	/^    ImageChannelOrderBGRA = 6,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderDepth	spirv.hpp	/^    ImageChannelOrderDepth = 13,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderDepthStencil	spirv.hpp	/^    ImageChannelOrderDepthStencil = 14,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderIntensity	spirv.hpp	/^    ImageChannelOrderIntensity = 8,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderLuminance	spirv.hpp	/^    ImageChannelOrderLuminance = 9,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderMax	spirv.hpp	/^    ImageChannelOrderMax = 0x7fffffff,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderR	spirv.hpp	/^    ImageChannelOrderR = 0,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRA	spirv.hpp	/^    ImageChannelOrderRA = 3,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRG	spirv.hpp	/^    ImageChannelOrderRG = 2,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGB	spirv.hpp	/^    ImageChannelOrderRGB = 4,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGBA	spirv.hpp	/^    ImageChannelOrderRGBA = 5,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGBx	spirv.hpp	/^    ImageChannelOrderRGBx = 12,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRGx	spirv.hpp	/^    ImageChannelOrderRGx = 11,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrderRx	spirv.hpp	/^    ImageChannelOrderRx = 10,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersBGRA	spirv.hpp	/^    ImageChannelOrdersBGRA = 18,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGB	spirv.hpp	/^    ImageChannelOrdersRGB = 15,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGBA	spirv.hpp	/^    ImageChannelOrdersRGBA = 17,$/;"	e	enum:spv::ImageChannelOrder
ImageChannelOrdersRGBx	spirv.hpp	/^    ImageChannelOrdersRGBx = 16,$/;"	e	enum:spv::ImageChannelOrder
ImageFormat	spirv.hpp	/^enum ImageFormat {$/;"	g	namespace:spv
ImageFormatMax	spirv.hpp	/^    ImageFormatMax = 0x7fffffff,$/;"	e	enum:spv::ImageFormat
ImageFormatNormalizedState	spirv_hlsl.cpp	/^enum class ImageFormatNormalizedState$/;"	c	file:
ImageFormatR11fG11fB10f	spirv.hpp	/^    ImageFormatR11fG11fB10f = 8,$/;"	e	enum:spv::ImageFormat
ImageFormatR16	spirv.hpp	/^    ImageFormatR16 = 14,$/;"	e	enum:spv::ImageFormat
ImageFormatR16Snorm	spirv.hpp	/^    ImageFormatR16Snorm = 19,$/;"	e	enum:spv::ImageFormat
ImageFormatR16f	spirv.hpp	/^    ImageFormatR16f = 9,$/;"	e	enum:spv::ImageFormat
ImageFormatR16i	spirv.hpp	/^    ImageFormatR16i = 28,$/;"	e	enum:spv::ImageFormat
ImageFormatR16ui	spirv.hpp	/^    ImageFormatR16ui = 38,$/;"	e	enum:spv::ImageFormat
ImageFormatR32f	spirv.hpp	/^    ImageFormatR32f = 3,$/;"	e	enum:spv::ImageFormat
ImageFormatR32i	spirv.hpp	/^    ImageFormatR32i = 24,$/;"	e	enum:spv::ImageFormat
ImageFormatR32ui	spirv.hpp	/^    ImageFormatR32ui = 33,$/;"	e	enum:spv::ImageFormat
ImageFormatR64i	spirv.hpp	/^    ImageFormatR64i = 41,$/;"	e	enum:spv::ImageFormat
ImageFormatR64ui	spirv.hpp	/^    ImageFormatR64ui = 40,$/;"	e	enum:spv::ImageFormat
ImageFormatR8	spirv.hpp	/^    ImageFormatR8 = 15,$/;"	e	enum:spv::ImageFormat
ImageFormatR8Snorm	spirv.hpp	/^    ImageFormatR8Snorm = 20,$/;"	e	enum:spv::ImageFormat
ImageFormatR8i	spirv.hpp	/^    ImageFormatR8i = 29,$/;"	e	enum:spv::ImageFormat
ImageFormatR8ui	spirv.hpp	/^    ImageFormatR8ui = 39,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16	spirv.hpp	/^    ImageFormatRg16 = 12,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16Snorm	spirv.hpp	/^    ImageFormatRg16Snorm = 17,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16f	spirv.hpp	/^    ImageFormatRg16f = 7,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16i	spirv.hpp	/^    ImageFormatRg16i = 26,$/;"	e	enum:spv::ImageFormat
ImageFormatRg16ui	spirv.hpp	/^    ImageFormatRg16ui = 36,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32f	spirv.hpp	/^    ImageFormatRg32f = 6,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32i	spirv.hpp	/^    ImageFormatRg32i = 25,$/;"	e	enum:spv::ImageFormat
ImageFormatRg32ui	spirv.hpp	/^    ImageFormatRg32ui = 35,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8	spirv.hpp	/^    ImageFormatRg8 = 13,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8Snorm	spirv.hpp	/^    ImageFormatRg8Snorm = 18,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8i	spirv.hpp	/^    ImageFormatRg8i = 27,$/;"	e	enum:spv::ImageFormat
ImageFormatRg8ui	spirv.hpp	/^    ImageFormatRg8ui = 37,$/;"	e	enum:spv::ImageFormat
ImageFormatRgb10A2	spirv.hpp	/^    ImageFormatRgb10A2 = 11,$/;"	e	enum:spv::ImageFormat
ImageFormatRgb10a2ui	spirv.hpp	/^    ImageFormatRgb10a2ui = 34,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16	spirv.hpp	/^    ImageFormatRgba16 = 10,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16Snorm	spirv.hpp	/^    ImageFormatRgba16Snorm = 16,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16f	spirv.hpp	/^    ImageFormatRgba16f = 2,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16i	spirv.hpp	/^    ImageFormatRgba16i = 22,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba16ui	spirv.hpp	/^    ImageFormatRgba16ui = 31,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32f	spirv.hpp	/^    ImageFormatRgba32f = 1,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32i	spirv.hpp	/^    ImageFormatRgba32i = 21,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba32ui	spirv.hpp	/^    ImageFormatRgba32ui = 30,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8	spirv.hpp	/^    ImageFormatRgba8 = 4,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8Snorm	spirv.hpp	/^    ImageFormatRgba8Snorm = 5,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8i	spirv.hpp	/^    ImageFormatRgba8i = 23,$/;"	e	enum:spv::ImageFormat
ImageFormatRgba8ui	spirv.hpp	/^    ImageFormatRgba8ui = 32,$/;"	e	enum:spv::ImageFormat
ImageFormatUnknown	spirv.hpp	/^    ImageFormatUnknown = 0,$/;"	e	enum:spv::ImageFormat
ImageOperandsBiasMask	spirv.hpp	/^    ImageOperandsBiasMask = 0x00000001,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsBiasShift	spirv.hpp	/^    ImageOperandsBiasShift = 0,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsConstOffsetMask	spirv.hpp	/^    ImageOperandsConstOffsetMask = 0x00000008,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsConstOffsetShift	spirv.hpp	/^    ImageOperandsConstOffsetShift = 3,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsConstOffsetsMask	spirv.hpp	/^    ImageOperandsConstOffsetsMask = 0x00000020,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsConstOffsetsShift	spirv.hpp	/^    ImageOperandsConstOffsetsShift = 5,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsGradMask	spirv.hpp	/^    ImageOperandsGradMask = 0x00000004,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsGradShift	spirv.hpp	/^    ImageOperandsGradShift = 2,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsLodMask	spirv.hpp	/^    ImageOperandsLodMask = 0x00000002,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsLodShift	spirv.hpp	/^    ImageOperandsLodShift = 1,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMakeTexelAvailableKHRMask	spirv.hpp	/^    ImageOperandsMakeTexelAvailableKHRMask = 0x00000100,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMakeTexelAvailableKHRShift	spirv.hpp	/^    ImageOperandsMakeTexelAvailableKHRShift = 8,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMakeTexelAvailableMask	spirv.hpp	/^    ImageOperandsMakeTexelAvailableMask = 0x00000100,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMakeTexelAvailableShift	spirv.hpp	/^    ImageOperandsMakeTexelAvailableShift = 8,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMakeTexelVisibleKHRMask	spirv.hpp	/^    ImageOperandsMakeTexelVisibleKHRMask = 0x00000200,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMakeTexelVisibleKHRShift	spirv.hpp	/^    ImageOperandsMakeTexelVisibleKHRShift = 9,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMakeTexelVisibleMask	spirv.hpp	/^    ImageOperandsMakeTexelVisibleMask = 0x00000200,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMakeTexelVisibleShift	spirv.hpp	/^    ImageOperandsMakeTexelVisibleShift = 9,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMask	spirv.hpp	/^enum ImageOperandsMask {$/;"	g	namespace:spv
ImageOperandsMaskNone	spirv.hpp	/^    ImageOperandsMaskNone = 0,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMax	spirv.hpp	/^    ImageOperandsMax = 0x7fffffff,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsMinLodMask	spirv.hpp	/^    ImageOperandsMinLodMask = 0x00000080,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsMinLodShift	spirv.hpp	/^    ImageOperandsMinLodShift = 7,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsNonPrivateTexelKHRMask	spirv.hpp	/^    ImageOperandsNonPrivateTexelKHRMask = 0x00000400,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsNonPrivateTexelKHRShift	spirv.hpp	/^    ImageOperandsNonPrivateTexelKHRShift = 10,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsNonPrivateTexelMask	spirv.hpp	/^    ImageOperandsNonPrivateTexelMask = 0x00000400,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsNonPrivateTexelShift	spirv.hpp	/^    ImageOperandsNonPrivateTexelShift = 10,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsNontemporalMask	spirv.hpp	/^    ImageOperandsNontemporalMask = 0x00004000,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsNontemporalShift	spirv.hpp	/^    ImageOperandsNontemporalShift = 14,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsOffsetMask	spirv.hpp	/^    ImageOperandsOffsetMask = 0x00000010,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsOffsetShift	spirv.hpp	/^    ImageOperandsOffsetShift = 4,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsOffsetsMask	spirv.hpp	/^    ImageOperandsOffsetsMask = 0x00010000,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsOffsetsShift	spirv.hpp	/^    ImageOperandsOffsetsShift = 16,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsSampleMask	spirv.hpp	/^    ImageOperandsSampleMask = 0x00000040,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsSampleShift	spirv.hpp	/^    ImageOperandsSampleShift = 6,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsShift	spirv.hpp	/^enum ImageOperandsShift {$/;"	g	namespace:spv
ImageOperandsSignExtendMask	spirv.hpp	/^    ImageOperandsSignExtendMask = 0x00001000,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsSignExtendShift	spirv.hpp	/^    ImageOperandsSignExtendShift = 12,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsVolatileTexelKHRMask	spirv.hpp	/^    ImageOperandsVolatileTexelKHRMask = 0x00000800,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsVolatileTexelKHRShift	spirv.hpp	/^    ImageOperandsVolatileTexelKHRShift = 11,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsVolatileTexelMask	spirv.hpp	/^    ImageOperandsVolatileTexelMask = 0x00000800,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsVolatileTexelShift	spirv.hpp	/^    ImageOperandsVolatileTexelShift = 11,$/;"	e	enum:spv::ImageOperandsShift
ImageOperandsZeroExtendMask	spirv.hpp	/^    ImageOperandsZeroExtendMask = 0x00002000,$/;"	e	enum:spv::ImageOperandsMask
ImageOperandsZeroExtendShift	spirv.hpp	/^    ImageOperandsZeroExtendShift = 13,$/;"	e	enum:spv::ImageOperandsShift
ImageType	spirv_common.hpp	/^	struct ImageType$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRType
IndexType	spirv_msl.hpp	/^		enum class IndexType$/;"	c	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
Instruction	spirv_common.hpp	/^struct Instruction$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Int	spirv_common.hpp	/^		Int,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
Int64	spirv_common.hpp	/^		Int64,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
InterfaceBlockMeta	spirv_msl.hpp	/^	struct InterfaceBlockMeta$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
InterfaceVariableAccessHandler	spirv_cross.hpp	/^		InterfaceVariableAccessHandler(const Compiler &compiler_, std::unordered_set<VariableID> &variables_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterfaceVariableAccessHandler
InterfaceVariableAccessHandler	spirv_cross.hpp	/^	struct InterfaceVariableAccessHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
InterfaceVariableRename	main.cpp	/^struct InterfaceVariableRename$/;"	s	file:
InterlockedResourceAccessHandler	spirv_cross.hpp	/^		InterlockedResourceAccessHandler(Compiler &compiler_, uint32_t entry_point_id)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
InterlockedResourceAccessHandler	spirv_cross.hpp	/^	struct InterlockedResourceAccessHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
InterlockedResourceAccessPrepassHandler	spirv_cross.hpp	/^		InterlockedResourceAccessPrepassHandler(Compiler &compiler_, uint32_t entry_point_id)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
InterlockedResourceAccessPrepassHandler	spirv_cross.hpp	/^	struct InterlockedResourceAccessPrepassHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
InternalHasher	spirv_common.hpp	/^struct InternalHasher$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Interpolant	spirv_common.hpp	/^		Interpolant,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
KHR_shader_subgroup_ballot	spirv_glsl.hpp	/^			KHR_shader_subgroup_ballot,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
KHR_shader_subgroup_basic	spirv_glsl.hpp	/^			KHR_shader_subgroup_basic,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
KHR_shader_subgroup_vote	spirv_glsl.hpp	/^			KHR_shader_subgroup_vote,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
KernelEnqueueFlags	spirv.hpp	/^enum KernelEnqueueFlags {$/;"	g	namespace:spv
KernelEnqueueFlagsMax	spirv.hpp	/^    KernelEnqueueFlagsMax = 0x7fffffff,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsNoWait	spirv.hpp	/^    KernelEnqueueFlagsNoWait = 0,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsWaitKernel	spirv.hpp	/^    KernelEnqueueFlagsWaitKernel = 1,$/;"	e	enum:spv::KernelEnqueueFlags
KernelEnqueueFlagsWaitWorkGroup	spirv.hpp	/^    KernelEnqueueFlagsWaitWorkGroup = 2,$/;"	e	enum:spv::KernelEnqueueFlags
KernelProfilingInfoCmdExecTimeMask	spirv.hpp	/^    KernelProfilingInfoCmdExecTimeMask = 0x00000001,$/;"	e	enum:spv::KernelProfilingInfoMask
KernelProfilingInfoCmdExecTimeShift	spirv.hpp	/^    KernelProfilingInfoCmdExecTimeShift = 0,$/;"	e	enum:spv::KernelProfilingInfoShift
KernelProfilingInfoMask	spirv.hpp	/^enum KernelProfilingInfoMask {$/;"	g	namespace:spv
KernelProfilingInfoMaskNone	spirv.hpp	/^    KernelProfilingInfoMaskNone = 0,$/;"	e	enum:spv::KernelProfilingInfoMask
KernelProfilingInfoMax	spirv.hpp	/^    KernelProfilingInfoMax = 0x7fffffff,$/;"	e	enum:spv::KernelProfilingInfoShift
KernelProfilingInfoShift	spirv.hpp	/^enum KernelProfilingInfoShift {$/;"	g	namespace:spv
Kill	spirv_common.hpp	/^		Kill, \/\/ Discard$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
LinkageType	spirv.hpp	/^enum LinkageType {$/;"	g	namespace:spv
LinkageTypeExport	spirv.hpp	/^    LinkageTypeExport = 0,$/;"	e	enum:spv::LinkageType
LinkageTypeImport	spirv.hpp	/^    LinkageTypeImport = 1,$/;"	e	enum:spv::LinkageType
LinkageTypeLinkOnceODR	spirv.hpp	/^    LinkageTypeLinkOnceODR = 2,$/;"	e	enum:spv::LinkageType
LinkageTypeMax	spirv.hpp	/^    LinkageTypeMax = 0x7fffffff,$/;"	e	enum:spv::LinkageType
LocationComponentPair	spirv_common.hpp	/^struct LocationComponentPair$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
LocationMeta	spirv_msl.hpp	/^		struct LocationMeta$/;"	s	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta
LocationThenBuiltInType	spirv_msl.hpp	/^			LocationThenBuiltInType,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter::SortAspect
LoopControlDependencyArrayINTELMask	spirv.hpp	/^    LoopControlDependencyArrayINTELMask = 0x00040000,$/;"	e	enum:spv::LoopControlMask
LoopControlDependencyArrayINTELShift	spirv.hpp	/^    LoopControlDependencyArrayINTELShift = 18,$/;"	e	enum:spv::LoopControlShift
LoopControlDependencyInfiniteMask	spirv.hpp	/^    LoopControlDependencyInfiniteMask = 0x00000004,$/;"	e	enum:spv::LoopControlMask
LoopControlDependencyInfiniteShift	spirv.hpp	/^    LoopControlDependencyInfiniteShift = 2,$/;"	e	enum:spv::LoopControlShift
LoopControlDependencyLengthMask	spirv.hpp	/^    LoopControlDependencyLengthMask = 0x00000008,$/;"	e	enum:spv::LoopControlMask
LoopControlDependencyLengthShift	spirv.hpp	/^    LoopControlDependencyLengthShift = 3,$/;"	e	enum:spv::LoopControlShift
LoopControlDontUnrollMask	spirv.hpp	/^    LoopControlDontUnrollMask = 0x00000002,$/;"	e	enum:spv::LoopControlMask
LoopControlDontUnrollShift	spirv.hpp	/^    LoopControlDontUnrollShift = 1,$/;"	e	enum:spv::LoopControlShift
LoopControlInitiationIntervalINTELMask	spirv.hpp	/^    LoopControlInitiationIntervalINTELMask = 0x00010000,$/;"	e	enum:spv::LoopControlMask
LoopControlInitiationIntervalINTELShift	spirv.hpp	/^    LoopControlInitiationIntervalINTELShift = 16,$/;"	e	enum:spv::LoopControlShift
LoopControlIterationMultipleMask	spirv.hpp	/^    LoopControlIterationMultipleMask = 0x00000040,$/;"	e	enum:spv::LoopControlMask
LoopControlIterationMultipleShift	spirv.hpp	/^    LoopControlIterationMultipleShift = 6,$/;"	e	enum:spv::LoopControlShift
LoopControlLoopCoalesceINTELMask	spirv.hpp	/^    LoopControlLoopCoalesceINTELMask = 0x00100000,$/;"	e	enum:spv::LoopControlMask
LoopControlLoopCoalesceINTELShift	spirv.hpp	/^    LoopControlLoopCoalesceINTELShift = 20,$/;"	e	enum:spv::LoopControlShift
LoopControlMask	spirv.hpp	/^enum LoopControlMask {$/;"	g	namespace:spv
LoopControlMaskNone	spirv.hpp	/^    LoopControlMaskNone = 0,$/;"	e	enum:spv::LoopControlMask
LoopControlMax	spirv.hpp	/^    LoopControlMax = 0x7fffffff,$/;"	e	enum:spv::LoopControlShift
LoopControlMaxConcurrencyINTELMask	spirv.hpp	/^    LoopControlMaxConcurrencyINTELMask = 0x00020000,$/;"	e	enum:spv::LoopControlMask
LoopControlMaxConcurrencyINTELShift	spirv.hpp	/^    LoopControlMaxConcurrencyINTELShift = 17,$/;"	e	enum:spv::LoopControlShift
LoopControlMaxInterleavingINTELMask	spirv.hpp	/^    LoopControlMaxInterleavingINTELMask = 0x00200000,$/;"	e	enum:spv::LoopControlMask
LoopControlMaxInterleavingINTELShift	spirv.hpp	/^    LoopControlMaxInterleavingINTELShift = 21,$/;"	e	enum:spv::LoopControlShift
LoopControlMaxIterationsMask	spirv.hpp	/^    LoopControlMaxIterationsMask = 0x00000020,$/;"	e	enum:spv::LoopControlMask
LoopControlMaxIterationsShift	spirv.hpp	/^    LoopControlMaxIterationsShift = 5,$/;"	e	enum:spv::LoopControlShift
LoopControlMinIterationsMask	spirv.hpp	/^    LoopControlMinIterationsMask = 0x00000010,$/;"	e	enum:spv::LoopControlMask
LoopControlMinIterationsShift	spirv.hpp	/^    LoopControlMinIterationsShift = 4,$/;"	e	enum:spv::LoopControlShift
LoopControlNoFusionINTELMask	spirv.hpp	/^    LoopControlNoFusionINTELMask = 0x00800000,$/;"	e	enum:spv::LoopControlMask
LoopControlNoFusionINTELShift	spirv.hpp	/^    LoopControlNoFusionINTELShift = 23,$/;"	e	enum:spv::LoopControlShift
LoopControlPartialCountMask	spirv.hpp	/^    LoopControlPartialCountMask = 0x00000100,$/;"	e	enum:spv::LoopControlMask
LoopControlPartialCountShift	spirv.hpp	/^    LoopControlPartialCountShift = 8,$/;"	e	enum:spv::LoopControlShift
LoopControlPeelCountMask	spirv.hpp	/^    LoopControlPeelCountMask = 0x00000080,$/;"	e	enum:spv::LoopControlMask
LoopControlPeelCountShift	spirv.hpp	/^    LoopControlPeelCountShift = 7,$/;"	e	enum:spv::LoopControlShift
LoopControlPipelineEnableINTELMask	spirv.hpp	/^    LoopControlPipelineEnableINTELMask = 0x00080000,$/;"	e	enum:spv::LoopControlMask
LoopControlPipelineEnableINTELShift	spirv.hpp	/^    LoopControlPipelineEnableINTELShift = 19,$/;"	e	enum:spv::LoopControlShift
LoopControlShift	spirv.hpp	/^enum LoopControlShift {$/;"	g	namespace:spv
LoopControlSpeculatedIterationsINTELMask	spirv.hpp	/^    LoopControlSpeculatedIterationsINTELMask = 0x00400000,$/;"	e	enum:spv::LoopControlMask
LoopControlSpeculatedIterationsINTELShift	spirv.hpp	/^    LoopControlSpeculatedIterationsINTELShift = 22,$/;"	e	enum:spv::LoopControlShift
LoopControlUnrollMask	spirv.hpp	/^    LoopControlUnrollMask = 0x00000001,$/;"	e	enum:spv::LoopControlMask
LoopControlUnrollShift	spirv.hpp	/^    LoopControlUnrollShift = 0,$/;"	e	enum:spv::LoopControlShift
LoopLock	spirv_cross_parsed_ir.cpp	/^ParsedIR::LoopLock::LoopLock(uint32_t *lock_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR::LoopLock
LoopLock	spirv_cross_parsed_ir.hpp	/^	class LoopLock$/;"	c	class:SPIRV_CROSS_NAMESPACE::ParsedIR
Lowp	spirv_glsl.hpp	/^			Lowp,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::Precision
MSLChromaLocation	spirv_msl.hpp	/^enum MSLChromaLocation$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLComponentSwizzle	spirv_msl.hpp	/^enum MSLComponentSwizzle$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLConstexprSampler	spirv_msl.hpp	/^	MSLConstexprSampler()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
MSLConstexprSampler	spirv_msl.hpp	/^struct MSLConstexprSampler$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
MSLFormatResolution	spirv_msl.hpp	/^enum MSLFormatResolution$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLResourceBinding	spirv_msl.hpp	/^struct MSLResourceBinding$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerAddress	spirv_msl.hpp	/^enum MSLSamplerAddress$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerBorderColor	spirv_msl.hpp	/^enum MSLSamplerBorderColor$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerCompareFunc	spirv_msl.hpp	/^enum MSLSamplerCompareFunc$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerCoord	spirv_msl.hpp	/^enum MSLSamplerCoord$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerFilter	spirv_msl.hpp	/^enum MSLSamplerFilter$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerMipFilter	spirv_msl.hpp	/^enum MSLSamplerMipFilter$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerYCbCrModelConversion	spirv_msl.hpp	/^enum MSLSamplerYCbCrModelConversion$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLSamplerYCbCrRange	spirv_msl.hpp	/^enum MSLSamplerYCbCrRange$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSLShaderInput	spirv_msl.hpp	/^struct MSLShaderInput$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
MSLShaderInputFormat	spirv_msl.hpp	/^enum MSLShaderInputFormat$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
MSL_AFMIO	spirv_msl.cpp	7966;"	d	file:
MSL_AFMO	spirv_msl.cpp	7965;"	d	file:
MSL_AFMO_IMPL	spirv_msl.cpp	7952;"	d	file:
MSL_BFOP	spirv_msl.cpp	7687;"	d	file:
MSL_BFOP_CAST	spirv_msl.cpp	7688;"	d	file:
MSL_BOP	spirv_msl.cpp	7681;"	d	file:
MSL_BOP_CAST	spirv_msl.cpp	7682;"	d	file:
MSL_CHROMA_LOCATION_COSITED_EVEN	spirv_msl.hpp	/^	MSL_CHROMA_LOCATION_COSITED_EVEN = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLChromaLocation
MSL_CHROMA_LOCATION_INT_MAX	spirv_msl.hpp	/^	MSL_CHROMA_LOCATION_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLChromaLocation
MSL_CHROMA_LOCATION_MIDPOINT	spirv_msl.hpp	/^	MSL_CHROMA_LOCATION_MIDPOINT,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLChromaLocation
MSL_COMPONENT_SWIZZLE_A	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_A,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_B	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_B,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_G	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_G,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_IDENTITY	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_IDENTITY = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_INT_MAX	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_ONE	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_ONE,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_R	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_R,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_COMPONENT_SWIZZLE_ZERO	spirv_msl.hpp	/^	MSL_COMPONENT_SWIZZLE_ZERO,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLComponentSwizzle
MSL_FORMAT_RESOLUTION_420	spirv_msl.hpp	/^	MSL_FORMAT_RESOLUTION_420,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLFormatResolution
MSL_FORMAT_RESOLUTION_422	spirv_msl.hpp	/^	MSL_FORMAT_RESOLUTION_422,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLFormatResolution
MSL_FORMAT_RESOLUTION_444	spirv_msl.hpp	/^	MSL_FORMAT_RESOLUTION_444 = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLFormatResolution
MSL_FORMAT_RESOLUTION_INT_MAX	spirv_msl.hpp	/^	MSL_FORMAT_RESOLUTION_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLFormatResolution
MSL_GROUP_OP	spirv_msl.cpp	14200;"	d	file:
MSL_GROUP_OP	spirv_msl.cpp	14226;"	d	file:
MSL_GROUP_OP	spirv_msl.cpp	14229;"	d	file:
MSL_GROUP_OP	spirv_msl.cpp	14288;"	d	file:
MSL_GROUP_OP_CAST	spirv_msl.cpp	14252;"	d	file:
MSL_GROUP_OP_CAST	spirv_msl.cpp	14289;"	d	file:
MSL_ImgQry	spirv_msl.cpp	8201;"	d	file:
MSL_QFOP	spirv_msl.cpp	7685;"	d	file:
MSL_RAY_QUERY_GET_OP	spirv_msl.cpp	8558;"	d	file:
MSL_RAY_QUERY_GET_OP	spirv_msl.cpp	8623;"	d	file:
MSL_RAY_QUERY_GET_OP2	spirv_msl.cpp	8573;"	d	file:
MSL_RAY_QUERY_GET_OP2	spirv_msl.cpp	8626;"	d	file:
MSL_RAY_QUERY_IS_CANDIDATE	spirv_msl.cpp	8556;"	d	file:
MSL_RAY_QUERY_IS_CANDIDATE	spirv_msl.cpp	8624;"	d	file:
MSL_RAY_QUERY_IS_OP2	spirv_msl.cpp	8574;"	d	file:
MSL_RAY_QUERY_IS_OP2	spirv_msl.cpp	8625;"	d	file:
MSL_RAY_QUERY_OP_INNER2	spirv_msl.cpp	8564;"	d	file:
MSL_RAY_QUERY_OP_INNER2	spirv_msl.cpp	8627;"	d	file:
MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_ADDRESS_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT = 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_ADDRESS_REPEAT	spirv_msl.hpp	/^	MSL_SAMPLER_ADDRESS_REPEAT = 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerAddress
MSL_SAMPLER_BORDER_COLOR_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_BORDER_COLOR_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerBorderColor
MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK	spirv_msl.hpp	/^	MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerBorderColor
MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE	spirv_msl.hpp	/^	MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerBorderColor
MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK	spirv_msl.hpp	/^	MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerBorderColor
MSL_SAMPLER_COMPARE_FUNC_ALWAYS	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_ALWAYS = 7,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_EQUAL	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_EQUAL = 5,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_GREATER	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_GREATER = 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL = 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_LESS	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_LESS = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_NEVER	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_NEVER = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL	spirv_msl.hpp	/^	MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL = 6,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCompareFunc
MSL_SAMPLER_COORD_NORMALIZED	spirv_msl.hpp	/^	MSL_SAMPLER_COORD_NORMALIZED = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCoord
MSL_SAMPLER_COORD_PIXEL	spirv_msl.hpp	/^	MSL_SAMPLER_COORD_PIXEL = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCoord
MSL_SAMPLER_FILTER_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_FILTER_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerFilter
MSL_SAMPLER_FILTER_LINEAR	spirv_msl.hpp	/^	MSL_SAMPLER_FILTER_LINEAR = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerFilter
MSL_SAMPLER_FILTER_NEAREST	spirv_msl.hpp	/^	MSL_SAMPLER_FILTER_NEAREST = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerFilter
MSL_SAMPLER_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerCoord
MSL_SAMPLER_MIP_FILTER_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_MIP_FILTER_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerMipFilter
MSL_SAMPLER_MIP_FILTER_LINEAR	spirv_msl.hpp	/^	MSL_SAMPLER_MIP_FILTER_LINEAR = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerMipFilter
MSL_SAMPLER_MIP_FILTER_NEAREST	spirv_msl.hpp	/^	MSL_SAMPLER_MIP_FILTER_NEAREST = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerMipFilter
MSL_SAMPLER_MIP_FILTER_NONE	spirv_msl.hpp	/^	MSL_SAMPLER_MIP_FILTER_NONE = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerMipFilter
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrModelConversion
MSL_SAMPLER_YCBCR_RANGE_INT_MAX	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_RANGE_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrRange
MSL_SAMPLER_YCBCR_RANGE_ITU_FULL	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrRange
MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW	spirv_msl.hpp	/^	MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLSamplerYCbCrRange
MSL_SHADER_INPUT_FORMAT_ANY16	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_ANY16 = 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_SHADER_INPUT_FORMAT_ANY32	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_ANY32 = 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_SHADER_INPUT_FORMAT_INT_MAX	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_INT_MAX = 0x7fffffff$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_SHADER_INPUT_FORMAT_OTHER	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_OTHER = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_SHADER_INPUT_FORMAT_UINT16	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_UINT16 = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_SHADER_INPUT_FORMAT_UINT8	spirv_msl.hpp	/^	MSL_SHADER_INPUT_FORMAT_UINT8 = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_TFOP	spirv_msl.cpp	7686;"	d	file:
MSL_UFOP	spirv_msl.cpp	7690;"	d	file:
MSL_UNORD_BOP	spirv_msl.cpp	7691;"	d	file:
MSL_UOP	spirv_msl.cpp	7684;"	d	file:
MSL_VERTEX_FORMAT_OTHER	spirv_msl.hpp	/^	MSL_VERTEX_FORMAT_OTHER = MSL_SHADER_INPUT_FORMAT_OTHER,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_VERTEX_FORMAT_UINT16	spirv_msl.hpp	/^	MSL_VERTEX_FORMAT_UINT16 = MSL_SHADER_INPUT_FORMAT_UINT16,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MSL_VERTEX_FORMAT_UINT8	spirv_msl.hpp	/^	MSL_VERTEX_FORMAT_UINT8 = MSL_SHADER_INPUT_FORMAT_UINT8,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::MSLShaderInputFormat
MagicNumber	spirv.hpp	/^static const unsigned int MagicNumber = 0x07230203;$/;"	m	namespace:spv
MallocDeleter	spirv_cross_containers.hpp	/^	struct MallocDeleter$/;"	s	class:SPIRV_CROSS_NAMESPACE::ObjectPool
Mediump	spirv_glsl.hpp	/^			Mediump,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::Precision
MemberSorter	spirv_msl.cpp	/^CompilerMSL::MemberSorter::MemberSorter(SPIRType &t, Meta &m, SortAspect sa)$/;"	f	class:CompilerMSL::MemberSorter
MemberSorter	spirv_msl.hpp	/^	struct MemberSorter$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
MemoryAccessAlignedMask	spirv.hpp	/^    MemoryAccessAlignedMask = 0x00000002,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessAlignedShift	spirv.hpp	/^    MemoryAccessAlignedShift = 1,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMakePointerAvailableKHRMask	spirv.hpp	/^    MemoryAccessMakePointerAvailableKHRMask = 0x00000008,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMakePointerAvailableKHRShift	spirv.hpp	/^    MemoryAccessMakePointerAvailableKHRShift = 3,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMakePointerAvailableMask	spirv.hpp	/^    MemoryAccessMakePointerAvailableMask = 0x00000008,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMakePointerAvailableShift	spirv.hpp	/^    MemoryAccessMakePointerAvailableShift = 3,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMakePointerVisibleKHRMask	spirv.hpp	/^    MemoryAccessMakePointerVisibleKHRMask = 0x00000010,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMakePointerVisibleKHRShift	spirv.hpp	/^    MemoryAccessMakePointerVisibleKHRShift = 4,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMakePointerVisibleMask	spirv.hpp	/^    MemoryAccessMakePointerVisibleMask = 0x00000010,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMakePointerVisibleShift	spirv.hpp	/^    MemoryAccessMakePointerVisibleShift = 4,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessMask	spirv.hpp	/^enum MemoryAccessMask {$/;"	g	namespace:spv
MemoryAccessMaskNone	spirv.hpp	/^    MemoryAccessMaskNone = 0,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessMax	spirv.hpp	/^    MemoryAccessMax = 0x7fffffff,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessNonPrivatePointerKHRMask	spirv.hpp	/^    MemoryAccessNonPrivatePointerKHRMask = 0x00000020,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessNonPrivatePointerKHRShift	spirv.hpp	/^    MemoryAccessNonPrivatePointerKHRShift = 5,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessNonPrivatePointerMask	spirv.hpp	/^    MemoryAccessNonPrivatePointerMask = 0x00000020,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessNonPrivatePointerShift	spirv.hpp	/^    MemoryAccessNonPrivatePointerShift = 5,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessNontemporalMask	spirv.hpp	/^    MemoryAccessNontemporalMask = 0x00000004,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessNontemporalShift	spirv.hpp	/^    MemoryAccessNontemporalShift = 2,$/;"	e	enum:spv::MemoryAccessShift
MemoryAccessShift	spirv.hpp	/^enum MemoryAccessShift {$/;"	g	namespace:spv
MemoryAccessVolatileMask	spirv.hpp	/^    MemoryAccessVolatileMask = 0x00000001,$/;"	e	enum:spv::MemoryAccessMask
MemoryAccessVolatileShift	spirv.hpp	/^    MemoryAccessVolatileShift = 0,$/;"	e	enum:spv::MemoryAccessShift
MemoryModel	spirv.hpp	/^enum MemoryModel {$/;"	g	namespace:spv
MemoryModelGLSL450	spirv.hpp	/^    MemoryModelGLSL450 = 1,$/;"	e	enum:spv::MemoryModel
MemoryModelMax	spirv.hpp	/^    MemoryModelMax = 0x7fffffff,$/;"	e	enum:spv::MemoryModel
MemoryModelOpenCL	spirv.hpp	/^    MemoryModelOpenCL = 2,$/;"	e	enum:spv::MemoryModel
MemoryModelSimple	spirv.hpp	/^    MemoryModelSimple = 0,$/;"	e	enum:spv::MemoryModel
MemoryModelVulkan	spirv.hpp	/^    MemoryModelVulkan = 3,$/;"	e	enum:spv::MemoryModel
MemoryModelVulkanKHR	spirv.hpp	/^    MemoryModelVulkanKHR = 3,$/;"	e	enum:spv::MemoryModel
MemorySemanticsAcquireMask	spirv.hpp	/^    MemorySemanticsAcquireMask = 0x00000002,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAcquireReleaseMask	spirv.hpp	/^    MemorySemanticsAcquireReleaseMask = 0x00000008,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAcquireReleaseShift	spirv.hpp	/^    MemorySemanticsAcquireReleaseShift = 3,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsAcquireShift	spirv.hpp	/^    MemorySemanticsAcquireShift = 1,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsAtomicCounterMemoryMask	spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryMask = 0x00000400,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsAtomicCounterMemoryShift	spirv.hpp	/^    MemorySemanticsAtomicCounterMemoryShift = 10,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsCrossWorkgroupMemoryMask	spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsCrossWorkgroupMemoryShift	spirv.hpp	/^    MemorySemanticsCrossWorkgroupMemoryShift = 9,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsImageMemoryMask	spirv.hpp	/^    MemorySemanticsImageMemoryMask = 0x00000800,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsImageMemoryShift	spirv.hpp	/^    MemorySemanticsImageMemoryShift = 11,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMakeAvailableKHRMask	spirv.hpp	/^    MemorySemanticsMakeAvailableKHRMask = 0x00002000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMakeAvailableKHRShift	spirv.hpp	/^    MemorySemanticsMakeAvailableKHRShift = 13,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMakeAvailableMask	spirv.hpp	/^    MemorySemanticsMakeAvailableMask = 0x00002000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMakeAvailableShift	spirv.hpp	/^    MemorySemanticsMakeAvailableShift = 13,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMakeVisibleKHRMask	spirv.hpp	/^    MemorySemanticsMakeVisibleKHRMask = 0x00004000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMakeVisibleKHRShift	spirv.hpp	/^    MemorySemanticsMakeVisibleKHRShift = 14,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMakeVisibleMask	spirv.hpp	/^    MemorySemanticsMakeVisibleMask = 0x00004000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMakeVisibleShift	spirv.hpp	/^    MemorySemanticsMakeVisibleShift = 14,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsMask	spirv.hpp	/^enum MemorySemanticsMask {$/;"	g	namespace:spv
MemorySemanticsMaskNone	spirv.hpp	/^    MemorySemanticsMaskNone = 0,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsMax	spirv.hpp	/^    MemorySemanticsMax = 0x7fffffff,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsOutputMemoryKHRMask	spirv.hpp	/^    MemorySemanticsOutputMemoryKHRMask = 0x00001000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsOutputMemoryKHRShift	spirv.hpp	/^    MemorySemanticsOutputMemoryKHRShift = 12,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsOutputMemoryMask	spirv.hpp	/^    MemorySemanticsOutputMemoryMask = 0x00001000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsOutputMemoryShift	spirv.hpp	/^    MemorySemanticsOutputMemoryShift = 12,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsReleaseMask	spirv.hpp	/^    MemorySemanticsReleaseMask = 0x00000004,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsReleaseShift	spirv.hpp	/^    MemorySemanticsReleaseShift = 2,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsSequentiallyConsistentMask	spirv.hpp	/^    MemorySemanticsSequentiallyConsistentMask = 0x00000010,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsSequentiallyConsistentShift	spirv.hpp	/^    MemorySemanticsSequentiallyConsistentShift = 4,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsShift	spirv.hpp	/^enum MemorySemanticsShift {$/;"	g	namespace:spv
MemorySemanticsSubgroupMemoryMask	spirv.hpp	/^    MemorySemanticsSubgroupMemoryMask = 0x00000080,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsSubgroupMemoryShift	spirv.hpp	/^    MemorySemanticsSubgroupMemoryShift = 7,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsUniformMemoryMask	spirv.hpp	/^    MemorySemanticsUniformMemoryMask = 0x00000040,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsUniformMemoryShift	spirv.hpp	/^    MemorySemanticsUniformMemoryShift = 6,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsVolatileMask	spirv.hpp	/^    MemorySemanticsVolatileMask = 0x00008000,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsVolatileShift	spirv.hpp	/^    MemorySemanticsVolatileShift = 15,$/;"	e	enum:spv::MemorySemanticsShift
MemorySemanticsWorkgroupMemoryMask	spirv.hpp	/^    MemorySemanticsWorkgroupMemoryMask = 0x00000100,$/;"	e	enum:spv::MemorySemanticsMask
MemorySemanticsWorkgroupMemoryShift	spirv.hpp	/^    MemorySemanticsWorkgroupMemoryShift = 8,$/;"	e	enum:spv::MemorySemanticsShift
Merge	spirv_common.hpp	/^	enum Merge$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
MergeLoop	spirv_common.hpp	/^		MergeLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Merge
MergeNone	spirv_common.hpp	/^		MergeNone,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Merge
MergeSelection	spirv_common.hpp	/^		MergeSelection$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Merge
MergeToDirectForLoop	spirv_common.hpp	/^		MergeToDirectForLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Method
MergeToSelectContinueForLoop	spirv_common.hpp	/^		MergeToSelectContinueForLoop$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Method
MergeToSelectForLoop	spirv_common.hpp	/^		MergeToSelectForLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Method
Meta	spirv_common.hpp	/^struct Meta$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Method	spirv_common.hpp	/^	enum Method$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
MultiSelect	spirv_common.hpp	/^		MultiSelect, \/\/ Block ends with switch statement.$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
NV_gpu_shader_5	spirv_glsl.hpp	/^			NV_gpu_shader_5,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
NV_shader_thread_group	spirv_glsl.hpp	/^			NV_shader_thread_group,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
NV_shader_thread_shuffle	spirv_glsl.hpp	/^			NV_shader_thread_shuffle,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Candidate
Neutral	spirv_msl.hpp	/^		Neutral,$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::TriState
No	spirv_msl.hpp	/^		No,$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::TriState
NonSemanticDebugPrintf	spirv_common.hpp	/^		NonSemanticDebugPrintf$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
None	spirv_hlsl.cpp	/^	None = 0,$/;"	m	class:ImageFormatNormalizedState	file:
None	spirv_msl.hpp	/^			None = 0,$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
NumSubgroups	spirv_glsl.hpp	/^			NumSubgroups = 4,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
OBJECTS	Makefile	/^OBJECTS := $(SOURCES:.cpp=.o)$/;"	m
Object	spirv_reflect.cpp	/^	Object,$/;"	m	class:simple_json::Type	file:
ObjectPool	spirv_cross_containers.hpp	/^	explicit ObjectPool(unsigned start_object_count_ = 16)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ObjectPool
ObjectPool	spirv_cross_containers.hpp	/^class ObjectPool : public ObjectPoolBase$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
ObjectPoolBase	spirv_cross_containers.hpp	/^class ObjectPoolBase$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
ObjectPoolGroup	spirv_common.hpp	/^struct ObjectPoolGroup$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Offset	spirv_msl.hpp	/^			Offset$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter::SortAspect
Op	spirv.hpp	/^enum Op {$/;"	g	namespace:spv
OpAbsISubINTEL	spirv.hpp	/^    OpAbsISubINTEL = 5587,$/;"	e	enum:spv::Op
OpAbsUSubINTEL	spirv.hpp	/^    OpAbsUSubINTEL = 5588,$/;"	e	enum:spv::Op
OpAccessChain	spirv.hpp	/^    OpAccessChain = 65,$/;"	e	enum:spv::Op
OpAll	spirv.hpp	/^    OpAll = 155,$/;"	e	enum:spv::Op
OpAny	spirv.hpp	/^    OpAny = 154,$/;"	e	enum:spv::Op
OpArbitraryFloatACosINTEL	spirv.hpp	/^    OpArbitraryFloatACosINTEL = 5875,$/;"	e	enum:spv::Op
OpArbitraryFloatACosPiINTEL	spirv.hpp	/^    OpArbitraryFloatACosPiINTEL = 5876,$/;"	e	enum:spv::Op
OpArbitraryFloatASinINTEL	spirv.hpp	/^    OpArbitraryFloatASinINTEL = 5873,$/;"	e	enum:spv::Op
OpArbitraryFloatASinPiINTEL	spirv.hpp	/^    OpArbitraryFloatASinPiINTEL = 5874,$/;"	e	enum:spv::Op
OpArbitraryFloatATan2INTEL	spirv.hpp	/^    OpArbitraryFloatATan2INTEL = 5879,$/;"	e	enum:spv::Op
OpArbitraryFloatATanINTEL	spirv.hpp	/^    OpArbitraryFloatATanINTEL = 5877,$/;"	e	enum:spv::Op
OpArbitraryFloatATanPiINTEL	spirv.hpp	/^    OpArbitraryFloatATanPiINTEL = 5878,$/;"	e	enum:spv::Op
OpArbitraryFloatAddINTEL	spirv.hpp	/^    OpArbitraryFloatAddINTEL = 5846,$/;"	e	enum:spv::Op
OpArbitraryFloatCastFromIntINTEL	spirv.hpp	/^    OpArbitraryFloatCastFromIntINTEL = 5842,$/;"	e	enum:spv::Op
OpArbitraryFloatCastINTEL	spirv.hpp	/^    OpArbitraryFloatCastINTEL = 5841,$/;"	e	enum:spv::Op
OpArbitraryFloatCastToIntINTEL	spirv.hpp	/^    OpArbitraryFloatCastToIntINTEL = 5843,$/;"	e	enum:spv::Op
OpArbitraryFloatCbrtINTEL	spirv.hpp	/^    OpArbitraryFloatCbrtINTEL = 5857,$/;"	e	enum:spv::Op
OpArbitraryFloatCosINTEL	spirv.hpp	/^    OpArbitraryFloatCosINTEL = 5869,$/;"	e	enum:spv::Op
OpArbitraryFloatCosPiINTEL	spirv.hpp	/^    OpArbitraryFloatCosPiINTEL = 5872,$/;"	e	enum:spv::Op
OpArbitraryFloatDivINTEL	spirv.hpp	/^    OpArbitraryFloatDivINTEL = 5849,$/;"	e	enum:spv::Op
OpArbitraryFloatEQINTEL	spirv.hpp	/^    OpArbitraryFloatEQINTEL = 5854,$/;"	e	enum:spv::Op
OpArbitraryFloatExp10INTEL	spirv.hpp	/^    OpArbitraryFloatExp10INTEL = 5866,$/;"	e	enum:spv::Op
OpArbitraryFloatExp2INTEL	spirv.hpp	/^    OpArbitraryFloatExp2INTEL = 5865,$/;"	e	enum:spv::Op
OpArbitraryFloatExpINTEL	spirv.hpp	/^    OpArbitraryFloatExpINTEL = 5864,$/;"	e	enum:spv::Op
OpArbitraryFloatExpm1INTEL	spirv.hpp	/^    OpArbitraryFloatExpm1INTEL = 5867,$/;"	e	enum:spv::Op
OpArbitraryFloatGEINTEL	spirv.hpp	/^    OpArbitraryFloatGEINTEL = 5851,$/;"	e	enum:spv::Op
OpArbitraryFloatGTINTEL	spirv.hpp	/^    OpArbitraryFloatGTINTEL = 5850,$/;"	e	enum:spv::Op
OpArbitraryFloatHypotINTEL	spirv.hpp	/^    OpArbitraryFloatHypotINTEL = 5858,$/;"	e	enum:spv::Op
OpArbitraryFloatLEINTEL	spirv.hpp	/^    OpArbitraryFloatLEINTEL = 5853,$/;"	e	enum:spv::Op
OpArbitraryFloatLTINTEL	spirv.hpp	/^    OpArbitraryFloatLTINTEL = 5852,$/;"	e	enum:spv::Op
OpArbitraryFloatLog10INTEL	spirv.hpp	/^    OpArbitraryFloatLog10INTEL = 5862,$/;"	e	enum:spv::Op
OpArbitraryFloatLog1pINTEL	spirv.hpp	/^    OpArbitraryFloatLog1pINTEL = 5863,$/;"	e	enum:spv::Op
OpArbitraryFloatLog2INTEL	spirv.hpp	/^    OpArbitraryFloatLog2INTEL = 5861,$/;"	e	enum:spv::Op
OpArbitraryFloatLogINTEL	spirv.hpp	/^    OpArbitraryFloatLogINTEL = 5860,$/;"	e	enum:spv::Op
OpArbitraryFloatMulINTEL	spirv.hpp	/^    OpArbitraryFloatMulINTEL = 5848,$/;"	e	enum:spv::Op
OpArbitraryFloatPowINTEL	spirv.hpp	/^    OpArbitraryFloatPowINTEL = 5880,$/;"	e	enum:spv::Op
OpArbitraryFloatPowNINTEL	spirv.hpp	/^    OpArbitraryFloatPowNINTEL = 5882,$/;"	e	enum:spv::Op
OpArbitraryFloatPowRINTEL	spirv.hpp	/^    OpArbitraryFloatPowRINTEL = 5881,$/;"	e	enum:spv::Op
OpArbitraryFloatRSqrtINTEL	spirv.hpp	/^    OpArbitraryFloatRSqrtINTEL = 5856,$/;"	e	enum:spv::Op
OpArbitraryFloatRecipINTEL	spirv.hpp	/^    OpArbitraryFloatRecipINTEL = 5855,$/;"	e	enum:spv::Op
OpArbitraryFloatSinCosINTEL	spirv.hpp	/^    OpArbitraryFloatSinCosINTEL = 5870,$/;"	e	enum:spv::Op
OpArbitraryFloatSinCosPiINTEL	spirv.hpp	/^    OpArbitraryFloatSinCosPiINTEL = 5840,$/;"	e	enum:spv::Op
OpArbitraryFloatSinINTEL	spirv.hpp	/^    OpArbitraryFloatSinINTEL = 5868,$/;"	e	enum:spv::Op
OpArbitraryFloatSinPiINTEL	spirv.hpp	/^    OpArbitraryFloatSinPiINTEL = 5871,$/;"	e	enum:spv::Op
OpArbitraryFloatSqrtINTEL	spirv.hpp	/^    OpArbitraryFloatSqrtINTEL = 5859,$/;"	e	enum:spv::Op
OpArbitraryFloatSubINTEL	spirv.hpp	/^    OpArbitraryFloatSubINTEL = 5847,$/;"	e	enum:spv::Op
OpArrayLength	spirv.hpp	/^    OpArrayLength = 68,$/;"	e	enum:spv::Op
OpAsmCallINTEL	spirv.hpp	/^    OpAsmCallINTEL = 5611,$/;"	e	enum:spv::Op
OpAsmINTEL	spirv.hpp	/^    OpAsmINTEL = 5610,$/;"	e	enum:spv::Op
OpAsmTargetINTEL	spirv.hpp	/^    OpAsmTargetINTEL = 5609,$/;"	e	enum:spv::Op
OpAssumeTrueKHR	spirv.hpp	/^    OpAssumeTrueKHR = 5630,$/;"	e	enum:spv::Op
OpAtomicAnd	spirv.hpp	/^    OpAtomicAnd = 240,$/;"	e	enum:spv::Op
OpAtomicCompareExchange	spirv.hpp	/^    OpAtomicCompareExchange = 230,$/;"	e	enum:spv::Op
OpAtomicCompareExchangeWeak	spirv.hpp	/^    OpAtomicCompareExchangeWeak = 231,$/;"	e	enum:spv::Op
OpAtomicExchange	spirv.hpp	/^    OpAtomicExchange = 229,$/;"	e	enum:spv::Op
OpAtomicFAddEXT	spirv.hpp	/^    OpAtomicFAddEXT = 6035,$/;"	e	enum:spv::Op
OpAtomicFMaxEXT	spirv.hpp	/^    OpAtomicFMaxEXT = 5615,$/;"	e	enum:spv::Op
OpAtomicFMinEXT	spirv.hpp	/^    OpAtomicFMinEXT = 5614,$/;"	e	enum:spv::Op
OpAtomicFlagClear	spirv.hpp	/^    OpAtomicFlagClear = 319,$/;"	e	enum:spv::Op
OpAtomicFlagTestAndSet	spirv.hpp	/^    OpAtomicFlagTestAndSet = 318,$/;"	e	enum:spv::Op
OpAtomicIAdd	spirv.hpp	/^    OpAtomicIAdd = 234,$/;"	e	enum:spv::Op
OpAtomicIDecrement	spirv.hpp	/^    OpAtomicIDecrement = 233,$/;"	e	enum:spv::Op
OpAtomicIIncrement	spirv.hpp	/^    OpAtomicIIncrement = 232,$/;"	e	enum:spv::Op
OpAtomicISub	spirv.hpp	/^    OpAtomicISub = 235,$/;"	e	enum:spv::Op
OpAtomicLoad	spirv.hpp	/^    OpAtomicLoad = 227,$/;"	e	enum:spv::Op
OpAtomicOr	spirv.hpp	/^    OpAtomicOr = 241,$/;"	e	enum:spv::Op
OpAtomicSMax	spirv.hpp	/^    OpAtomicSMax = 238,$/;"	e	enum:spv::Op
OpAtomicSMin	spirv.hpp	/^    OpAtomicSMin = 236,$/;"	e	enum:spv::Op
OpAtomicStore	spirv.hpp	/^    OpAtomicStore = 228,$/;"	e	enum:spv::Op
OpAtomicUMax	spirv.hpp	/^    OpAtomicUMax = 239,$/;"	e	enum:spv::Op
OpAtomicUMin	spirv.hpp	/^    OpAtomicUMin = 237,$/;"	e	enum:spv::Op
OpAtomicXor	spirv.hpp	/^    OpAtomicXor = 242,$/;"	e	enum:spv::Op
OpBeginInvocationInterlockEXT	spirv.hpp	/^    OpBeginInvocationInterlockEXT = 5364,$/;"	e	enum:spv::Op
OpBitCount	spirv.hpp	/^    OpBitCount = 205,$/;"	e	enum:spv::Op
OpBitFieldInsert	spirv.hpp	/^    OpBitFieldInsert = 201,$/;"	e	enum:spv::Op
OpBitFieldSExtract	spirv.hpp	/^    OpBitFieldSExtract = 202,$/;"	e	enum:spv::Op
OpBitFieldUExtract	spirv.hpp	/^    OpBitFieldUExtract = 203,$/;"	e	enum:spv::Op
OpBitReverse	spirv.hpp	/^    OpBitReverse = 204,$/;"	e	enum:spv::Op
OpBitcast	spirv.hpp	/^    OpBitcast = 124,$/;"	e	enum:spv::Op
OpBitwiseAnd	spirv.hpp	/^    OpBitwiseAnd = 199,$/;"	e	enum:spv::Op
OpBitwiseOr	spirv.hpp	/^    OpBitwiseOr = 197,$/;"	e	enum:spv::Op
OpBitwiseXor	spirv.hpp	/^    OpBitwiseXor = 198,$/;"	e	enum:spv::Op
OpBranch	spirv.hpp	/^    OpBranch = 249,$/;"	e	enum:spv::Op
OpBranchConditional	spirv.hpp	/^    OpBranchConditional = 250,$/;"	e	enum:spv::Op
OpBuildNDRange	spirv.hpp	/^    OpBuildNDRange = 304,$/;"	e	enum:spv::Op
OpCapability	spirv.hpp	/^    OpCapability = 17,$/;"	e	enum:spv::Op
OpCaptureEventProfilingInfo	spirv.hpp	/^    OpCaptureEventProfilingInfo = 302,$/;"	e	enum:spv::Op
OpCodeMask	spirv.hpp	/^static const unsigned int OpCodeMask = 0xffff;$/;"	m	namespace:spv
OpCodePreprocessor	spirv_msl.hpp	/^		OpCodePreprocessor(CompilerMSL &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
OpCodePreprocessor	spirv_msl.hpp	/^	struct OpCodePreprocessor : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
OpCommitReadPipe	spirv.hpp	/^    OpCommitReadPipe = 280,$/;"	e	enum:spv::Op
OpCommitWritePipe	spirv.hpp	/^    OpCommitWritePipe = 281,$/;"	e	enum:spv::Op
OpCompositeConstruct	spirv.hpp	/^    OpCompositeConstruct = 80,$/;"	e	enum:spv::Op
OpCompositeExtract	spirv.hpp	/^    OpCompositeExtract = 81,$/;"	e	enum:spv::Op
OpCompositeInsert	spirv.hpp	/^    OpCompositeInsert = 82,$/;"	e	enum:spv::Op
OpConstant	spirv.hpp	/^    OpConstant = 43,$/;"	e	enum:spv::Op
OpConstantComposite	spirv.hpp	/^    OpConstantComposite = 44,$/;"	e	enum:spv::Op
OpConstantCompositeContinuedINTEL	spirv.hpp	/^    OpConstantCompositeContinuedINTEL = 6091,$/;"	e	enum:spv::Op
OpConstantFalse	spirv.hpp	/^    OpConstantFalse = 42,$/;"	e	enum:spv::Op
OpConstantFunctionPointerINTEL	spirv.hpp	/^    OpConstantFunctionPointerINTEL = 5600,$/;"	e	enum:spv::Op
OpConstantNull	spirv.hpp	/^    OpConstantNull = 46,$/;"	e	enum:spv::Op
OpConstantPipeStorage	spirv.hpp	/^    OpConstantPipeStorage = 323,$/;"	e	enum:spv::Op
OpConstantSampler	spirv.hpp	/^    OpConstantSampler = 45,$/;"	e	enum:spv::Op
OpConstantTrue	spirv.hpp	/^    OpConstantTrue = 41,$/;"	e	enum:spv::Op
OpControlBarrier	spirv.hpp	/^    OpControlBarrier = 224,$/;"	e	enum:spv::Op
OpConvertFToS	spirv.hpp	/^    OpConvertFToS = 110,$/;"	e	enum:spv::Op
OpConvertFToU	spirv.hpp	/^    OpConvertFToU = 109,$/;"	e	enum:spv::Op
OpConvertImageToUNV	spirv.hpp	/^    OpConvertImageToUNV = 5393,$/;"	e	enum:spv::Op
OpConvertPtrToU	spirv.hpp	/^    OpConvertPtrToU = 117,$/;"	e	enum:spv::Op
OpConvertSToF	spirv.hpp	/^    OpConvertSToF = 111,$/;"	e	enum:spv::Op
OpConvertSampledImageToUNV	spirv.hpp	/^    OpConvertSampledImageToUNV = 5396,$/;"	e	enum:spv::Op
OpConvertSamplerToUNV	spirv.hpp	/^    OpConvertSamplerToUNV = 5394,$/;"	e	enum:spv::Op
OpConvertUToAccelerationStructureKHR	spirv.hpp	/^    OpConvertUToAccelerationStructureKHR = 4447,$/;"	e	enum:spv::Op
OpConvertUToF	spirv.hpp	/^    OpConvertUToF = 112,$/;"	e	enum:spv::Op
OpConvertUToImageNV	spirv.hpp	/^    OpConvertUToImageNV = 5391,$/;"	e	enum:spv::Op
OpConvertUToPtr	spirv.hpp	/^    OpConvertUToPtr = 120,$/;"	e	enum:spv::Op
OpConvertUToSampledImageNV	spirv.hpp	/^    OpConvertUToSampledImageNV = 5395,$/;"	e	enum:spv::Op
OpConvertUToSamplerNV	spirv.hpp	/^    OpConvertUToSamplerNV = 5392,$/;"	e	enum:spv::Op
OpCooperativeMatrixLengthNV	spirv.hpp	/^    OpCooperativeMatrixLengthNV = 5362,$/;"	e	enum:spv::Op
OpCooperativeMatrixLoadNV	spirv.hpp	/^    OpCooperativeMatrixLoadNV = 5359,$/;"	e	enum:spv::Op
OpCooperativeMatrixMulAddNV	spirv.hpp	/^    OpCooperativeMatrixMulAddNV = 5361,$/;"	e	enum:spv::Op
OpCooperativeMatrixStoreNV	spirv.hpp	/^    OpCooperativeMatrixStoreNV = 5360,$/;"	e	enum:spv::Op
OpCopyLogical	spirv.hpp	/^    OpCopyLogical = 400,$/;"	e	enum:spv::Op
OpCopyMemory	spirv.hpp	/^    OpCopyMemory = 63,$/;"	e	enum:spv::Op
OpCopyMemorySized	spirv.hpp	/^    OpCopyMemorySized = 64,$/;"	e	enum:spv::Op
OpCopyObject	spirv.hpp	/^    OpCopyObject = 83,$/;"	e	enum:spv::Op
OpCreatePipeFromPipeStorage	spirv.hpp	/^    OpCreatePipeFromPipeStorage = 324,$/;"	e	enum:spv::Op
OpCreateUserEvent	spirv.hpp	/^    OpCreateUserEvent = 299,$/;"	e	enum:spv::Op
OpCrossWorkgroupCastToPtrINTEL	spirv.hpp	/^    OpCrossWorkgroupCastToPtrINTEL = 5938,$/;"	e	enum:spv::Op
OpDPdx	spirv.hpp	/^    OpDPdx = 207,$/;"	e	enum:spv::Op
OpDPdxCoarse	spirv.hpp	/^    OpDPdxCoarse = 213,$/;"	e	enum:spv::Op
OpDPdxFine	spirv.hpp	/^    OpDPdxFine = 210,$/;"	e	enum:spv::Op
OpDPdy	spirv.hpp	/^    OpDPdy = 208,$/;"	e	enum:spv::Op
OpDPdyCoarse	spirv.hpp	/^    OpDPdyCoarse = 214,$/;"	e	enum:spv::Op
OpDPdyFine	spirv.hpp	/^    OpDPdyFine = 211,$/;"	e	enum:spv::Op
OpDecorate	spirv.hpp	/^    OpDecorate = 71,$/;"	e	enum:spv::Op
OpDecorateId	spirv.hpp	/^    OpDecorateId = 332,$/;"	e	enum:spv::Op
OpDecorateString	spirv.hpp	/^    OpDecorateString = 5632,$/;"	e	enum:spv::Op
OpDecorateStringGOOGLE	spirv.hpp	/^    OpDecorateStringGOOGLE = 5632,$/;"	e	enum:spv::Op
OpDecorationGroup	spirv.hpp	/^    OpDecorationGroup = 73,$/;"	e	enum:spv::Op
OpDemoteToHelperInvocation	spirv.hpp	/^    OpDemoteToHelperInvocation = 5380,$/;"	e	enum:spv::Op
OpDemoteToHelperInvocationEXT	spirv.hpp	/^    OpDemoteToHelperInvocationEXT = 5380,$/;"	e	enum:spv::Op
OpDot	spirv.hpp	/^    OpDot = 148,$/;"	e	enum:spv::Op
OpEmitStreamVertex	spirv.hpp	/^    OpEmitStreamVertex = 220,$/;"	e	enum:spv::Op
OpEmitVertex	spirv.hpp	/^    OpEmitVertex = 218,$/;"	e	enum:spv::Op
OpEndInvocationInterlockEXT	spirv.hpp	/^    OpEndInvocationInterlockEXT = 5365,$/;"	e	enum:spv::Op
OpEndPrimitive	spirv.hpp	/^    OpEndPrimitive = 219,$/;"	e	enum:spv::Op
OpEndStreamPrimitive	spirv.hpp	/^    OpEndStreamPrimitive = 221,$/;"	e	enum:spv::Op
OpEnqueueKernel	spirv.hpp	/^    OpEnqueueKernel = 292,$/;"	e	enum:spv::Op
OpEnqueueMarker	spirv.hpp	/^    OpEnqueueMarker = 291,$/;"	e	enum:spv::Op
OpEntryPoint	spirv.hpp	/^    OpEntryPoint = 15,$/;"	e	enum:spv::Op
OpExecuteCallableKHR	spirv.hpp	/^    OpExecuteCallableKHR = 4446,$/;"	e	enum:spv::Op
OpExecuteCallableNV	spirv.hpp	/^    OpExecuteCallableNV = 5344,$/;"	e	enum:spv::Op
OpExecutionMode	spirv.hpp	/^    OpExecutionMode = 16,$/;"	e	enum:spv::Op
OpExecutionModeId	spirv.hpp	/^    OpExecutionModeId = 331,$/;"	e	enum:spv::Op
OpExpectKHR	spirv.hpp	/^    OpExpectKHR = 5631,$/;"	e	enum:spv::Op
OpExtInst	spirv.hpp	/^    OpExtInst = 12,$/;"	e	enum:spv::Op
OpExtInstImport	spirv.hpp	/^    OpExtInstImport = 11,$/;"	e	enum:spv::Op
OpExtension	spirv.hpp	/^    OpExtension = 10,$/;"	e	enum:spv::Op
OpFAdd	spirv.hpp	/^    OpFAdd = 129,$/;"	e	enum:spv::Op
OpFConvert	spirv.hpp	/^    OpFConvert = 115,$/;"	e	enum:spv::Op
OpFDiv	spirv.hpp	/^    OpFDiv = 136,$/;"	e	enum:spv::Op
OpFMod	spirv.hpp	/^    OpFMod = 141,$/;"	e	enum:spv::Op
OpFMul	spirv.hpp	/^    OpFMul = 133,$/;"	e	enum:spv::Op
OpFNegate	spirv.hpp	/^    OpFNegate = 127,$/;"	e	enum:spv::Op
OpFOrdEqual	spirv.hpp	/^    OpFOrdEqual = 180,$/;"	e	enum:spv::Op
OpFOrdGreaterThan	spirv.hpp	/^    OpFOrdGreaterThan = 186,$/;"	e	enum:spv::Op
OpFOrdGreaterThanEqual	spirv.hpp	/^    OpFOrdGreaterThanEqual = 190,$/;"	e	enum:spv::Op
OpFOrdLessThan	spirv.hpp	/^    OpFOrdLessThan = 184,$/;"	e	enum:spv::Op
OpFOrdLessThanEqual	spirv.hpp	/^    OpFOrdLessThanEqual = 188,$/;"	e	enum:spv::Op
OpFOrdNotEqual	spirv.hpp	/^    OpFOrdNotEqual = 182,$/;"	e	enum:spv::Op
OpFPGARegINTEL	spirv.hpp	/^    OpFPGARegINTEL = 5949,$/;"	e	enum:spv::Op
OpFRem	spirv.hpp	/^    OpFRem = 140,$/;"	e	enum:spv::Op
OpFSub	spirv.hpp	/^    OpFSub = 131,$/;"	e	enum:spv::Op
OpFUnordEqual	spirv.hpp	/^    OpFUnordEqual = 181,$/;"	e	enum:spv::Op
OpFUnordGreaterThan	spirv.hpp	/^    OpFUnordGreaterThan = 187,$/;"	e	enum:spv::Op
OpFUnordGreaterThanEqual	spirv.hpp	/^    OpFUnordGreaterThanEqual = 191,$/;"	e	enum:spv::Op
OpFUnordLessThan	spirv.hpp	/^    OpFUnordLessThan = 185,$/;"	e	enum:spv::Op
OpFUnordLessThanEqual	spirv.hpp	/^    OpFUnordLessThanEqual = 189,$/;"	e	enum:spv::Op
OpFUnordNotEqual	spirv.hpp	/^    OpFUnordNotEqual = 183,$/;"	e	enum:spv::Op
OpFixedCosINTEL	spirv.hpp	/^    OpFixedCosINTEL = 5927,$/;"	e	enum:spv::Op
OpFixedCosPiINTEL	spirv.hpp	/^    OpFixedCosPiINTEL = 5930,$/;"	e	enum:spv::Op
OpFixedExpINTEL	spirv.hpp	/^    OpFixedExpINTEL = 5933,$/;"	e	enum:spv::Op
OpFixedLogINTEL	spirv.hpp	/^    OpFixedLogINTEL = 5932,$/;"	e	enum:spv::Op
OpFixedRecipINTEL	spirv.hpp	/^    OpFixedRecipINTEL = 5924,$/;"	e	enum:spv::Op
OpFixedRsqrtINTEL	spirv.hpp	/^    OpFixedRsqrtINTEL = 5925,$/;"	e	enum:spv::Op
OpFixedSinCosINTEL	spirv.hpp	/^    OpFixedSinCosINTEL = 5928,$/;"	e	enum:spv::Op
OpFixedSinCosPiINTEL	spirv.hpp	/^    OpFixedSinCosPiINTEL = 5931,$/;"	e	enum:spv::Op
OpFixedSinINTEL	spirv.hpp	/^    OpFixedSinINTEL = 5926,$/;"	e	enum:spv::Op
OpFixedSinPiINTEL	spirv.hpp	/^    OpFixedSinPiINTEL = 5929,$/;"	e	enum:spv::Op
OpFixedSqrtINTEL	spirv.hpp	/^    OpFixedSqrtINTEL = 5923,$/;"	e	enum:spv::Op
OpFragmentFetchAMD	spirv.hpp	/^    OpFragmentFetchAMD = 5012,$/;"	e	enum:spv::Op
OpFragmentMaskFetchAMD	spirv.hpp	/^    OpFragmentMaskFetchAMD = 5011,$/;"	e	enum:spv::Op
OpFunction	spirv.hpp	/^    OpFunction = 54,$/;"	e	enum:spv::Op
OpFunctionCall	spirv.hpp	/^    OpFunctionCall = 57,$/;"	e	enum:spv::Op
OpFunctionEnd	spirv.hpp	/^    OpFunctionEnd = 56,$/;"	e	enum:spv::Op
OpFunctionParameter	spirv.hpp	/^    OpFunctionParameter = 55,$/;"	e	enum:spv::Op
OpFunctionPointerCallINTEL	spirv.hpp	/^    OpFunctionPointerCallINTEL = 5601,$/;"	e	enum:spv::Op
OpFwidth	spirv.hpp	/^    OpFwidth = 209,$/;"	e	enum:spv::Op
OpFwidthCoarse	spirv.hpp	/^    OpFwidthCoarse = 215,$/;"	e	enum:spv::Op
OpFwidthFine	spirv.hpp	/^    OpFwidthFine = 212,$/;"	e	enum:spv::Op
OpGenericCastToPtr	spirv.hpp	/^    OpGenericCastToPtr = 122,$/;"	e	enum:spv::Op
OpGenericCastToPtrExplicit	spirv.hpp	/^    OpGenericCastToPtrExplicit = 123,$/;"	e	enum:spv::Op
OpGenericPtrMemSemantics	spirv.hpp	/^    OpGenericPtrMemSemantics = 69,$/;"	e	enum:spv::Op
OpGetDefaultQueue	spirv.hpp	/^    OpGetDefaultQueue = 303,$/;"	e	enum:spv::Op
OpGetKernelLocalSizeForSubgroupCount	spirv.hpp	/^    OpGetKernelLocalSizeForSubgroupCount = 325,$/;"	e	enum:spv::Op
OpGetKernelMaxNumSubgroups	spirv.hpp	/^    OpGetKernelMaxNumSubgroups = 326,$/;"	e	enum:spv::Op
OpGetKernelNDrangeMaxSubGroupSize	spirv.hpp	/^    OpGetKernelNDrangeMaxSubGroupSize = 294,$/;"	e	enum:spv::Op
OpGetKernelNDrangeSubGroupCount	spirv.hpp	/^    OpGetKernelNDrangeSubGroupCount = 293,$/;"	e	enum:spv::Op
OpGetKernelPreferredWorkGroupSizeMultiple	spirv.hpp	/^    OpGetKernelPreferredWorkGroupSizeMultiple = 296,$/;"	e	enum:spv::Op
OpGetKernelWorkGroupSize	spirv.hpp	/^    OpGetKernelWorkGroupSize = 295,$/;"	e	enum:spv::Op
OpGetMaxPipePackets	spirv.hpp	/^    OpGetMaxPipePackets = 284,$/;"	e	enum:spv::Op
OpGetNumPipePackets	spirv.hpp	/^    OpGetNumPipePackets = 283,$/;"	e	enum:spv::Op
OpGroupAll	spirv.hpp	/^    OpGroupAll = 261,$/;"	e	enum:spv::Op
OpGroupAny	spirv.hpp	/^    OpGroupAny = 262,$/;"	e	enum:spv::Op
OpGroupAsyncCopy	spirv.hpp	/^    OpGroupAsyncCopy = 259,$/;"	e	enum:spv::Op
OpGroupBroadcast	spirv.hpp	/^    OpGroupBroadcast = 263,$/;"	e	enum:spv::Op
OpGroupCommitReadPipe	spirv.hpp	/^    OpGroupCommitReadPipe = 287,$/;"	e	enum:spv::Op
OpGroupCommitWritePipe	spirv.hpp	/^    OpGroupCommitWritePipe = 288,$/;"	e	enum:spv::Op
OpGroupDecorate	spirv.hpp	/^    OpGroupDecorate = 74,$/;"	e	enum:spv::Op
OpGroupFAdd	spirv.hpp	/^    OpGroupFAdd = 265,$/;"	e	enum:spv::Op
OpGroupFAddNonUniformAMD	spirv.hpp	/^    OpGroupFAddNonUniformAMD = 5001,$/;"	e	enum:spv::Op
OpGroupFMax	spirv.hpp	/^    OpGroupFMax = 269,$/;"	e	enum:spv::Op
OpGroupFMaxNonUniformAMD	spirv.hpp	/^    OpGroupFMaxNonUniformAMD = 5005,$/;"	e	enum:spv::Op
OpGroupFMin	spirv.hpp	/^    OpGroupFMin = 266,$/;"	e	enum:spv::Op
OpGroupFMinNonUniformAMD	spirv.hpp	/^    OpGroupFMinNonUniformAMD = 5002,$/;"	e	enum:spv::Op
OpGroupIAdd	spirv.hpp	/^    OpGroupIAdd = 264,$/;"	e	enum:spv::Op
OpGroupIAddNonUniformAMD	spirv.hpp	/^    OpGroupIAddNonUniformAMD = 5000,$/;"	e	enum:spv::Op
OpGroupMemberDecorate	spirv.hpp	/^    OpGroupMemberDecorate = 75,$/;"	e	enum:spv::Op
OpGroupNonUniformAll	spirv.hpp	/^    OpGroupNonUniformAll = 334,$/;"	e	enum:spv::Op
OpGroupNonUniformAllEqual	spirv.hpp	/^    OpGroupNonUniformAllEqual = 336,$/;"	e	enum:spv::Op
OpGroupNonUniformAny	spirv.hpp	/^    OpGroupNonUniformAny = 335,$/;"	e	enum:spv::Op
OpGroupNonUniformBallot	spirv.hpp	/^    OpGroupNonUniformBallot = 339,$/;"	e	enum:spv::Op
OpGroupNonUniformBallotBitCount	spirv.hpp	/^    OpGroupNonUniformBallotBitCount = 342,$/;"	e	enum:spv::Op
OpGroupNonUniformBallotBitExtract	spirv.hpp	/^    OpGroupNonUniformBallotBitExtract = 341,$/;"	e	enum:spv::Op
OpGroupNonUniformBallotFindLSB	spirv.hpp	/^    OpGroupNonUniformBallotFindLSB = 343,$/;"	e	enum:spv::Op
OpGroupNonUniformBallotFindMSB	spirv.hpp	/^    OpGroupNonUniformBallotFindMSB = 344,$/;"	e	enum:spv::Op
OpGroupNonUniformBitwiseAnd	spirv.hpp	/^    OpGroupNonUniformBitwiseAnd = 359,$/;"	e	enum:spv::Op
OpGroupNonUniformBitwiseOr	spirv.hpp	/^    OpGroupNonUniformBitwiseOr = 360,$/;"	e	enum:spv::Op
OpGroupNonUniformBitwiseXor	spirv.hpp	/^    OpGroupNonUniformBitwiseXor = 361,$/;"	e	enum:spv::Op
OpGroupNonUniformBroadcast	spirv.hpp	/^    OpGroupNonUniformBroadcast = 337,$/;"	e	enum:spv::Op
OpGroupNonUniformBroadcastFirst	spirv.hpp	/^    OpGroupNonUniformBroadcastFirst = 338,$/;"	e	enum:spv::Op
OpGroupNonUniformElect	spirv.hpp	/^    OpGroupNonUniformElect = 333,$/;"	e	enum:spv::Op
OpGroupNonUniformFAdd	spirv.hpp	/^    OpGroupNonUniformFAdd = 350,$/;"	e	enum:spv::Op
OpGroupNonUniformFMax	spirv.hpp	/^    OpGroupNonUniformFMax = 358,$/;"	e	enum:spv::Op
OpGroupNonUniformFMin	spirv.hpp	/^    OpGroupNonUniformFMin = 355,$/;"	e	enum:spv::Op
OpGroupNonUniformFMul	spirv.hpp	/^    OpGroupNonUniformFMul = 352,$/;"	e	enum:spv::Op
OpGroupNonUniformIAdd	spirv.hpp	/^    OpGroupNonUniformIAdd = 349,$/;"	e	enum:spv::Op
OpGroupNonUniformIMul	spirv.hpp	/^    OpGroupNonUniformIMul = 351,$/;"	e	enum:spv::Op
OpGroupNonUniformInverseBallot	spirv.hpp	/^    OpGroupNonUniformInverseBallot = 340,$/;"	e	enum:spv::Op
OpGroupNonUniformLogicalAnd	spirv.hpp	/^    OpGroupNonUniformLogicalAnd = 362,$/;"	e	enum:spv::Op
OpGroupNonUniformLogicalOr	spirv.hpp	/^    OpGroupNonUniformLogicalOr = 363,$/;"	e	enum:spv::Op
OpGroupNonUniformLogicalXor	spirv.hpp	/^    OpGroupNonUniformLogicalXor = 364,$/;"	e	enum:spv::Op
OpGroupNonUniformPartitionNV	spirv.hpp	/^    OpGroupNonUniformPartitionNV = 5296,$/;"	e	enum:spv::Op
OpGroupNonUniformQuadBroadcast	spirv.hpp	/^    OpGroupNonUniformQuadBroadcast = 365,$/;"	e	enum:spv::Op
OpGroupNonUniformQuadSwap	spirv.hpp	/^    OpGroupNonUniformQuadSwap = 366,$/;"	e	enum:spv::Op
OpGroupNonUniformSMax	spirv.hpp	/^    OpGroupNonUniformSMax = 356,$/;"	e	enum:spv::Op
OpGroupNonUniformSMin	spirv.hpp	/^    OpGroupNonUniformSMin = 353,$/;"	e	enum:spv::Op
OpGroupNonUniformShuffle	spirv.hpp	/^    OpGroupNonUniformShuffle = 345,$/;"	e	enum:spv::Op
OpGroupNonUniformShuffleDown	spirv.hpp	/^    OpGroupNonUniformShuffleDown = 348,$/;"	e	enum:spv::Op
OpGroupNonUniformShuffleUp	spirv.hpp	/^    OpGroupNonUniformShuffleUp = 347,$/;"	e	enum:spv::Op
OpGroupNonUniformShuffleXor	spirv.hpp	/^    OpGroupNonUniformShuffleXor = 346,$/;"	e	enum:spv::Op
OpGroupNonUniformUMax	spirv.hpp	/^    OpGroupNonUniformUMax = 357,$/;"	e	enum:spv::Op
OpGroupNonUniformUMin	spirv.hpp	/^    OpGroupNonUniformUMin = 354,$/;"	e	enum:spv::Op
OpGroupReserveReadPipePackets	spirv.hpp	/^    OpGroupReserveReadPipePackets = 285,$/;"	e	enum:spv::Op
OpGroupReserveWritePipePackets	spirv.hpp	/^    OpGroupReserveWritePipePackets = 286,$/;"	e	enum:spv::Op
OpGroupSMax	spirv.hpp	/^    OpGroupSMax = 271,$/;"	e	enum:spv::Op
OpGroupSMaxNonUniformAMD	spirv.hpp	/^    OpGroupSMaxNonUniformAMD = 5007,$/;"	e	enum:spv::Op
OpGroupSMin	spirv.hpp	/^    OpGroupSMin = 268,$/;"	e	enum:spv::Op
OpGroupSMinNonUniformAMD	spirv.hpp	/^    OpGroupSMinNonUniformAMD = 5004,$/;"	e	enum:spv::Op
OpGroupUMax	spirv.hpp	/^    OpGroupUMax = 270,$/;"	e	enum:spv::Op
OpGroupUMaxNonUniformAMD	spirv.hpp	/^    OpGroupUMaxNonUniformAMD = 5006,$/;"	e	enum:spv::Op
OpGroupUMin	spirv.hpp	/^    OpGroupUMin = 267,$/;"	e	enum:spv::Op
OpGroupUMinNonUniformAMD	spirv.hpp	/^    OpGroupUMinNonUniformAMD = 5003,$/;"	e	enum:spv::Op
OpGroupWaitEvents	spirv.hpp	/^    OpGroupWaitEvents = 260,$/;"	e	enum:spv::Op
OpIAdd	spirv.hpp	/^    OpIAdd = 128,$/;"	e	enum:spv::Op
OpIAddCarry	spirv.hpp	/^    OpIAddCarry = 149,$/;"	e	enum:spv::Op
OpIAddSatINTEL	spirv.hpp	/^    OpIAddSatINTEL = 5589,$/;"	e	enum:spv::Op
OpIAverageINTEL	spirv.hpp	/^    OpIAverageINTEL = 5591,$/;"	e	enum:spv::Op
OpIAverageRoundedINTEL	spirv.hpp	/^    OpIAverageRoundedINTEL = 5593,$/;"	e	enum:spv::Op
OpIEqual	spirv.hpp	/^    OpIEqual = 170,$/;"	e	enum:spv::Op
OpIMul	spirv.hpp	/^    OpIMul = 132,$/;"	e	enum:spv::Op
OpIMul32x16INTEL	spirv.hpp	/^    OpIMul32x16INTEL = 5597,$/;"	e	enum:spv::Op
OpINotEqual	spirv.hpp	/^    OpINotEqual = 171,$/;"	e	enum:spv::Op
OpISub	spirv.hpp	/^    OpISub = 130,$/;"	e	enum:spv::Op
OpISubBorrow	spirv.hpp	/^    OpISubBorrow = 150,$/;"	e	enum:spv::Op
OpISubSatINTEL	spirv.hpp	/^    OpISubSatINTEL = 5595,$/;"	e	enum:spv::Op
OpIgnoreIntersectionKHR	spirv.hpp	/^    OpIgnoreIntersectionKHR = 4448,$/;"	e	enum:spv::Op
OpIgnoreIntersectionNV	spirv.hpp	/^    OpIgnoreIntersectionNV = 5335,$/;"	e	enum:spv::Op
OpImage	spirv.hpp	/^    OpImage = 100,$/;"	e	enum:spv::Op
OpImageDrefGather	spirv.hpp	/^    OpImageDrefGather = 97,$/;"	e	enum:spv::Op
OpImageFetch	spirv.hpp	/^    OpImageFetch = 95,$/;"	e	enum:spv::Op
OpImageGather	spirv.hpp	/^    OpImageGather = 96,$/;"	e	enum:spv::Op
OpImageQueryFormat	spirv.hpp	/^    OpImageQueryFormat = 101,$/;"	e	enum:spv::Op
OpImageQueryLevels	spirv.hpp	/^    OpImageQueryLevels = 106,$/;"	e	enum:spv::Op
OpImageQueryLod	spirv.hpp	/^    OpImageQueryLod = 105,$/;"	e	enum:spv::Op
OpImageQueryOrder	spirv.hpp	/^    OpImageQueryOrder = 102,$/;"	e	enum:spv::Op
OpImageQuerySamples	spirv.hpp	/^    OpImageQuerySamples = 107,$/;"	e	enum:spv::Op
OpImageQuerySize	spirv.hpp	/^    OpImageQuerySize = 104,$/;"	e	enum:spv::Op
OpImageQuerySizeLod	spirv.hpp	/^    OpImageQuerySizeLod = 103,$/;"	e	enum:spv::Op
OpImageRead	spirv.hpp	/^    OpImageRead = 98,$/;"	e	enum:spv::Op
OpImageSampleDrefExplicitLod	spirv.hpp	/^    OpImageSampleDrefExplicitLod = 90,$/;"	e	enum:spv::Op
OpImageSampleDrefImplicitLod	spirv.hpp	/^    OpImageSampleDrefImplicitLod = 89,$/;"	e	enum:spv::Op
OpImageSampleExplicitLod	spirv.hpp	/^    OpImageSampleExplicitLod = 88,$/;"	e	enum:spv::Op
OpImageSampleFootprintNV	spirv.hpp	/^    OpImageSampleFootprintNV = 5283,$/;"	e	enum:spv::Op
OpImageSampleImplicitLod	spirv.hpp	/^    OpImageSampleImplicitLod = 87,$/;"	e	enum:spv::Op
OpImageSampleProjDrefExplicitLod	spirv.hpp	/^    OpImageSampleProjDrefExplicitLod = 94,$/;"	e	enum:spv::Op
OpImageSampleProjDrefImplicitLod	spirv.hpp	/^    OpImageSampleProjDrefImplicitLod = 93,$/;"	e	enum:spv::Op
OpImageSampleProjExplicitLod	spirv.hpp	/^    OpImageSampleProjExplicitLod = 92,$/;"	e	enum:spv::Op
OpImageSampleProjImplicitLod	spirv.hpp	/^    OpImageSampleProjImplicitLod = 91,$/;"	e	enum:spv::Op
OpImageSparseDrefGather	spirv.hpp	/^    OpImageSparseDrefGather = 315,$/;"	e	enum:spv::Op
OpImageSparseFetch	spirv.hpp	/^    OpImageSparseFetch = 313,$/;"	e	enum:spv::Op
OpImageSparseGather	spirv.hpp	/^    OpImageSparseGather = 314,$/;"	e	enum:spv::Op
OpImageSparseRead	spirv.hpp	/^    OpImageSparseRead = 320,$/;"	e	enum:spv::Op
OpImageSparseSampleDrefExplicitLod	spirv.hpp	/^    OpImageSparseSampleDrefExplicitLod = 308,$/;"	e	enum:spv::Op
OpImageSparseSampleDrefImplicitLod	spirv.hpp	/^    OpImageSparseSampleDrefImplicitLod = 307,$/;"	e	enum:spv::Op
OpImageSparseSampleExplicitLod	spirv.hpp	/^    OpImageSparseSampleExplicitLod = 306,$/;"	e	enum:spv::Op
OpImageSparseSampleImplicitLod	spirv.hpp	/^    OpImageSparseSampleImplicitLod = 305,$/;"	e	enum:spv::Op
OpImageSparseSampleProjDrefExplicitLod	spirv.hpp	/^    OpImageSparseSampleProjDrefExplicitLod = 312,$/;"	e	enum:spv::Op
OpImageSparseSampleProjDrefImplicitLod	spirv.hpp	/^    OpImageSparseSampleProjDrefImplicitLod = 311,$/;"	e	enum:spv::Op
OpImageSparseSampleProjExplicitLod	spirv.hpp	/^    OpImageSparseSampleProjExplicitLod = 310,$/;"	e	enum:spv::Op
OpImageSparseSampleProjImplicitLod	spirv.hpp	/^    OpImageSparseSampleProjImplicitLod = 309,$/;"	e	enum:spv::Op
OpImageSparseTexelsResident	spirv.hpp	/^    OpImageSparseTexelsResident = 316,$/;"	e	enum:spv::Op
OpImageTexelPointer	spirv.hpp	/^    OpImageTexelPointer = 60,$/;"	e	enum:spv::Op
OpImageWrite	spirv.hpp	/^    OpImageWrite = 99,$/;"	e	enum:spv::Op
OpInBoundsAccessChain	spirv.hpp	/^    OpInBoundsAccessChain = 66,$/;"	e	enum:spv::Op
OpInBoundsPtrAccessChain	spirv.hpp	/^    OpInBoundsPtrAccessChain = 70,$/;"	e	enum:spv::Op
OpIsFinite	spirv.hpp	/^    OpIsFinite = 158,$/;"	e	enum:spv::Op
OpIsHelperInvocationEXT	spirv.hpp	/^    OpIsHelperInvocationEXT = 5381,$/;"	e	enum:spv::Op
OpIsInf	spirv.hpp	/^    OpIsInf = 157,$/;"	e	enum:spv::Op
OpIsNan	spirv.hpp	/^    OpIsNan = 156,$/;"	e	enum:spv::Op
OpIsNormal	spirv.hpp	/^    OpIsNormal = 159,$/;"	e	enum:spv::Op
OpIsValidEvent	spirv.hpp	/^    OpIsValidEvent = 300,$/;"	e	enum:spv::Op
OpIsValidReserveId	spirv.hpp	/^    OpIsValidReserveId = 282,$/;"	e	enum:spv::Op
OpKill	spirv.hpp	/^    OpKill = 252,$/;"	e	enum:spv::Op
OpLabel	spirv.hpp	/^    OpLabel = 248,$/;"	e	enum:spv::Op
OpLessOrGreater	spirv.hpp	/^    OpLessOrGreater = 161,$/;"	e	enum:spv::Op
OpLifetimeStart	spirv.hpp	/^    OpLifetimeStart = 256,$/;"	e	enum:spv::Op
OpLifetimeStop	spirv.hpp	/^    OpLifetimeStop = 257,$/;"	e	enum:spv::Op
OpLine	spirv.hpp	/^    OpLine = 8,$/;"	e	enum:spv::Op
OpLoad	spirv.hpp	/^    OpLoad = 61,$/;"	e	enum:spv::Op
OpLogicalAnd	spirv.hpp	/^    OpLogicalAnd = 167,$/;"	e	enum:spv::Op
OpLogicalEqual	spirv.hpp	/^    OpLogicalEqual = 164,$/;"	e	enum:spv::Op
OpLogicalNot	spirv.hpp	/^    OpLogicalNot = 168,$/;"	e	enum:spv::Op
OpLogicalNotEqual	spirv.hpp	/^    OpLogicalNotEqual = 165,$/;"	e	enum:spv::Op
OpLogicalOr	spirv.hpp	/^    OpLogicalOr = 166,$/;"	e	enum:spv::Op
OpLoopControlINTEL	spirv.hpp	/^    OpLoopControlINTEL = 5887,$/;"	e	enum:spv::Op
OpLoopMerge	spirv.hpp	/^    OpLoopMerge = 246,$/;"	e	enum:spv::Op
OpMatrixTimesMatrix	spirv.hpp	/^    OpMatrixTimesMatrix = 146,$/;"	e	enum:spv::Op
OpMatrixTimesScalar	spirv.hpp	/^    OpMatrixTimesScalar = 143,$/;"	e	enum:spv::Op
OpMatrixTimesVector	spirv.hpp	/^    OpMatrixTimesVector = 145,$/;"	e	enum:spv::Op
OpMax	spirv.hpp	/^    OpMax = 0x7fffffff,$/;"	e	enum:spv::Op
OpMemberDecorate	spirv.hpp	/^    OpMemberDecorate = 72,$/;"	e	enum:spv::Op
OpMemberDecorateString	spirv.hpp	/^    OpMemberDecorateString = 5633,$/;"	e	enum:spv::Op
OpMemberDecorateStringGOOGLE	spirv.hpp	/^    OpMemberDecorateStringGOOGLE = 5633,$/;"	e	enum:spv::Op
OpMemberName	spirv.hpp	/^    OpMemberName = 6,$/;"	e	enum:spv::Op
OpMemoryBarrier	spirv.hpp	/^    OpMemoryBarrier = 225,$/;"	e	enum:spv::Op
OpMemoryModel	spirv.hpp	/^    OpMemoryModel = 14,$/;"	e	enum:spv::Op
OpMemoryNamedBarrier	spirv.hpp	/^    OpMemoryNamedBarrier = 329,$/;"	e	enum:spv::Op
OpModuleProcessed	spirv.hpp	/^    OpModuleProcessed = 330,$/;"	e	enum:spv::Op
OpName	spirv.hpp	/^    OpName = 5,$/;"	e	enum:spv::Op
OpNamedBarrierInitialize	spirv.hpp	/^    OpNamedBarrierInitialize = 328,$/;"	e	enum:spv::Op
OpNoLine	spirv.hpp	/^    OpNoLine = 317,$/;"	e	enum:spv::Op
OpNop	spirv.hpp	/^    OpNop = 0,$/;"	e	enum:spv::Op
OpNot	spirv.hpp	/^    OpNot = 200,$/;"	e	enum:spv::Op
OpOrdered	spirv.hpp	/^    OpOrdered = 162,$/;"	e	enum:spv::Op
OpOuterProduct	spirv.hpp	/^    OpOuterProduct = 147,$/;"	e	enum:spv::Op
OpPhi	spirv.hpp	/^    OpPhi = 245,$/;"	e	enum:spv::Op
OpPtrAccessChain	spirv.hpp	/^    OpPtrAccessChain = 67,$/;"	e	enum:spv::Op
OpPtrCastToCrossWorkgroupINTEL	spirv.hpp	/^    OpPtrCastToCrossWorkgroupINTEL = 5934,$/;"	e	enum:spv::Op
OpPtrCastToGeneric	spirv.hpp	/^    OpPtrCastToGeneric = 121,$/;"	e	enum:spv::Op
OpPtrDiff	spirv.hpp	/^    OpPtrDiff = 403,$/;"	e	enum:spv::Op
OpPtrEqual	spirv.hpp	/^    OpPtrEqual = 401,$/;"	e	enum:spv::Op
OpPtrNotEqual	spirv.hpp	/^    OpPtrNotEqual = 402,$/;"	e	enum:spv::Op
OpQuantizeToF16	spirv.hpp	/^    OpQuantizeToF16 = 116,$/;"	e	enum:spv::Op
OpRayQueryConfirmIntersectionKHR	spirv.hpp	/^    OpRayQueryConfirmIntersectionKHR = 4476,$/;"	e	enum:spv::Op
OpRayQueryGenerateIntersectionKHR	spirv.hpp	/^    OpRayQueryGenerateIntersectionKHR = 4475,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionBarycentricsKHR	spirv.hpp	/^    OpRayQueryGetIntersectionBarycentricsKHR = 6024,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionCandidateAABBOpaqueKHR	spirv.hpp	/^    OpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionFrontFaceKHR	spirv.hpp	/^    OpRayQueryGetIntersectionFrontFaceKHR = 6025,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionGeometryIndexKHR	spirv.hpp	/^    OpRayQueryGetIntersectionGeometryIndexKHR = 6022,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionInstanceCustomIndexKHR	spirv.hpp	/^    OpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionInstanceIdKHR	spirv.hpp	/^    OpRayQueryGetIntersectionInstanceIdKHR = 6020,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR	spirv.hpp	/^    OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionObjectRayDirectionKHR	spirv.hpp	/^    OpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionObjectRayOriginKHR	spirv.hpp	/^    OpRayQueryGetIntersectionObjectRayOriginKHR = 6028,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionObjectToWorldKHR	spirv.hpp	/^    OpRayQueryGetIntersectionObjectToWorldKHR = 6031,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionPrimitiveIndexKHR	spirv.hpp	/^    OpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionTKHR	spirv.hpp	/^    OpRayQueryGetIntersectionTKHR = 6018,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionTypeKHR	spirv.hpp	/^    OpRayQueryGetIntersectionTypeKHR = 4479,$/;"	e	enum:spv::Op
OpRayQueryGetIntersectionWorldToObjectKHR	spirv.hpp	/^    OpRayQueryGetIntersectionWorldToObjectKHR = 6032,$/;"	e	enum:spv::Op
OpRayQueryGetRayFlagsKHR	spirv.hpp	/^    OpRayQueryGetRayFlagsKHR = 6017,$/;"	e	enum:spv::Op
OpRayQueryGetRayTMinKHR	spirv.hpp	/^    OpRayQueryGetRayTMinKHR = 6016,$/;"	e	enum:spv::Op
OpRayQueryGetWorldRayDirectionKHR	spirv.hpp	/^    OpRayQueryGetWorldRayDirectionKHR = 6029,$/;"	e	enum:spv::Op
OpRayQueryGetWorldRayOriginKHR	spirv.hpp	/^    OpRayQueryGetWorldRayOriginKHR = 6030,$/;"	e	enum:spv::Op
OpRayQueryInitializeKHR	spirv.hpp	/^    OpRayQueryInitializeKHR = 4473,$/;"	e	enum:spv::Op
OpRayQueryProceedKHR	spirv.hpp	/^    OpRayQueryProceedKHR = 4477,$/;"	e	enum:spv::Op
OpRayQueryTerminateKHR	spirv.hpp	/^    OpRayQueryTerminateKHR = 4474,$/;"	e	enum:spv::Op
OpReadClockKHR	spirv.hpp	/^    OpReadClockKHR = 5056,$/;"	e	enum:spv::Op
OpReadPipe	spirv.hpp	/^    OpReadPipe = 274,$/;"	e	enum:spv::Op
OpReadPipeBlockingINTEL	spirv.hpp	/^    OpReadPipeBlockingINTEL = 5946,$/;"	e	enum:spv::Op
OpReleaseEvent	spirv.hpp	/^    OpReleaseEvent = 298,$/;"	e	enum:spv::Op
OpReportIntersectionKHR	spirv.hpp	/^    OpReportIntersectionKHR = 5334,$/;"	e	enum:spv::Op
OpReportIntersectionNV	spirv.hpp	/^    OpReportIntersectionNV = 5334,$/;"	e	enum:spv::Op
OpReserveReadPipePackets	spirv.hpp	/^    OpReserveReadPipePackets = 278,$/;"	e	enum:spv::Op
OpReserveWritePipePackets	spirv.hpp	/^    OpReserveWritePipePackets = 279,$/;"	e	enum:spv::Op
OpReservedReadPipe	spirv.hpp	/^    OpReservedReadPipe = 276,$/;"	e	enum:spv::Op
OpReservedWritePipe	spirv.hpp	/^    OpReservedWritePipe = 277,$/;"	e	enum:spv::Op
OpRestoreMemoryINTEL	spirv.hpp	/^    OpRestoreMemoryINTEL = 5820,$/;"	e	enum:spv::Op
OpRetainEvent	spirv.hpp	/^    OpRetainEvent = 297,$/;"	e	enum:spv::Op
OpReturn	spirv.hpp	/^    OpReturn = 253,$/;"	e	enum:spv::Op
OpReturnValue	spirv.hpp	/^    OpReturnValue = 254,$/;"	e	enum:spv::Op
OpSConvert	spirv.hpp	/^    OpSConvert = 114,$/;"	e	enum:spv::Op
OpSDiv	spirv.hpp	/^    OpSDiv = 135,$/;"	e	enum:spv::Op
OpSDot	spirv.hpp	/^    OpSDot = 4450,$/;"	e	enum:spv::Op
OpSDotAccSat	spirv.hpp	/^    OpSDotAccSat = 4453,$/;"	e	enum:spv::Op
OpSDotAccSatKHR	spirv.hpp	/^    OpSDotAccSatKHR = 4453,$/;"	e	enum:spv::Op
OpSDotKHR	spirv.hpp	/^    OpSDotKHR = 4450,$/;"	e	enum:spv::Op
OpSGreaterThan	spirv.hpp	/^    OpSGreaterThan = 173,$/;"	e	enum:spv::Op
OpSGreaterThanEqual	spirv.hpp	/^    OpSGreaterThanEqual = 175,$/;"	e	enum:spv::Op
OpSLessThan	spirv.hpp	/^    OpSLessThan = 177,$/;"	e	enum:spv::Op
OpSLessThanEqual	spirv.hpp	/^    OpSLessThanEqual = 179,$/;"	e	enum:spv::Op
OpSMod	spirv.hpp	/^    OpSMod = 139,$/;"	e	enum:spv::Op
OpSMulExtended	spirv.hpp	/^    OpSMulExtended = 152,$/;"	e	enum:spv::Op
OpSNegate	spirv.hpp	/^    OpSNegate = 126,$/;"	e	enum:spv::Op
OpSRem	spirv.hpp	/^    OpSRem = 138,$/;"	e	enum:spv::Op
OpSUDot	spirv.hpp	/^    OpSUDot = 4452,$/;"	e	enum:spv::Op
OpSUDotAccSat	spirv.hpp	/^    OpSUDotAccSat = 4455,$/;"	e	enum:spv::Op
OpSUDotAccSatKHR	spirv.hpp	/^    OpSUDotAccSatKHR = 4455,$/;"	e	enum:spv::Op
OpSUDotKHR	spirv.hpp	/^    OpSUDotKHR = 4452,$/;"	e	enum:spv::Op
OpSampledImage	spirv.hpp	/^    OpSampledImage = 86,$/;"	e	enum:spv::Op
OpSamplerImageAddressingModeNV	spirv.hpp	/^    OpSamplerImageAddressingModeNV = 5397,$/;"	e	enum:spv::Op
OpSatConvertSToU	spirv.hpp	/^    OpSatConvertSToU = 118,$/;"	e	enum:spv::Op
OpSatConvertUToS	spirv.hpp	/^    OpSatConvertUToS = 119,$/;"	e	enum:spv::Op
OpSaveMemoryINTEL	spirv.hpp	/^    OpSaveMemoryINTEL = 5819,$/;"	e	enum:spv::Op
OpSelect	spirv.hpp	/^    OpSelect = 169,$/;"	e	enum:spv::Op
OpSelectionMerge	spirv.hpp	/^    OpSelectionMerge = 247,$/;"	e	enum:spv::Op
OpSetUserEventStatus	spirv.hpp	/^    OpSetUserEventStatus = 301,$/;"	e	enum:spv::Op
OpShiftLeftLogical	spirv.hpp	/^    OpShiftLeftLogical = 196,$/;"	e	enum:spv::Op
OpShiftRightArithmetic	spirv.hpp	/^    OpShiftRightArithmetic = 195,$/;"	e	enum:spv::Op
OpShiftRightLogical	spirv.hpp	/^    OpShiftRightLogical = 194,$/;"	e	enum:spv::Op
OpSignBitSet	spirv.hpp	/^    OpSignBitSet = 160,$/;"	e	enum:spv::Op
OpSizeOf	spirv.hpp	/^    OpSizeOf = 321,$/;"	e	enum:spv::Op
OpSource	spirv.hpp	/^    OpSource = 3,$/;"	e	enum:spv::Op
OpSourceContinued	spirv.hpp	/^    OpSourceContinued = 2,$/;"	e	enum:spv::Op
OpSourceExtension	spirv.hpp	/^    OpSourceExtension = 4,$/;"	e	enum:spv::Op
OpSpecConstant	spirv.hpp	/^    OpSpecConstant = 50,$/;"	e	enum:spv::Op
OpSpecConstantComposite	spirv.hpp	/^    OpSpecConstantComposite = 51,$/;"	e	enum:spv::Op
OpSpecConstantCompositeContinuedINTEL	spirv.hpp	/^    OpSpecConstantCompositeContinuedINTEL = 6092,$/;"	e	enum:spv::Op
OpSpecConstantFalse	spirv.hpp	/^    OpSpecConstantFalse = 49,$/;"	e	enum:spv::Op
OpSpecConstantOp	spirv.hpp	/^    OpSpecConstantOp = 52,$/;"	e	enum:spv::Op
OpSpecConstantTrue	spirv.hpp	/^    OpSpecConstantTrue = 48,$/;"	e	enum:spv::Op
OpStore	spirv.hpp	/^    OpStore = 62,$/;"	e	enum:spv::Op
OpString	spirv.hpp	/^    OpString = 7,$/;"	e	enum:spv::Op
OpSubgroupAllEqualKHR	spirv.hpp	/^    OpSubgroupAllEqualKHR = 4430,$/;"	e	enum:spv::Op
OpSubgroupAllKHR	spirv.hpp	/^    OpSubgroupAllKHR = 4428,$/;"	e	enum:spv::Op
OpSubgroupAnyKHR	spirv.hpp	/^    OpSubgroupAnyKHR = 4429,$/;"	e	enum:spv::Op
OpSubgroupAvcBmeInitializeINTEL	spirv.hpp	/^    OpSubgroupAvcBmeInitializeINTEL = 5782,$/;"	e	enum:spv::Op
OpSubgroupAvcFmeInitializeINTEL	spirv.hpp	/^    OpSubgroupAvcFmeInitializeINTEL = 5781,$/;"	e	enum:spv::Op
OpSubgroupAvcImeAdjustRefOffsetINTEL	spirv.hpp	/^    OpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,$/;"	e	enum:spv::Op
OpSubgroupAvcImeConvertToMcePayloadINTEL	spirv.hpp	/^    OpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,$/;"	e	enum:spv::Op
OpSubgroupAvcImeConvertToMceResultINTEL	spirv.hpp	/^    OpSubgroupAvcImeConvertToMceResultINTEL = 5765,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithDualReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,$/;"	e	enum:spv::Op
OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetBorderReachedINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetBorderReachedINTEL = 5776,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetDualReferenceStreaminINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetSingleReferenceStreaminINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,$/;"	e	enum:spv::Op
OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL	spirv.hpp	/^    OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,$/;"	e	enum:spv::Op
OpSubgroupAvcImeInitializeINTEL	spirv.hpp	/^    OpSubgroupAvcImeInitializeINTEL = 5747,$/;"	e	enum:spv::Op
OpSubgroupAvcImeRefWindowSizeINTEL	spirv.hpp	/^    OpSubgroupAvcImeRefWindowSizeINTEL = 5750,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetDualReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetDualReferenceINTEL = 5749,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetMaxMotionVectorCountINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetSingleReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetSingleReferenceINTEL = 5748,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,$/;"	e	enum:spv::Op
OpSubgroupAvcImeSetWeightedSadINTEL	spirv.hpp	/^    OpSubgroupAvcImeSetWeightedSadINTEL = 5756,$/;"	e	enum:spv::Op
OpSubgroupAvcImeStripDualReferenceStreamoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,$/;"	e	enum:spv::Op
OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL	spirv.hpp	/^    OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToImePayloadINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToImePayloadINTEL = 5732,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToImeResultINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToImeResultINTEL = 5733,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToRefPayloadINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToRefResultINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToRefResultINTEL = 5735,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToSicPayloadINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,$/;"	e	enum:spv::Op
OpSubgroupAvcMceConvertToSicResultINTEL	spirv.hpp	/^    OpSubgroupAvcMceConvertToSicResultINTEL = 5737,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetBestInterDistortionsINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterDirectionsINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterDirectionsINTEL = 5743,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterDistortionsINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterDistortionsINTEL = 5739,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterMajorShapeINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterMinorShapeINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterMotionVectorCountINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterReferenceIdsINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,$/;"	e	enum:spv::Op
OpSubgroupAvcMceGetMotionVectorsINTEL	spirv.hpp	/^    OpSubgroupAvcMceGetMotionVectorsINTEL = 5738,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetAcOnlyHaarINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetInterDirectionPenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetInterShapePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,$/;"	e	enum:spv::Op
OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL	spirv.hpp	/^    OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,$/;"	e	enum:spv::Op
OpSubgroupAvcRefConvertToMcePayloadINTEL	spirv.hpp	/^    OpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,$/;"	e	enum:spv::Op
OpSubgroupAvcRefConvertToMceResultINTEL	spirv.hpp	/^    OpSubgroupAvcRefConvertToMceResultINTEL = 5790,$/;"	e	enum:spv::Op
OpSubgroupAvcRefEvaluateWithDualReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,$/;"	e	enum:spv::Op
OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,$/;"	e	enum:spv::Op
OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL	spirv.hpp	/^    OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,$/;"	e	enum:spv::Op
OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,$/;"	e	enum:spv::Op
OpSubgroupAvcRefSetBidirectionalMixDisableINTEL	spirv.hpp	/^    OpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,$/;"	e	enum:spv::Op
OpSubgroupAvcRefSetBilinearFilterEnableINTEL	spirv.hpp	/^    OpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,$/;"	e	enum:spv::Op
OpSubgroupAvcSicConfigureIpeLumaChromaINTEL	spirv.hpp	/^    OpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,$/;"	e	enum:spv::Op
OpSubgroupAvcSicConfigureIpeLumaINTEL	spirv.hpp	/^    OpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,$/;"	e	enum:spv::Op
OpSubgroupAvcSicConfigureSkcINTEL	spirv.hpp	/^    OpSubgroupAvcSicConfigureSkcINTEL = 5792,$/;"	e	enum:spv::Op
OpSubgroupAvcSicConvertToMcePayloadINTEL	spirv.hpp	/^    OpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,$/;"	e	enum:spv::Op
OpSubgroupAvcSicConvertToMceResultINTEL	spirv.hpp	/^    OpSubgroupAvcSicConvertToMceResultINTEL = 5808,$/;"	e	enum:spv::Op
OpSubgroupAvcSicEvaluateIpeINTEL	spirv.hpp	/^    OpSubgroupAvcSicEvaluateIpeINTEL = 5803,$/;"	e	enum:spv::Op
OpSubgroupAvcSicEvaluateWithDualReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,$/;"	e	enum:spv::Op
OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,$/;"	e	enum:spv::Op
OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL	spirv.hpp	/^    OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,$/;"	e	enum:spv::Op
OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL	spirv.hpp	/^    OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetInterRawSadsINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetInterRawSadsINTEL = 5816,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetIpeChromaModeINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetIpeLumaShapeINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetMotionVectorMaskINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetPackedIpeLumaModesINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,$/;"	e	enum:spv::Op
OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL	spirv.hpp	/^    OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,$/;"	e	enum:spv::Op
OpSubgroupAvcSicInitializeINTEL	spirv.hpp	/^    OpSubgroupAvcSicInitializeINTEL = 5791,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetBilinearFilterEnableINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,$/;"	e	enum:spv::Op
OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL	spirv.hpp	/^    OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,$/;"	e	enum:spv::Op
OpSubgroupBallotKHR	spirv.hpp	/^    OpSubgroupBallotKHR = 4421,$/;"	e	enum:spv::Op
OpSubgroupBlockReadINTEL	spirv.hpp	/^    OpSubgroupBlockReadINTEL = 5575,$/;"	e	enum:spv::Op
OpSubgroupBlockWriteINTEL	spirv.hpp	/^    OpSubgroupBlockWriteINTEL = 5576,$/;"	e	enum:spv::Op
OpSubgroupFirstInvocationKHR	spirv.hpp	/^    OpSubgroupFirstInvocationKHR = 4422,$/;"	e	enum:spv::Op
OpSubgroupImageBlockReadINTEL	spirv.hpp	/^    OpSubgroupImageBlockReadINTEL = 5577,$/;"	e	enum:spv::Op
OpSubgroupImageBlockWriteINTEL	spirv.hpp	/^    OpSubgroupImageBlockWriteINTEL = 5578,$/;"	e	enum:spv::Op
OpSubgroupImageMediaBlockReadINTEL	spirv.hpp	/^    OpSubgroupImageMediaBlockReadINTEL = 5580,$/;"	e	enum:spv::Op
OpSubgroupImageMediaBlockWriteINTEL	spirv.hpp	/^    OpSubgroupImageMediaBlockWriteINTEL = 5581,$/;"	e	enum:spv::Op
OpSubgroupReadInvocationKHR	spirv.hpp	/^    OpSubgroupReadInvocationKHR = 4432,$/;"	e	enum:spv::Op
OpSubgroupShuffleDownINTEL	spirv.hpp	/^    OpSubgroupShuffleDownINTEL = 5572,$/;"	e	enum:spv::Op
OpSubgroupShuffleINTEL	spirv.hpp	/^    OpSubgroupShuffleINTEL = 5571,$/;"	e	enum:spv::Op
OpSubgroupShuffleUpINTEL	spirv.hpp	/^    OpSubgroupShuffleUpINTEL = 5573,$/;"	e	enum:spv::Op
OpSubgroupShuffleXorINTEL	spirv.hpp	/^    OpSubgroupShuffleXorINTEL = 5574,$/;"	e	enum:spv::Op
OpSwitch	spirv.hpp	/^    OpSwitch = 251,$/;"	e	enum:spv::Op
OpTerminateInvocation	spirv.hpp	/^    OpTerminateInvocation = 4416,$/;"	e	enum:spv::Op
OpTerminateRayKHR	spirv.hpp	/^    OpTerminateRayKHR = 4449,$/;"	e	enum:spv::Op
OpTerminateRayNV	spirv.hpp	/^    OpTerminateRayNV = 5336,$/;"	e	enum:spv::Op
OpTraceMotionNV	spirv.hpp	/^    OpTraceMotionNV = 5338,$/;"	e	enum:spv::Op
OpTraceNV	spirv.hpp	/^    OpTraceNV = 5337,$/;"	e	enum:spv::Op
OpTraceRayKHR	spirv.hpp	/^    OpTraceRayKHR = 4445,$/;"	e	enum:spv::Op
OpTraceRayMotionNV	spirv.hpp	/^    OpTraceRayMotionNV = 5339,$/;"	e	enum:spv::Op
OpTranspose	spirv.hpp	/^    OpTranspose = 84,$/;"	e	enum:spv::Op
OpTypeAccelerationStructureKHR	spirv.hpp	/^    OpTypeAccelerationStructureKHR = 5341,$/;"	e	enum:spv::Op
OpTypeAccelerationStructureNV	spirv.hpp	/^    OpTypeAccelerationStructureNV = 5341,$/;"	e	enum:spv::Op
OpTypeArray	spirv.hpp	/^    OpTypeArray = 28,$/;"	e	enum:spv::Op
OpTypeAvcImeDualReferenceStreaminINTEL	spirv.hpp	/^    OpTypeAvcImeDualReferenceStreaminINTEL = 5710,$/;"	e	enum:spv::Op
OpTypeAvcImePayloadINTEL	spirv.hpp	/^    OpTypeAvcImePayloadINTEL = 5701,$/;"	e	enum:spv::Op
OpTypeAvcImeResultDualReferenceStreamoutINTEL	spirv.hpp	/^    OpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,$/;"	e	enum:spv::Op
OpTypeAvcImeResultINTEL	spirv.hpp	/^    OpTypeAvcImeResultINTEL = 5706,$/;"	e	enum:spv::Op
OpTypeAvcImeResultSingleReferenceStreamoutINTEL	spirv.hpp	/^    OpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,$/;"	e	enum:spv::Op
OpTypeAvcImeSingleReferenceStreaminINTEL	spirv.hpp	/^    OpTypeAvcImeSingleReferenceStreaminINTEL = 5709,$/;"	e	enum:spv::Op
OpTypeAvcMcePayloadINTEL	spirv.hpp	/^    OpTypeAvcMcePayloadINTEL = 5704,$/;"	e	enum:spv::Op
OpTypeAvcMceResultINTEL	spirv.hpp	/^    OpTypeAvcMceResultINTEL = 5705,$/;"	e	enum:spv::Op
OpTypeAvcRefPayloadINTEL	spirv.hpp	/^    OpTypeAvcRefPayloadINTEL = 5702,$/;"	e	enum:spv::Op
OpTypeAvcRefResultINTEL	spirv.hpp	/^    OpTypeAvcRefResultINTEL = 5711,$/;"	e	enum:spv::Op
OpTypeAvcSicPayloadINTEL	spirv.hpp	/^    OpTypeAvcSicPayloadINTEL = 5703,$/;"	e	enum:spv::Op
OpTypeAvcSicResultINTEL	spirv.hpp	/^    OpTypeAvcSicResultINTEL = 5712,$/;"	e	enum:spv::Op
OpTypeBool	spirv.hpp	/^    OpTypeBool = 20,$/;"	e	enum:spv::Op
OpTypeBufferSurfaceINTEL	spirv.hpp	/^    OpTypeBufferSurfaceINTEL = 6086,$/;"	e	enum:spv::Op
OpTypeCooperativeMatrixNV	spirv.hpp	/^    OpTypeCooperativeMatrixNV = 5358,$/;"	e	enum:spv::Op
OpTypeDeviceEvent	spirv.hpp	/^    OpTypeDeviceEvent = 35,$/;"	e	enum:spv::Op
OpTypeEvent	spirv.hpp	/^    OpTypeEvent = 34,$/;"	e	enum:spv::Op
OpTypeFloat	spirv.hpp	/^    OpTypeFloat = 22,$/;"	e	enum:spv::Op
OpTypeForwardPointer	spirv.hpp	/^    OpTypeForwardPointer = 39,$/;"	e	enum:spv::Op
OpTypeFunction	spirv.hpp	/^    OpTypeFunction = 33,$/;"	e	enum:spv::Op
OpTypeImage	spirv.hpp	/^    OpTypeImage = 25,$/;"	e	enum:spv::Op
OpTypeInt	spirv.hpp	/^    OpTypeInt = 21,$/;"	e	enum:spv::Op
OpTypeMatrix	spirv.hpp	/^    OpTypeMatrix = 24,$/;"	e	enum:spv::Op
OpTypeNamedBarrier	spirv.hpp	/^    OpTypeNamedBarrier = 327,$/;"	e	enum:spv::Op
OpTypeOpaque	spirv.hpp	/^    OpTypeOpaque = 31,$/;"	e	enum:spv::Op
OpTypePipe	spirv.hpp	/^    OpTypePipe = 38,$/;"	e	enum:spv::Op
OpTypePipeStorage	spirv.hpp	/^    OpTypePipeStorage = 322,$/;"	e	enum:spv::Op
OpTypePointer	spirv.hpp	/^    OpTypePointer = 32,$/;"	e	enum:spv::Op
OpTypeQueue	spirv.hpp	/^    OpTypeQueue = 37,$/;"	e	enum:spv::Op
OpTypeRayQueryKHR	spirv.hpp	/^    OpTypeRayQueryKHR = 4472,$/;"	e	enum:spv::Op
OpTypeReserveId	spirv.hpp	/^    OpTypeReserveId = 36,$/;"	e	enum:spv::Op
OpTypeRuntimeArray	spirv.hpp	/^    OpTypeRuntimeArray = 29,$/;"	e	enum:spv::Op
OpTypeSampledImage	spirv.hpp	/^    OpTypeSampledImage = 27,$/;"	e	enum:spv::Op
OpTypeSampler	spirv.hpp	/^    OpTypeSampler = 26,$/;"	e	enum:spv::Op
OpTypeStruct	spirv.hpp	/^    OpTypeStruct = 30,$/;"	e	enum:spv::Op
OpTypeStructContinuedINTEL	spirv.hpp	/^    OpTypeStructContinuedINTEL = 6090,$/;"	e	enum:spv::Op
OpTypeVector	spirv.hpp	/^    OpTypeVector = 23,$/;"	e	enum:spv::Op
OpTypeVmeImageINTEL	spirv.hpp	/^    OpTypeVmeImageINTEL = 5700,$/;"	e	enum:spv::Op
OpTypeVoid	spirv.hpp	/^    OpTypeVoid = 19,$/;"	e	enum:spv::Op
OpUAddSatINTEL	spirv.hpp	/^    OpUAddSatINTEL = 5590,$/;"	e	enum:spv::Op
OpUAverageINTEL	spirv.hpp	/^    OpUAverageINTEL = 5592,$/;"	e	enum:spv::Op
OpUAverageRoundedINTEL	spirv.hpp	/^    OpUAverageRoundedINTEL = 5594,$/;"	e	enum:spv::Op
OpUConvert	spirv.hpp	/^    OpUConvert = 113,$/;"	e	enum:spv::Op
OpUCountLeadingZerosINTEL	spirv.hpp	/^    OpUCountLeadingZerosINTEL = 5585,$/;"	e	enum:spv::Op
OpUCountTrailingZerosINTEL	spirv.hpp	/^    OpUCountTrailingZerosINTEL = 5586,$/;"	e	enum:spv::Op
OpUDiv	spirv.hpp	/^    OpUDiv = 134,$/;"	e	enum:spv::Op
OpUDot	spirv.hpp	/^    OpUDot = 4451,$/;"	e	enum:spv::Op
OpUDotAccSat	spirv.hpp	/^    OpUDotAccSat = 4454,$/;"	e	enum:spv::Op
OpUDotAccSatKHR	spirv.hpp	/^    OpUDotAccSatKHR = 4454,$/;"	e	enum:spv::Op
OpUDotKHR	spirv.hpp	/^    OpUDotKHR = 4451,$/;"	e	enum:spv::Op
OpUGreaterThan	spirv.hpp	/^    OpUGreaterThan = 172,$/;"	e	enum:spv::Op
OpUGreaterThanEqual	spirv.hpp	/^    OpUGreaterThanEqual = 174,$/;"	e	enum:spv::Op
OpULessThan	spirv.hpp	/^    OpULessThan = 176,$/;"	e	enum:spv::Op
OpULessThanEqual	spirv.hpp	/^    OpULessThanEqual = 178,$/;"	e	enum:spv::Op
OpUMod	spirv.hpp	/^    OpUMod = 137,$/;"	e	enum:spv::Op
OpUMul32x16INTEL	spirv.hpp	/^    OpUMul32x16INTEL = 5598,$/;"	e	enum:spv::Op
OpUMulExtended	spirv.hpp	/^    OpUMulExtended = 151,$/;"	e	enum:spv::Op
OpUSubSatINTEL	spirv.hpp	/^    OpUSubSatINTEL = 5596,$/;"	e	enum:spv::Op
OpUndef	spirv.hpp	/^    OpUndef = 1,$/;"	e	enum:spv::Op
OpUnordered	spirv.hpp	/^    OpUnordered = 163,$/;"	e	enum:spv::Op
OpUnreachable	spirv.hpp	/^    OpUnreachable = 255,$/;"	e	enum:spv::Op
OpVariable	spirv.hpp	/^    OpVariable = 59,$/;"	e	enum:spv::Op
OpVariableLengthArrayINTEL	spirv.hpp	/^    OpVariableLengthArrayINTEL = 5818,$/;"	e	enum:spv::Op
OpVectorExtractDynamic	spirv.hpp	/^    OpVectorExtractDynamic = 77,$/;"	e	enum:spv::Op
OpVectorInsertDynamic	spirv.hpp	/^    OpVectorInsertDynamic = 78,$/;"	e	enum:spv::Op
OpVectorShuffle	spirv.hpp	/^    OpVectorShuffle = 79,$/;"	e	enum:spv::Op
OpVectorTimesMatrix	spirv.hpp	/^    OpVectorTimesMatrix = 144,$/;"	e	enum:spv::Op
OpVectorTimesScalar	spirv.hpp	/^    OpVectorTimesScalar = 142,$/;"	e	enum:spv::Op
OpVmeImageINTEL	spirv.hpp	/^    OpVmeImageINTEL = 5699,$/;"	e	enum:spv::Op
OpWritePackedPrimitiveIndices4x8NV	spirv.hpp	/^    OpWritePackedPrimitiveIndices4x8NV = 5299,$/;"	e	enum:spv::Op
OpWritePipe	spirv.hpp	/^    OpWritePipe = 275,$/;"	e	enum:spv::Op
OpWritePipeBlockingINTEL	spirv.hpp	/^    OpWritePipeBlockingINTEL = 5947,$/;"	e	enum:spv::Op
OpcodeHandler	spirv_cross.hpp	/^	struct OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
Options	spirv_glsl.hpp	/^	struct Options$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
Options	spirv_hlsl.hpp	/^	struct Options$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
Options	spirv_msl.hpp	/^	struct Options$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
OverflowModes	spirv.hpp	/^enum OverflowModes {$/;"	g	namespace:spv
OverflowModesMax	spirv.hpp	/^    OverflowModesMax = 0x7fffffff,$/;"	e	enum:spv::OverflowModes
OverflowModesSAT	spirv.hpp	/^    OverflowModesSAT = 1,$/;"	e	enum:spv::OverflowModes
OverflowModesSAT_SYM	spirv.hpp	/^    OverflowModesSAT_SYM = 3,$/;"	e	enum:spv::OverflowModes
OverflowModesSAT_ZERO	spirv.hpp	/^    OverflowModesSAT_ZERO = 2,$/;"	e	enum:spv::OverflowModes
OverflowModesWRAP	spirv.hpp	/^    OverflowModesWRAP = 0,$/;"	e	enum:spv::OverflowModes
PLSArg	main.cpp	/^struct PLSArg$/;"	s	file:
PackedVectorFormat	spirv.hpp	/^enum PackedVectorFormat {$/;"	g	namespace:spv
PackedVectorFormatMax	spirv.hpp	/^    PackedVectorFormatMax = 0x7fffffff,$/;"	e	enum:spv::PackedVectorFormat
PackedVectorFormatPackedVectorFormat4x8Bit	spirv.hpp	/^    PackedVectorFormatPackedVectorFormat4x8Bit = 0,$/;"	e	enum:spv::PackedVectorFormat
PackedVectorFormatPackedVectorFormat4x8BitKHR	spirv.hpp	/^    PackedVectorFormatPackedVectorFormat4x8BitKHR = 0,$/;"	e	enum:spv::PackedVectorFormat
Parameter	spirv_common.hpp	/^	struct Parameter$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
ParsedIR	spirv_cross_parsed_ir.cpp	/^ParsedIR::ParsedIR()$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ParsedIR	spirv_cross_parsed_ir.cpp	/^ParsedIR::ParsedIR(const ParsedIR &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ParsedIR	spirv_cross_parsed_ir.hpp	/^class ParsedIR$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Parser	spirv_parser.cpp	/^Parser::Parser(const uint32_t *spirv_data, size_t word_count)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
Parser	spirv_parser.cpp	/^Parser::Parser(vector<uint32_t> spirv)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
Parser	spirv_parser.hpp	/^class Parser$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Phi	spirv_common.hpp	/^	struct Phi$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
PhysicalBlockMeta	spirv_cross.hpp	/^	struct PhysicalBlockMeta$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
PhysicalStorageBufferPointerHandler	spirv_cross.cpp	/^Compiler::PhysicalStorageBufferPointerHandler::PhysicalStorageBufferPointerHandler(Compiler &compiler_)$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
PhysicalStorageBufferPointerHandler	spirv_cross.hpp	/^	struct PhysicalStorageBufferPointerHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
Platform	spirv_msl.hpp	/^		} Platform;$/;"	t	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::__anon16
PlsFormat	spirv_glsl.hpp	/^enum PlsFormat$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
PlsNone	spirv_glsl.hpp	/^	PlsNone = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsR11FG11FB10F	spirv_glsl.hpp	/^	PlsR11FG11FB10F,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsR32F	spirv_glsl.hpp	/^	PlsR32F,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsR32UI	spirv_glsl.hpp	/^	PlsR32UI$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRG16	spirv_glsl.hpp	/^	PlsRG16,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRG16F	spirv_glsl.hpp	/^	PlsRG16F,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRG16I	spirv_glsl.hpp	/^	PlsRG16I,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRG16UI	spirv_glsl.hpp	/^	PlsRG16UI,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRGB10A2	spirv_glsl.hpp	/^	PlsRGB10A2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRGB10A2UI	spirv_glsl.hpp	/^	PlsRGB10A2UI,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRGBA8	spirv_glsl.hpp	/^	PlsRGBA8,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRGBA8I	spirv_glsl.hpp	/^	PlsRGBA8I,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRGBA8UI	spirv_glsl.hpp	/^	PlsRGBA8UI,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::PlsFormat
PlsRemap	spirv_glsl.hpp	/^struct PlsRemap$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
Precision	spirv_glsl.hpp	/^		enum Precision$/;"	g	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
QuantizationModes	spirv.hpp	/^enum QuantizationModes {$/;"	g	namespace:spv
QuantizationModesMax	spirv.hpp	/^    QuantizationModesMax = 0x7fffffff,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND	spirv.hpp	/^    QuantizationModesRND = 2,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND_CONV	spirv.hpp	/^    QuantizationModesRND_CONV = 6,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND_CONV_ODD	spirv.hpp	/^    QuantizationModesRND_CONV_ODD = 7,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND_INF	spirv.hpp	/^    QuantizationModesRND_INF = 4,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND_MIN_INF	spirv.hpp	/^    QuantizationModesRND_MIN_INF = 5,$/;"	e	enum:spv::QuantizationModes
QuantizationModesRND_ZERO	spirv.hpp	/^    QuantizationModesRND_ZERO = 3,$/;"	e	enum:spv::QuantizationModes
QuantizationModesTRN	spirv.hpp	/^    QuantizationModesTRN = 0,$/;"	e	enum:spv::QuantizationModes
QuantizationModesTRN_ZERO	spirv.hpp	/^    QuantizationModesTRN_ZERO = 1,$/;"	e	enum:spv::QuantizationModes
Query1D	spirv_hlsl.hpp	/^		Query1D = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query1DArray	spirv_hlsl.hpp	/^		Query1DArray,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query2D	spirv_hlsl.hpp	/^		Query2D,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query2DArray	spirv_hlsl.hpp	/^		Query2DArray,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query2DMS	spirv_hlsl.hpp	/^		Query2DMS,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query2DMSArray	spirv_hlsl.hpp	/^		Query2DMSArray,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
Query3D	spirv_hlsl.hpp	/^		Query3D,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
QueryBuffer	spirv_hlsl.hpp	/^		QueryBuffer,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
QueryCube	spirv_hlsl.hpp	/^		QueryCube,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
QueryCubeArray	spirv_hlsl.hpp	/^		QueryCubeArray,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
QueryDimCount	spirv_hlsl.hpp	/^		QueryDimCount$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantDim
QueryTypeCount	spirv_hlsl.hpp	/^		QueryTypeCount = 3$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantType
QueryTypeFloat	spirv_hlsl.hpp	/^		QueryTypeFloat = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantType
QueryTypeInt	spirv_hlsl.hpp	/^		QueryTypeInt = 16,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantType
QueryTypeUInt	spirv_hlsl.hpp	/^		QueryTypeUInt = 32,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureQueryVariantType
RayFlagsCullBackFacingTrianglesKHRMask	spirv.hpp	/^    RayFlagsCullBackFacingTrianglesKHRMask = 0x00000010,$/;"	e	enum:spv::RayFlagsMask
RayFlagsCullBackFacingTrianglesKHRShift	spirv.hpp	/^    RayFlagsCullBackFacingTrianglesKHRShift = 4,$/;"	e	enum:spv::RayFlagsShift
RayFlagsCullFrontFacingTrianglesKHRMask	spirv.hpp	/^    RayFlagsCullFrontFacingTrianglesKHRMask = 0x00000020,$/;"	e	enum:spv::RayFlagsMask
RayFlagsCullFrontFacingTrianglesKHRShift	spirv.hpp	/^    RayFlagsCullFrontFacingTrianglesKHRShift = 5,$/;"	e	enum:spv::RayFlagsShift
RayFlagsCullNoOpaqueKHRMask	spirv.hpp	/^    RayFlagsCullNoOpaqueKHRMask = 0x00000080,$/;"	e	enum:spv::RayFlagsMask
RayFlagsCullNoOpaqueKHRShift	spirv.hpp	/^    RayFlagsCullNoOpaqueKHRShift = 7,$/;"	e	enum:spv::RayFlagsShift
RayFlagsCullOpaqueKHRMask	spirv.hpp	/^    RayFlagsCullOpaqueKHRMask = 0x00000040,$/;"	e	enum:spv::RayFlagsMask
RayFlagsCullOpaqueKHRShift	spirv.hpp	/^    RayFlagsCullOpaqueKHRShift = 6,$/;"	e	enum:spv::RayFlagsShift
RayFlagsMask	spirv.hpp	/^enum RayFlagsMask {$/;"	g	namespace:spv
RayFlagsMaskNone	spirv.hpp	/^    RayFlagsMaskNone = 0,$/;"	e	enum:spv::RayFlagsMask
RayFlagsMax	spirv.hpp	/^    RayFlagsMax = 0x7fffffff,$/;"	e	enum:spv::RayFlagsShift
RayFlagsNoOpaqueKHRMask	spirv.hpp	/^    RayFlagsNoOpaqueKHRMask = 0x00000002,$/;"	e	enum:spv::RayFlagsMask
RayFlagsNoOpaqueKHRShift	spirv.hpp	/^    RayFlagsNoOpaqueKHRShift = 1,$/;"	e	enum:spv::RayFlagsShift
RayFlagsOpaqueKHRMask	spirv.hpp	/^    RayFlagsOpaqueKHRMask = 0x00000001,$/;"	e	enum:spv::RayFlagsMask
RayFlagsOpaqueKHRShift	spirv.hpp	/^    RayFlagsOpaqueKHRShift = 0,$/;"	e	enum:spv::RayFlagsShift
RayFlagsShift	spirv.hpp	/^enum RayFlagsShift {$/;"	g	namespace:spv
RayFlagsSkipAABBsKHRMask	spirv.hpp	/^    RayFlagsSkipAABBsKHRMask = 0x00000200,$/;"	e	enum:spv::RayFlagsMask
RayFlagsSkipAABBsKHRShift	spirv.hpp	/^    RayFlagsSkipAABBsKHRShift = 9,$/;"	e	enum:spv::RayFlagsShift
RayFlagsSkipClosestHitShaderKHRMask	spirv.hpp	/^    RayFlagsSkipClosestHitShaderKHRMask = 0x00000008,$/;"	e	enum:spv::RayFlagsMask
RayFlagsSkipClosestHitShaderKHRShift	spirv.hpp	/^    RayFlagsSkipClosestHitShaderKHRShift = 3,$/;"	e	enum:spv::RayFlagsShift
RayFlagsSkipTrianglesKHRMask	spirv.hpp	/^    RayFlagsSkipTrianglesKHRMask = 0x00000100,$/;"	e	enum:spv::RayFlagsMask
RayFlagsSkipTrianglesKHRShift	spirv.hpp	/^    RayFlagsSkipTrianglesKHRShift = 8,$/;"	e	enum:spv::RayFlagsShift
RayFlagsTerminateOnFirstHitKHRMask	spirv.hpp	/^    RayFlagsTerminateOnFirstHitKHRMask = 0x00000004,$/;"	e	enum:spv::RayFlagsMask
RayFlagsTerminateOnFirstHitKHRShift	spirv.hpp	/^    RayFlagsTerminateOnFirstHitKHRShift = 2,$/;"	e	enum:spv::RayFlagsShift
RayQuery	spirv_common.hpp	/^		RayQuery,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
RayQueryCandidateIntersectionType	spirv.hpp	/^enum RayQueryCandidateIntersectionType {$/;"	g	namespace:spv
RayQueryCandidateIntersectionTypeMax	spirv.hpp	/^    RayQueryCandidateIntersectionTypeMax = 0x7fffffff,$/;"	e	enum:spv::RayQueryCandidateIntersectionType
RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR	spirv.hpp	/^    RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1,$/;"	e	enum:spv::RayQueryCandidateIntersectionType
RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR	spirv.hpp	/^    RayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0,$/;"	e	enum:spv::RayQueryCandidateIntersectionType
RayQueryCommittedIntersectionType	spirv.hpp	/^enum RayQueryCommittedIntersectionType {$/;"	g	namespace:spv
RayQueryCommittedIntersectionTypeMax	spirv.hpp	/^    RayQueryCommittedIntersectionTypeMax = 0x7fffffff,$/;"	e	enum:spv::RayQueryCommittedIntersectionType
RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR	spirv.hpp	/^    RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2,$/;"	e	enum:spv::RayQueryCommittedIntersectionType
RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR	spirv.hpp	/^    RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0,$/;"	e	enum:spv::RayQueryCommittedIntersectionType
RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR	spirv.hpp	/^    RayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1,$/;"	e	enum:spv::RayQueryCommittedIntersectionType
RayQueryIntersection	spirv.hpp	/^enum RayQueryIntersection {$/;"	g	namespace:spv
RayQueryIntersectionMax	spirv.hpp	/^    RayQueryIntersectionMax = 0x7fffffff,$/;"	e	enum:spv::RayQueryIntersection
RayQueryIntersectionRayQueryCandidateIntersectionKHR	spirv.hpp	/^    RayQueryIntersectionRayQueryCandidateIntersectionKHR = 0,$/;"	e	enum:spv::RayQueryIntersection
RayQueryIntersectionRayQueryCommittedIntersectionKHR	spirv.hpp	/^    RayQueryIntersectionRayQueryCommittedIntersectionKHR = 1,$/;"	e	enum:spv::RayQueryIntersection
Remap	main.cpp	/^struct Remap$/;"	s	file:
Rename	main.cpp	/^	struct Rename$/;"	s	struct:CLIArguments	file:
Resource	spirv_cross.hpp	/^struct Resource$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
ResourceBindingPushConstantBinding	spirv_common.hpp	/^static const uint32_t ResourceBindingPushConstantBinding = 0;$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
ResourceBindingPushConstantDescriptorSet	spirv_common.hpp	/^static const uint32_t ResourceBindingPushConstantDescriptorSet = ~(0u);$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
Result	spirv_glsl.cpp	/^CompilerGLSL::ShaderSubgroupSupportHelper::Result::Result()$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper::Result
Result	spirv_glsl.hpp	/^		struct Result$/;"	s	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper
Return	spirv_common.hpp	/^		Return, \/\/ Block ends with return.$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
Revision	spirv.hpp	/^static const unsigned int Revision = 1;$/;"	m	namespace:spv
RootConstants	spirv_hlsl.hpp	/^struct RootConstants$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SByte	spirv_common.hpp	/^		SByte,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
SOURCES	Makefile	/^SOURCES := $(wildcard spirv_*.cpp)$/;"	m
SPIRAccessChain	spirv_common.hpp	/^	SPIRAccessChain(TypeID basetype_, spv::StorageClass storage_, std::string base_, std::string dynamic_index_,$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
SPIRAccessChain	spirv_common.hpp	/^struct SPIRAccessChain : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRBlock	spirv_common.hpp	/^struct SPIRBlock : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRCombinedImageSampler	spirv_common.hpp	/^	SPIRCombinedImageSampler(TypeID type_, VariableID image_, VariableID sampler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRCombinedImageSampler
SPIRCombinedImageSampler	spirv_common.hpp	/^struct SPIRCombinedImageSampler : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRConstant	spirv_common.hpp	/^	SPIRConstant(TypeID constant_type_, const SPIRConstant *const *vector_elements, uint32_t num_elements,$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
SPIRConstant	spirv_common.hpp	/^	SPIRConstant(TypeID constant_type_, const uint32_t *elements, uint32_t num_elements, bool specialized)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
SPIRConstant	spirv_common.hpp	/^	SPIRConstant(TypeID constant_type_, uint32_t v0, bool specialized)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
SPIRConstant	spirv_common.hpp	/^	SPIRConstant(TypeID constant_type_, uint64_t v0, bool specialized)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
SPIRConstant	spirv_common.hpp	/^	explicit SPIRConstant(uint32_t constant_type_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
SPIRConstant	spirv_common.hpp	/^struct SPIRConstant : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRConstantOp	spirv_common.hpp	/^	SPIRConstantOp(TypeID result_type, spv::Op op, const uint32_t *args, uint32_t length)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstantOp
SPIRConstantOp	spirv_common.hpp	/^struct SPIRConstantOp : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIREntryPoint	spirv_common.hpp	/^	SPIREntryPoint(FunctionID self_, spv::ExecutionModel execution_model, const std::string &entry_name)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
SPIREntryPoint	spirv_common.hpp	/^struct SPIREntryPoint$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRExpression	spirv_common.hpp	/^	SPIRExpression(std::string expr, TypeID expression_type_, bool immutable_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
SPIRExpression	spirv_common.hpp	/^struct SPIRExpression : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRExtension	spirv_common.hpp	/^	explicit SPIRExtension(Extension ext_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRExtension
SPIRExtension	spirv_common.hpp	/^struct SPIRExtension : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRFunction	spirv_common.hpp	/^	SPIRFunction(TypeID return_type_, TypeID function_type_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
SPIRFunction	spirv_common.hpp	/^struct SPIRFunction : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRFunctionPrototype	spirv_common.hpp	/^	explicit SPIRFunctionPrototype(TypeID return_type_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRFunctionPrototype
SPIRFunctionPrototype	spirv_common.hpp	/^struct SPIRFunctionPrototype : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRString	spirv_common.hpp	/^	explicit SPIRString(std::string str_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRString
SPIRString	spirv_common.hpp	/^struct SPIRString : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRType	spirv_common.hpp	/^struct SPIRType : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRUndef	spirv_common.hpp	/^	explicit SPIRUndef(TypeID basetype_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRUndef
SPIRUndef	spirv_common.hpp	/^struct SPIRUndef : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPIRVCrossDecorationBufferBlockRepacked	spirv_common.hpp	/^	SPIRVCrossDecorationBufferBlockRepacked = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationBuiltInDispatchBase	spirv_common.hpp	/^	SPIRVCrossDecorationBuiltInDispatchBase,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationBuiltInStageInputSize	spirv_common.hpp	/^	SPIRVCrossDecorationBuiltInStageInputSize,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationCount	spirv_common.hpp	/^	SPIRVCrossDecorationCount$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationDynamicImageSampler	spirv_common.hpp	/^	SPIRVCrossDecorationDynamicImageSampler,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationExplicitOffset	spirv_common.hpp	/^	SPIRVCrossDecorationExplicitOffset,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationInterfaceMemberIndex	spirv_common.hpp	/^	SPIRVCrossDecorationInterfaceMemberIndex,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationInterfaceOrigID	spirv_common.hpp	/^	SPIRVCrossDecorationInterfaceOrigID,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationInterpolantComponentExpr	spirv_common.hpp	/^	SPIRVCrossDecorationInterpolantComponentExpr,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationPaddingTarget	spirv_common.hpp	/^	SPIRVCrossDecorationPaddingTarget,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationPhysicalTypeID	spirv_common.hpp	/^	SPIRVCrossDecorationPhysicalTypeID,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationPhysicalTypePacked	spirv_common.hpp	/^	SPIRVCrossDecorationPhysicalTypePacked,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationResourceIndexPrimary	spirv_common.hpp	/^	SPIRVCrossDecorationResourceIndexPrimary,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationResourceIndexQuaternary	spirv_common.hpp	/^	SPIRVCrossDecorationResourceIndexQuaternary,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationResourceIndexSecondary	spirv_common.hpp	/^	SPIRVCrossDecorationResourceIndexSecondary,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationResourceIndexTertiary	spirv_common.hpp	/^	SPIRVCrossDecorationResourceIndexTertiary,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRVCrossDecorationTessIOOriginalInputTypeID	spirv_common.hpp	/^	SPIRVCrossDecorationTessIOOriginalInputTypeID,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::ExtendedDecorations
SPIRV_CROSS_CFG_HPP	spirv_cfg.hpp	25;"	d
SPIRV_CROSS_COMMON_HPP	spirv_common.hpp	25;"	d
SPIRV_CROSS_CONTAINERS_HPP	spirv_cross_containers.hpp	25;"	d
SPIRV_CROSS_CPP_HPP	spirv_cpp.hpp	25;"	d
SPIRV_CROSS_C_API_H	spirv_cross_c.h	25;"	d
SPIRV_CROSS_DECLARE_CLONE	spirv_common.hpp	453;"	d
SPIRV_CROSS_DEPRECATED	spirv_cross_error_handling.hpp	84;"	d
SPIRV_CROSS_DEPRECATED	spirv_cross_error_handling.hpp	86;"	d
SPIRV_CROSS_DEPRECATED	spirv_cross_error_handling.hpp	88;"	d
SPIRV_CROSS_DEPRECATED	spirv_cross_error_handling.hpp	90;"	d
SPIRV_CROSS_ERROR_HANDLING	spirv_cross_error_handling.hpp	25;"	d
SPIRV_CROSS_FLT_FMT	spirv_common.hpp	242;"	d
SPIRV_CROSS_GLSL_HPP	spirv_glsl.hpp	25;"	d
SPIRV_CROSS_HPP	spirv_cross.hpp	25;"	d
SPIRV_CROSS_MSL_HPP	spirv_msl.hpp	25;"	d
SPIRV_CROSS_NAMESPACE	spirv_cfg.cpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n	file:
SPIRV_CROSS_NAMESPACE	spirv_cfg.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_common.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_common.hpp	47;"	d
SPIRV_CROSS_NAMESPACE	spirv_common.hpp	49;"	d
SPIRV_CROSS_NAMESPACE	spirv_cpp.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_cross.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_cross_containers.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_cross_containers.hpp	45;"	d
SPIRV_CROSS_NAMESPACE	spirv_cross_containers.hpp	47;"	d
SPIRV_CROSS_NAMESPACE	spirv_cross_error_handling.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_cross_error_handling.hpp	35;"	d
SPIRV_CROSS_NAMESPACE	spirv_cross_error_handling.hpp	37;"	d
SPIRV_CROSS_NAMESPACE	spirv_cross_parsed_ir.cpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n	file:
SPIRV_CROSS_NAMESPACE	spirv_cross_parsed_ir.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_glsl.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_hlsl.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_msl.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_parser.cpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n	file:
SPIRV_CROSS_NAMESPACE	spirv_parser.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NAMESPACE	spirv_reflect.hpp	/^namespace SPIRV_CROSS_NAMESPACE$/;"	n
SPIRV_CROSS_NOEXCEPT	spirv_cross_error_handling.hpp	78;"	d
SPIRV_CROSS_NOEXCEPT	spirv_cross_error_handling.hpp	80;"	d
SPIRV_CROSS_NOEXCEPT	spirv_cross_parsed_ir.hpp	/^		LoopLock &operator=(LoopLock &&other) SPIRV_CROSS_NOEXCEPT;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR::LoopLock
SPIRV_CROSS_NOEXCEPT	spirv_cross_parsed_ir.hpp	/^		LoopLock(LoopLock &&other) SPIRV_CROSS_NOEXCEPT;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR::LoopLock
SPIRV_CROSS_NOEXCEPT	spirv_cross_parsed_ir.hpp	/^	ParsedIR &operator=(ParsedIR &&other) SPIRV_CROSS_NOEXCEPT;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
SPIRV_CROSS_NOEXCEPT	spirv_cross_parsed_ir.hpp	/^	ParsedIR(ParsedIR &&other) SPIRV_CROSS_NOEXCEPT;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
SPIRV_CROSS_PARSED_IR_HPP	spirv_cross_parsed_ir.hpp	25;"	d
SPIRV_CROSS_PARSER_HPP	spirv_parser.hpp	25;"	d
SPIRV_CROSS_REFLECT_HPP	spirv_reflect.hpp	25;"	d
SPIRV_CROSS_THROW	spirv_cross_error_handling.hpp	60;"	d
SPIRV_CROSS_UTIL_HPP	spirv_cross_util.hpp	25;"	d
SPIRV_HLSL_HPP	spirv_hlsl.hpp	25;"	d
SPIRVariable	spirv_common.hpp	/^	SPIRVariable(TypeID basetype_, spv::StorageClass storage_, ID initializer_ = 0, VariableID basevariable_ = 0)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
SPIRVariable	spirv_common.hpp	/^struct SPIRVariable : IVariant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SPVC_BACKEND_CPP	spirv_cross_c.h	/^	SPVC_BACKEND_CPP = 4, \/* CompilerCPP *\/$/;"	e	enum:spvc_backend
SPVC_BACKEND_GLSL	spirv_cross_c.h	/^	SPVC_BACKEND_GLSL = 1, \/* spirv_cross::CompilerGLSL *\/$/;"	e	enum:spvc_backend
SPVC_BACKEND_HLSL	spirv_cross_c.h	/^	SPVC_BACKEND_HLSL = 2, \/* CompilerHLSL *\/$/;"	e	enum:spvc_backend
SPVC_BACKEND_INT_MAX	spirv_cross_c.h	/^	SPVC_BACKEND_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_backend
SPVC_BACKEND_JSON	spirv_cross_c.h	/^	SPVC_BACKEND_JSON = 5, \/* CompilerReflection w\/ JSON backend *\/$/;"	e	enum:spvc_backend
SPVC_BACKEND_MSL	spirv_cross_c.h	/^	SPVC_BACKEND_MSL = 3, \/* CompilerMSL *\/$/;"	e	enum:spvc_backend
SPVC_BACKEND_NONE	spirv_cross_c.h	/^	SPVC_BACKEND_NONE = 0,$/;"	e	enum:spvc_backend
SPVC_BASETYPE_ACCELERATION_STRUCTURE	spirv_cross_c.h	/^	SPVC_BASETYPE_ACCELERATION_STRUCTURE = 19,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_ATOMIC_COUNTER	spirv_cross_c.h	/^	SPVC_BASETYPE_ATOMIC_COUNTER = 11,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_BOOLEAN	spirv_cross_c.h	/^	SPVC_BASETYPE_BOOLEAN = 2,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_FP16	spirv_cross_c.h	/^	SPVC_BASETYPE_FP16 = 12,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_FP32	spirv_cross_c.h	/^	SPVC_BASETYPE_FP32 = 13,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_FP64	spirv_cross_c.h	/^	SPVC_BASETYPE_FP64 = 14,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_IMAGE	spirv_cross_c.h	/^	SPVC_BASETYPE_IMAGE = 16,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_INT16	spirv_cross_c.h	/^	SPVC_BASETYPE_INT16 = 5,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_INT32	spirv_cross_c.h	/^	SPVC_BASETYPE_INT32 = 7,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_INT64	spirv_cross_c.h	/^	SPVC_BASETYPE_INT64 = 9,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_INT8	spirv_cross_c.h	/^	SPVC_BASETYPE_INT8 = 3,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_INT_MAX	spirv_cross_c.h	/^	SPVC_BASETYPE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_SAMPLED_IMAGE	spirv_cross_c.h	/^	SPVC_BASETYPE_SAMPLED_IMAGE = 17,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_SAMPLER	spirv_cross_c.h	/^	SPVC_BASETYPE_SAMPLER = 18,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_STRUCT	spirv_cross_c.h	/^	SPVC_BASETYPE_STRUCT = 15,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_UINT16	spirv_cross_c.h	/^	SPVC_BASETYPE_UINT16 = 6,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_UINT32	spirv_cross_c.h	/^	SPVC_BASETYPE_UINT32 = 8,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_UINT64	spirv_cross_c.h	/^	SPVC_BASETYPE_UINT64 = 10,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_UINT8	spirv_cross_c.h	/^	SPVC_BASETYPE_UINT8 = 4,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_UNKNOWN	spirv_cross_c.h	/^	SPVC_BASETYPE_UNKNOWN = 0,$/;"	e	enum:spvc_basetype
SPVC_BASETYPE_VOID	spirv_cross_c.h	/^	SPVC_BASETYPE_VOID = 1,$/;"	e	enum:spvc_basetype
SPVC_BEGIN_SAFE_SCOPE	spirv_cross_c.cpp	61;"	d	file:
SPVC_BEGIN_SAFE_SCOPE	spirv_cross_c.cpp	63;"	d	file:
SPVC_BUILTIN_RESOURCE_TYPE_INT_MAX	spirv_cross_c.h	/^	SPVC_BUILTIN_RESOURCE_TYPE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_builtin_resource_type
SPVC_BUILTIN_RESOURCE_TYPE_STAGE_INPUT	spirv_cross_c.h	/^	SPVC_BUILTIN_RESOURCE_TYPE_STAGE_INPUT = 1,$/;"	e	enum:spvc_builtin_resource_type
SPVC_BUILTIN_RESOURCE_TYPE_STAGE_OUTPUT	spirv_cross_c.h	/^	SPVC_BUILTIN_RESOURCE_TYPE_STAGE_OUTPUT = 2,$/;"	e	enum:spvc_builtin_resource_type
SPVC_BUILTIN_RESOURCE_TYPE_UNKNOWN	spirv_cross_c.h	/^	SPVC_BUILTIN_RESOURCE_TYPE_UNKNOWN = 0,$/;"	e	enum:spvc_builtin_resource_type
SPVC_CAPTURE_MODE_COPY	spirv_cross_c.h	/^	SPVC_CAPTURE_MODE_COPY = 0,$/;"	e	enum:spvc_capture_mode
SPVC_CAPTURE_MODE_INT_MAX	spirv_cross_c.h	/^	SPVC_CAPTURE_MODE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_capture_mode
SPVC_CAPTURE_MODE_TAKE_OWNERSHIP	spirv_cross_c.h	/^	SPVC_CAPTURE_MODE_TAKE_OWNERSHIP = 1,$/;"	e	enum:spvc_capture_mode
SPVC_COMPILER_OPTION_COMMON_BIT	spirv_cross_c.h	266;"	d
SPVC_COMPILER_OPTION_EMIT_LINE_DIRECTIVES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_EMIT_LINE_DIRECTIVES = 37 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_ENABLE_STORAGE_IMAGE_QUALIFIER_DEDUCTION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_ENABLE_STORAGE_IMAGE_QUALIFIER_DEDUCTION = 52 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_ENUM_BITS	spirv_cross_c.h	271;"	d
SPVC_COMPILER_OPTION_FIXUP_DEPTH_CONVENTION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_FIXUP_DEPTH_CONVENTION = 3 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_FLATTEN_MULTIDIMENSIONAL_ARRAYS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_FLATTEN_MULTIDIMENSIONAL_ARRAYS = 2 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_FLIP_VERTEX_Y	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_FLIP_VERTEX_Y = 4 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_FORCE_TEMPORARY	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_FORCE_TEMPORARY = 1 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_FORCE_ZERO_INITIALIZED_VARIABLES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_FORCE_ZERO_INITIALIZED_VARIABLES = 54 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_BIT	spirv_cross_c.h	267;"	d
SPVC_COMPILER_OPTION_GLSL_EMIT_PUSH_CONSTANT_AS_UNIFORM_BUFFER	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_EMIT_PUSH_CONSTANT_AS_UNIFORM_BUFFER = 33 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_EMIT_UNIFORM_BUFFER_AS_PLAIN_UNIFORMS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_EMIT_UNIFORM_BUFFER_AS_PLAIN_UNIFORMS = 35 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_ENABLE_420PACK_EXTENSION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_ENABLE_420PACK_EXTENSION = 7 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_ES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_ES = 9 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_FLOAT_PRECISION_HIGHP	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_FLOAT_PRECISION_HIGHP = 11 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_INT_PRECISION_HIGHP	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_ES_DEFAULT_INT_PRECISION_HIGHP = 12 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_FORCE_FLATTENED_IO_BLOCKS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_FORCE_FLATTENED_IO_BLOCKS = 66 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_OVR_MULTIVIEW_VIEW_COUNT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_OVR_MULTIVIEW_VIEW_COUNT = 77 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_SEPARATE_SHADER_OBJECTS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_SEPARATE_SHADER_OBJECTS = 6 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_SUPPORT_NONZERO_BASE_INSTANCE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_SUPPORT_NONZERO_BASE_INSTANCE = 5 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_VERSION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_VERSION = 8 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_GLSL_VULKAN_SEMANTICS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_GLSL_VULKAN_SEMANTICS = 10 | SPVC_COMPILER_OPTION_GLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_BIT	spirv_cross_c.h	268;"	d
SPVC_COMPILER_OPTION_HLSL_ENABLE_16BIT_TYPES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_ENABLE_16BIT_TYPES = 60 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_FLATTEN_MATRIX_VERTEX_INPUT_SEMANTICS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_FLATTEN_MATRIX_VERTEX_INPUT_SEMANTICS = 71 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_FORCE_STORAGE_BUFFER_AS_UAV	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_FORCE_STORAGE_BUFFER_AS_UAV = 53 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_NONWRITABLE_UAV_TEXTURE_AS_SRV	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_NONWRITABLE_UAV_TEXTURE_AS_SRV = 55 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_POINT_COORD_COMPAT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_POINT_COORD_COMPAT = 15 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_POINT_SIZE_COMPAT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_POINT_SIZE_COMPAT = 14 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_SHADER_MODEL	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_SHADER_MODEL = 13 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_HLSL_SUPPORT_NONZERO_BASE_VERTEX_BASE_INSTANCE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_HLSL_SUPPORT_NONZERO_BASE_VERTEX_BASE_INSTANCE = 16 | SPVC_COMPILER_OPTION_HLSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_INT_MAX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_LANG_BITS	spirv_cross_c.h	270;"	d
SPVC_COMPILER_OPTION_MSL_ARGUMENT_BUFFERS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ARGUMENT_BUFFERS = 32 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ARRAYED_SUBPASS_INPUT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ARRAYED_SUBPASS_INPUT = 68 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_AUX_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_AUX_BUFFER_INDEX = 19 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_BIT	spirv_cross_c.h	269;"	d
SPVC_COMPILER_OPTION_MSL_BUFFER_SIZE_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_BUFFER_SIZE_BUFFER_INDEX = 36 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_CAPTURE_OUTPUT_TO_BUFFER	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_CAPTURE_OUTPUT_TO_BUFFER = 27 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_DEVICE_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_DEVICE_INDEX = 40 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_DISABLE_RASTERIZATION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_DISABLE_RASTERIZATION = 26 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_DISPATCH_BASE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_DISPATCH_BASE = 42 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_DYNAMIC_OFFSETS_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_DYNAMIC_OFFSETS_BUFFER_INDEX = 43 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_EMULATE_CUBEMAP_ARRAY	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_EMULATE_CUBEMAP_ARRAY = 48 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_EMULATE_SUBGROUPS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_EMULATE_SUBGROUPS = 73 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_BASE_INDEX_ZERO	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_BASE_INDEX_ZERO = 45 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_CLIP_DISTANCE_USER_VARYING	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_CLIP_DISTANCE_USER_VARYING = 59 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_DECORATION_BINDING	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_DECORATION_BINDING = 49 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_DEPTH_BUILTIN	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_DEPTH_BUILTIN = 57 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_OUTPUT_MASK	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_OUTPUT_MASK = 56 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_STENCIL_REF_BUILTIN	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_FRAG_STENCIL_REF_BUILTIN = 58 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_ENABLE_POINT_SIZE_BUILTIN	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_ENABLE_POINT_SIZE_BUILTIN = 25 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_FIXED_SUBGROUP_SIZE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_FIXED_SUBGROUP_SIZE = 74 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_FORCE_ACTIVE_ARGUMENT_BUFFER_RESOURCES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_FORCE_ACTIVE_ARGUMENT_BUFFER_RESOURCES = 50 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_FORCE_NATIVE_ARRAYS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_FORCE_NATIVE_ARRAYS = 51 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_FORCE_SAMPLE_RATE_SHADING	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_FORCE_SAMPLE_RATE_SHADING = 75 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_FRAMEBUFFER_FETCH_SUBPASS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_FRAMEBUFFER_FETCH_SUBPASS = 46 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_INDIRECT_PARAMS_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_INDIRECT_PARAMS_BUFFER_INDEX = 20 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_INVARIANT_FP_MATH	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_INVARIANT_FP_MATH = 47 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_IOS_FRAMEBUFFER_FETCH_SUBPASS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_IOS_FRAMEBUFFER_FETCH_SUBPASS = 46 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_IOS_SUPPORT_BASE_VERTEX_INSTANCE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_IOS_SUPPORT_BASE_VERTEX_INSTANCE = 76 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_IOS_USE_SIMDGROUP_FUNCTIONS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_IOS_USE_SIMDGROUP_FUNCTIONS = 72 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_MULTIVIEW	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_MULTIVIEW = 38 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_MULTIVIEW_LAYERED_RENDERING	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_MULTIVIEW_LAYERED_RENDERING = 67 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_MULTI_PATCH_WORKGROUP	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_MULTI_PATCH_WORKGROUP = 61 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_PAD_FRAGMENT_OUTPUT_COMPONENTS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_PAD_FRAGMENT_OUTPUT_COMPONENTS = 29 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_PLATFORM	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_PLATFORM = 31 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_R32UI_ALIGNMENT_CONSTANT_ID	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_R32UI_ALIGNMENT_CONSTANT_ID = 70 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_R32UI_LINEAR_TEXTURE_ALIGNMENT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_R32UI_LINEAR_TEXTURE_ALIGNMENT = 69 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_INDEX_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_INDEX_BUFFER_INDEX = 63 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_BUFFER_INDEX = 62 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_WORKGROUP_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_INPUT_WORKGROUP_INDEX = 24 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_OUTPUT_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_OUTPUT_BUFFER_INDEX = 21 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_PATCH_OUTPUT_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_PATCH_OUTPUT_BUFFER_INDEX = 22 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SHADER_TESS_FACTOR_OUTPUT_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SHADER_TESS_FACTOR_OUTPUT_BUFFER_INDEX = 23 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SWIZZLE_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SWIZZLE_BUFFER_INDEX = 19 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_SWIZZLE_TEXTURE_SAMPLES	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_SWIZZLE_TEXTURE_SAMPLES = 28 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_TESS_DOMAIN_ORIGIN_LOWER_LEFT	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_TESS_DOMAIN_ORIGIN_LOWER_LEFT = 30 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_TEXEL_BUFFER_TEXTURE_WIDTH	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_TEXEL_BUFFER_TEXTURE_WIDTH = 18 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_TEXTURE_1D_AS_2D	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_TEXTURE_1D_AS_2D = 44 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_TEXTURE_BUFFER_NATIVE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_TEXTURE_BUFFER_NATIVE = 34 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_VERSION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_VERSION = 17 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_VERTEX_FOR_TESSELLATION	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_VERTEX_FOR_TESSELLATION = 64 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_VERTEX_INDEX_TYPE	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_VERTEX_INDEX_TYPE = 65 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_VIEW_INDEX_FROM_DEVICE_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_VIEW_INDEX_FROM_DEVICE_INDEX = 41 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_MSL_VIEW_MASK_BUFFER_INDEX	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_MSL_VIEW_MASK_BUFFER_INDEX = 39 | SPVC_COMPILER_OPTION_MSL_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_RELAX_NAN_CHECKS	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_RELAX_NAN_CHECKS = 78 | SPVC_COMPILER_OPTION_COMMON_BIT,$/;"	e	enum:spvc_compiler_option
SPVC_COMPILER_OPTION_UNKNOWN	spirv_cross_c.h	/^	SPVC_COMPILER_OPTION_UNKNOWN = 0,$/;"	e	enum:spvc_compiler_option
SPVC_C_API_VERSION_MAJOR	spirv_cross_c.h	41;"	d
SPVC_C_API_VERSION_MINOR	spirv_cross_c.h	43;"	d
SPVC_C_API_VERSION_PATCH	spirv_cross_c.h	45;"	d
SPVC_END_SAFE_SCOPE	spirv_cross_c.cpp	67;"	d	file:
SPVC_END_SAFE_SCOPE	spirv_cross_c.cpp	74;"	d	file:
SPVC_ERROR_INT_MAX	spirv_cross_c.h	/^	SPVC_ERROR_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_result
SPVC_ERROR_INVALID_ARGUMENT	spirv_cross_c.h	/^	SPVC_ERROR_INVALID_ARGUMENT = -4,$/;"	e	enum:spvc_result
SPVC_ERROR_INVALID_SPIRV	spirv_cross_c.h	/^	SPVC_ERROR_INVALID_SPIRV = -1,$/;"	e	enum:spvc_result
SPVC_ERROR_OUT_OF_MEMORY	spirv_cross_c.h	/^	SPVC_ERROR_OUT_OF_MEMORY = -3,$/;"	e	enum:spvc_result
SPVC_ERROR_UNSUPPORTED_SPIRV	spirv_cross_c.h	/^	SPVC_ERROR_UNSUPPORTED_SPIRV = -2,$/;"	e	enum:spvc_result
SPVC_FALSE	spirv_cross_c.h	162;"	d
SPVC_HLSL_BINDING_AUTO_ALL	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_ALL = 0x7fffffff$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_CBV_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_CBV_BIT = 1 << 1,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_NONE_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_NONE_BIT = 0,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_PUSH_CONSTANT_BIT = 1 << 0,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_SAMPLER_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_SAMPLER_BIT = 1 << 4,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_SRV_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_SRV_BIT = 1 << 2,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_BINDING_AUTO_UAV_BIT	spirv_cross_c.h	/^	SPVC_HLSL_BINDING_AUTO_UAV_BIT = 1 << 3,$/;"	e	enum:spvc_hlsl_binding_flag_bits
SPVC_HLSL_PUSH_CONSTANT_BINDING	spirv_cross_c.h	544;"	d
SPVC_HLSL_PUSH_CONSTANT_DESC_SET	spirv_cross_c.h	543;"	d
SPVC_MAKE_MSL_VERSION	spirv_cross_c.h	273;"	d
SPVC_MSL_ARGUMENT_BUFFER_BINDING	spirv_cross_c.h	367;"	d
SPVC_MSL_AUX_BUFFER_STRUCT_VERSION	spirv_cross_c.h	370;"	d
SPVC_MSL_BUFFER_SIZE_BUFFER_BINDING	spirv_cross_c.h	366;"	d
SPVC_MSL_CHROMA_LOCATION_COSITED_EVEN	spirv_cross_c.h	/^	SPVC_MSL_CHROMA_LOCATION_COSITED_EVEN = 0,$/;"	e	enum:spvc_msl_chroma_location
SPVC_MSL_CHROMA_LOCATION_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_CHROMA_LOCATION_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_chroma_location
SPVC_MSL_CHROMA_LOCATION_MIDPOINT	spirv_cross_c.h	/^	SPVC_MSL_CHROMA_LOCATION_MIDPOINT,$/;"	e	enum:spvc_msl_chroma_location
SPVC_MSL_COMPONENT_SWIZZLE_A	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_A,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_B	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_B,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_G	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_G,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_IDENTITY	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_IDENTITY = 0,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_ONE	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_ONE,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_R	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_R,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_COMPONENT_SWIZZLE_ZERO	spirv_cross_c.h	/^	SPVC_MSL_COMPONENT_SWIZZLE_ZERO,$/;"	e	enum:spvc_msl_component_swizzle
SPVC_MSL_FORMAT_RESOLUTION_420	spirv_cross_c.h	/^	SPVC_MSL_FORMAT_RESOLUTION_420,$/;"	e	enum:spvc_msl_format_resolution
SPVC_MSL_FORMAT_RESOLUTION_422	spirv_cross_c.h	/^	SPVC_MSL_FORMAT_RESOLUTION_422,$/;"	e	enum:spvc_msl_format_resolution
SPVC_MSL_FORMAT_RESOLUTION_444	spirv_cross_c.h	/^	SPVC_MSL_FORMAT_RESOLUTION_444 = 0,$/;"	e	enum:spvc_msl_format_resolution
SPVC_MSL_FORMAT_RESOLUTION_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_FORMAT_RESOLUTION_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_format_resolution
SPVC_MSL_INDEX_TYPE_MAX_INT	spirv_cross_c.h	/^	SPVC_MSL_INDEX_TYPE_MAX_INT = 0x7fffffff$/;"	e	enum:spvc_msl_index_type
SPVC_MSL_INDEX_TYPE_NONE	spirv_cross_c.h	/^	SPVC_MSL_INDEX_TYPE_NONE = 0,$/;"	e	enum:spvc_msl_index_type
SPVC_MSL_INDEX_TYPE_UINT16	spirv_cross_c.h	/^	SPVC_MSL_INDEX_TYPE_UINT16 = 1,$/;"	e	enum:spvc_msl_index_type
SPVC_MSL_INDEX_TYPE_UINT32	spirv_cross_c.h	/^	SPVC_MSL_INDEX_TYPE_UINT32 = 2,$/;"	e	enum:spvc_msl_index_type
SPVC_MSL_PLATFORM_IOS	spirv_cross_c.h	/^	SPVC_MSL_PLATFORM_IOS = 0,$/;"	e	enum:spvc_msl_platform
SPVC_MSL_PLATFORM_MACOS	spirv_cross_c.h	/^	SPVC_MSL_PLATFORM_MACOS = 1,$/;"	e	enum:spvc_msl_platform
SPVC_MSL_PLATFORM_MAX_INT	spirv_cross_c.h	/^	SPVC_MSL_PLATFORM_MAX_INT = 0x7fffffff$/;"	e	enum:spvc_msl_platform
SPVC_MSL_PUSH_CONSTANT_BINDING	spirv_cross_c.h	364;"	d
SPVC_MSL_PUSH_CONSTANT_DESC_SET	spirv_cross_c.h	363;"	d
SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_BORDER = 2,$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE = 1,$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_CLAMP_TO_ZERO = 0,$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_ADDRESS_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_MIRRORED_REPEAT = 4,$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_ADDRESS_REPEAT	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_ADDRESS_REPEAT = 3,$/;"	e	enum:spvc_msl_sampler_address
SPVC_MSL_SAMPLER_BORDER_COLOR_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_BORDER_COLOR_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_border_color
SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_BLACK = 1,$/;"	e	enum:spvc_msl_sampler_border_color
SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_BORDER_COLOR_OPAQUE_WHITE = 2,$/;"	e	enum:spvc_msl_sampler_border_color
SPVC_MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK = 0,$/;"	e	enum:spvc_msl_sampler_border_color
SPVC_MSL_SAMPLER_COMPARE_FUNC_ALWAYS	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_ALWAYS = 7,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_EQUAL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_EQUAL = 5,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER = 3,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_GREATER_EQUAL = 4,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS = 1,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_LESS_EQUAL = 2,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_NEVER	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_NEVER = 0,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COMPARE_FUNC_NOT_EQUAL = 6,$/;"	e	enum:spvc_msl_sampler_compare_func
SPVC_MSL_SAMPLER_COORD_NORMALIZED	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COORD_NORMALIZED = 0,$/;"	e	enum:spvc_msl_sampler_coord
SPVC_MSL_SAMPLER_COORD_PIXEL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_COORD_PIXEL = 1,$/;"	e	enum:spvc_msl_sampler_coord
SPVC_MSL_SAMPLER_FILTER_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_FILTER_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_filter
SPVC_MSL_SAMPLER_FILTER_LINEAR	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_FILTER_LINEAR = 1,$/;"	e	enum:spvc_msl_sampler_filter
SPVC_MSL_SAMPLER_FILTER_NEAREST	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_FILTER_NEAREST = 0,$/;"	e	enum:spvc_msl_sampler_filter
SPVC_MSL_SAMPLER_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_coord
SPVC_MSL_SAMPLER_MIP_FILTER_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_MIP_FILTER_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_mip_filter
SPVC_MSL_SAMPLER_MIP_FILTER_LINEAR	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_MIP_FILTER_LINEAR = 2,$/;"	e	enum:spvc_msl_sampler_mip_filter
SPVC_MSL_SAMPLER_MIP_FILTER_NEAREST	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_MIP_FILTER_NEAREST = 1,$/;"	e	enum:spvc_msl_sampler_mip_filter
SPVC_MSL_SAMPLER_MIP_FILTER_NONE	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_MIP_FILTER_NONE = 0,$/;"	e	enum:spvc_msl_sampler_mip_filter
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_2020,$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_601,$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_BT_709,$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,$/;"	e	enum:spvc_msl_sampler_ycbcr_model_conversion
SPVC_MSL_SAMPLER_YCBCR_RANGE_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_RANGE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_sampler_ycbcr_range
SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_FULL	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,$/;"	e	enum:spvc_msl_sampler_ycbcr_range
SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW	spirv_cross_c.h	/^	SPVC_MSL_SAMPLER_YCBCR_RANGE_ITU_NARROW,$/;"	e	enum:spvc_msl_sampler_ycbcr_range
SPVC_MSL_SHADER_INPUT_FORMAT_ANY16	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_ANY16 = 3,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SHADER_INPUT_FORMAT_ANY32	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_ANY32 = 4,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SHADER_INPUT_FORMAT_INT_MAX	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SHADER_INPUT_FORMAT_OTHER	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_OTHER = 0,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SHADER_INPUT_FORMAT_UINT16	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_UINT16 = 2,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SHADER_INPUT_FORMAT_UINT8	spirv_cross_c.h	/^	SPVC_MSL_SHADER_INPUT_FORMAT_UINT8 = 1,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_SWIZZLE_BUFFER_BINDING	spirv_cross_c.h	365;"	d
SPVC_MSL_VERTEX_FORMAT_OTHER	spirv_cross_c.h	/^	SPVC_MSL_VERTEX_FORMAT_OTHER = SPVC_MSL_SHADER_INPUT_FORMAT_OTHER,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_VERTEX_FORMAT_UINT16	spirv_cross_c.h	/^	SPVC_MSL_VERTEX_FORMAT_UINT16 = SPVC_MSL_SHADER_INPUT_FORMAT_UINT16,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_MSL_VERTEX_FORMAT_UINT8	spirv_cross_c.h	/^	SPVC_MSL_VERTEX_FORMAT_UINT8 = SPVC_MSL_SHADER_INPUT_FORMAT_UINT8,$/;"	e	enum:spvc_msl_shader_input_format
SPVC_PUBLIC_API	spirv_cross_c.h	51;"	d
SPVC_PUBLIC_API	spirv_cross_c.h	53;"	d
SPVC_PUBLIC_API	spirv_cross_c.h	55;"	d
SPVC_PUBLIC_API	spirv_cross_c.h	58;"	d
SPVC_RESOURCE_TYPE_ACCELERATION_STRUCTURE	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_ACCELERATION_STRUCTURE = 12,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_ATOMIC_COUNTER	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_ATOMIC_COUNTER = 8,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_INT_MAX	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_INT_MAX = 0x7fffffff$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_PUSH_CONSTANT	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_PUSH_CONSTANT = 9,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_RAY_QUERY	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_RAY_QUERY = 13,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_SAMPLED_IMAGE	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_SAMPLED_IMAGE = 7,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_SEPARATE_IMAGE	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_SEPARATE_IMAGE = 10,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_SEPARATE_SAMPLERS	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_SEPARATE_SAMPLERS = 11,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_STAGE_INPUT	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_STAGE_INPUT = 3,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_STAGE_OUTPUT	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_STAGE_OUTPUT = 4,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_STORAGE_BUFFER	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_STORAGE_BUFFER = 2,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_STORAGE_IMAGE	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_STORAGE_IMAGE = 6,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_SUBPASS_INPUT	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_SUBPASS_INPUT = 5,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_UNIFORM_BUFFER	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_UNIFORM_BUFFER = 1,$/;"	e	enum:spvc_resource_type
SPVC_RESOURCE_TYPE_UNKNOWN	spirv_cross_c.h	/^	SPVC_RESOURCE_TYPE_UNKNOWN = 0,$/;"	e	enum:spvc_resource_type
SPVC_SUCCESS	spirv_cross_c.h	/^	SPVC_SUCCESS = 0,$/;"	e	enum:spvc_result
SPVC_TRUE	spirv_cross_c.h	161;"	d
SPVFuncImplArrayCopy	spirv_msl.hpp	/^		SPVFuncImplArrayCopy = SPVFuncImplArrayCopyMultidimBase + 1,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayCopyMultidimBase	spirv_msl.hpp	/^		SPVFuncImplArrayCopyMultidimBase,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayOfArrayCopy2Dim	spirv_msl.hpp	/^		SPVFuncImplArrayOfArrayCopy2Dim = SPVFuncImplArrayCopyMultidimBase + 2,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayOfArrayCopy3Dim	spirv_msl.hpp	/^		SPVFuncImplArrayOfArrayCopy3Dim = SPVFuncImplArrayCopyMultidimBase + 3,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayOfArrayCopy4Dim	spirv_msl.hpp	/^		SPVFuncImplArrayOfArrayCopy4Dim = SPVFuncImplArrayCopyMultidimBase + 4,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayOfArrayCopy5Dim	spirv_msl.hpp	/^		SPVFuncImplArrayOfArrayCopy5Dim = SPVFuncImplArrayCopyMultidimBase + 5,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplArrayOfArrayCopy6Dim	spirv_msl.hpp	/^		SPVFuncImplArrayOfArrayCopy6Dim = SPVFuncImplArrayCopyMultidimBase + 6,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XCositedEvenYCositedEven2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XCositedEvenYCositedEven2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XCositedEvenYCositedEven3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XCositedEvenYCositedEven3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XCositedEvenYMidpoint2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XCositedEvenYMidpoint2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XCositedEvenYMidpoint3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XCositedEvenYMidpoint3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XMidpointYCositedEven2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XMidpointYCositedEven2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XMidpointYCositedEven3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XMidpointYCositedEven3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XMidpointYMidpoint2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XMidpointYMidpoint2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear420XMidpointYMidpoint3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear420XMidpointYMidpoint3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear422CositedEven2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear422CositedEven2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear422CositedEven3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear422CositedEven3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear422Midpoint2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear422Midpoint2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructLinear422Midpoint3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructLinear422Midpoint3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructNearest2Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructNearest2Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplChromaReconstructNearest3Plane	spirv_msl.hpp	/^		SPVFuncImplChromaReconstructNearest3Plane,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplConvertYCbCrBT2020	spirv_msl.hpp	/^		SPVFuncImplConvertYCbCrBT2020,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplConvertYCbCrBT601	spirv_msl.hpp	/^		SPVFuncImplConvertYCbCrBT601,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplConvertYCbCrBT709	spirv_msl.hpp	/^		SPVFuncImplConvertYCbCrBT709,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplCubemapTo2DArrayFace	spirv_msl.hpp	/^		SPVFuncImplCubemapTo2DArrayFace,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplDegrees	spirv_msl.hpp	/^		SPVFuncImplDegrees,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplDynamicImageSampler	spirv_msl.hpp	/^		SPVFuncImplDynamicImageSampler,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplExpandITUFullRange	spirv_msl.hpp	/^		SPVFuncImplExpandITUFullRange,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplExpandITUNarrowRange	spirv_msl.hpp	/^		SPVFuncImplExpandITUNarrowRange,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFAdd	spirv_msl.hpp	/^		SPVFuncImplFAdd,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFMul	spirv_msl.hpp	/^		SPVFuncImplFMul,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFSub	spirv_msl.hpp	/^		SPVFuncImplFSub,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFaceForwardScalar	spirv_msl.hpp	/^		SPVFuncImplFaceForwardScalar,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFindILsb	spirv_msl.hpp	/^		SPVFuncImplFindILsb,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFindSMsb	spirv_msl.hpp	/^		SPVFuncImplFindSMsb,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplFindUMsb	spirv_msl.hpp	/^		SPVFuncImplFindUMsb,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplForwardArgs	spirv_msl.hpp	/^		SPVFuncImplForwardArgs,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplGatherCompareSwizzle	spirv_msl.hpp	/^		SPVFuncImplGatherCompareSwizzle,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplGatherSwizzle	spirv_msl.hpp	/^		SPVFuncImplGatherSwizzle,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplGetSwizzle	spirv_msl.hpp	/^		SPVFuncImplGetSwizzle,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplImage2DAtomicCoords	spirv_msl.hpp	/^		SPVFuncImplImage2DAtomicCoords, \/\/ Emulate texture2D atomic operations$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplInverse2x2	spirv_msl.hpp	/^		SPVFuncImplInverse2x2,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplInverse3x3	spirv_msl.hpp	/^		SPVFuncImplInverse3x3,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplInverse4x4	spirv_msl.hpp	/^		SPVFuncImplInverse4x4,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplMod	spirv_msl.hpp	/^		SPVFuncImplMod,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplQuadBroadcast	spirv_msl.hpp	/^		SPVFuncImplQuadBroadcast,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplQuadSwap	spirv_msl.hpp	/^		SPVFuncImplQuadSwap,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplQuantizeToF16	spirv_msl.hpp	/^		SPVFuncImplQuantizeToF16,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplRadians	spirv_msl.hpp	/^		SPVFuncImplRadians,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplReflectScalar	spirv_msl.hpp	/^		SPVFuncImplReflectScalar,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplRefractScalar	spirv_msl.hpp	/^		SPVFuncImplRefractScalar,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSSign	spirv_msl.hpp	/^		SPVFuncImplSSign,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupAllEqual	spirv_msl.hpp	/^		SPVFuncImplSubgroupAllEqual,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBallot	spirv_msl.hpp	/^		SPVFuncImplSubgroupBallot,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBallotBitCount	spirv_msl.hpp	/^		SPVFuncImplSubgroupBallotBitCount,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBallotBitExtract	spirv_msl.hpp	/^		SPVFuncImplSubgroupBallotBitExtract,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBallotFindLSB	spirv_msl.hpp	/^		SPVFuncImplSubgroupBallotFindLSB,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBallotFindMSB	spirv_msl.hpp	/^		SPVFuncImplSubgroupBallotFindMSB,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBroadcast	spirv_msl.hpp	/^		SPVFuncImplSubgroupBroadcast,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupBroadcastFirst	spirv_msl.hpp	/^		SPVFuncImplSubgroupBroadcastFirst,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupShuffle	spirv_msl.hpp	/^		SPVFuncImplSubgroupShuffle,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupShuffleDown	spirv_msl.hpp	/^		SPVFuncImplSubgroupShuffleDown,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupShuffleUp	spirv_msl.hpp	/^		SPVFuncImplSubgroupShuffleUp,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplSubgroupShuffleXor	spirv_msl.hpp	/^		SPVFuncImplSubgroupShuffleXor,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplTexelBufferCoords	spirv_msl.hpp	/^		SPVFuncImplTexelBufferCoords,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplTextureSwizzle	spirv_msl.hpp	/^		SPVFuncImplTextureSwizzle,$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPVFuncImplUnsafeArray	spirv_msl.hpp	/^		SPVFuncImplUnsafeArray, \/\/ Allow Metal to use the array<T> template to make arrays a value type$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options	typeref:enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::
SPV_AMD_gcn_shader	spirv_common.hpp	/^		SPV_AMD_gcn_shader,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
SPV_AMD_shader_ballot	spirv_common.hpp	/^		SPV_AMD_shader_ballot,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
SPV_AMD_shader_explicit_vertex_parameter	spirv_common.hpp	/^		SPV_AMD_shader_explicit_vertex_parameter,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
SPV_AMD_shader_trinary_minmax	spirv_common.hpp	/^		SPV_AMD_shader_trinary_minmax,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
SPV_ENABLE_UTILITY_CODE	spirv_common.hpp	28;"	d
SPV_ENABLE_UTILITY_CODE	spirv_cross.hpp	28;"	d
SPV_REVISION	spirv.h	57;"	d
SPV_REVISION	spirv.hpp	53;"	d
SPV_VERSION	spirv.h	56;"	d
SPV_VERSION	spirv.hpp	52;"	d
SPV_debug_info	spirv_common.hpp	/^		SPV_debug_info,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
STATIC_LIB	Makefile	/^STATIC_LIB := lib$(TARGET).a$/;"	m
SampledImage	spirv_common.hpp	/^		SampledImage,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
SampledImageScanner	spirv_msl.hpp	/^		SampledImageScanner(CompilerMSL &compiler_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::SampledImageScanner
SampledImageScanner	spirv_msl.hpp	/^	struct SampledImageScanner : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
Sampler	spirv_common.hpp	/^		Sampler,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
SamplerAddressingMode	spirv.hpp	/^enum SamplerAddressingMode {$/;"	g	namespace:spv
SamplerAddressingModeClamp	spirv.hpp	/^    SamplerAddressingModeClamp = 2,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeClampToEdge	spirv.hpp	/^    SamplerAddressingModeClampToEdge = 1,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeMax	spirv.hpp	/^    SamplerAddressingModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeNone	spirv.hpp	/^    SamplerAddressingModeNone = 0,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeRepeat	spirv.hpp	/^    SamplerAddressingModeRepeat = 3,$/;"	e	enum:spv::SamplerAddressingMode
SamplerAddressingModeRepeatMirrored	spirv.hpp	/^    SamplerAddressingModeRepeatMirrored = 4,$/;"	e	enum:spv::SamplerAddressingMode
SamplerFilterMode	spirv.hpp	/^enum SamplerFilterMode {$/;"	g	namespace:spv
SamplerFilterModeLinear	spirv.hpp	/^    SamplerFilterModeLinear = 1,$/;"	e	enum:spv::SamplerFilterMode
SamplerFilterModeMax	spirv.hpp	/^    SamplerFilterModeMax = 0x7fffffff,$/;"	e	enum:spv::SamplerFilterMode
SamplerFilterModeNearest	spirv.hpp	/^    SamplerFilterModeNearest = 0,$/;"	e	enum:spv::SamplerFilterMode
Scope	spirv.hpp	/^enum Scope {$/;"	g	namespace:spv
ScopeCrossDevice	spirv.hpp	/^    ScopeCrossDevice = 0,$/;"	e	enum:spv::Scope
ScopeDevice	spirv.hpp	/^    ScopeDevice = 1,$/;"	e	enum:spv::Scope
ScopeInvocation	spirv.hpp	/^    ScopeInvocation = 4,$/;"	e	enum:spv::Scope
ScopeMax	spirv.hpp	/^    ScopeMax = 0x7fffffff,$/;"	e	enum:spv::Scope
ScopeQueueFamily	spirv.hpp	/^    ScopeQueueFamily = 5,$/;"	e	enum:spv::Scope
ScopeQueueFamilyKHR	spirv.hpp	/^    ScopeQueueFamilyKHR = 5,$/;"	e	enum:spv::Scope
ScopeShaderCallKHR	spirv.hpp	/^    ScopeShaderCallKHR = 6,$/;"	e	enum:spv::Scope
ScopeSubgroup	spirv.hpp	/^    ScopeSubgroup = 3,$/;"	e	enum:spv::Scope
ScopeWorkgroup	spirv.hpp	/^    ScopeWorkgroup = 2,$/;"	e	enum:spv::Scope
ScratchMemoryAllocation	spirv_cross_c.cpp	/^struct ScratchMemoryAllocation$/;"	s	file:
Select	spirv_common.hpp	/^		Select, \/\/ Block ends with an if\/else block.$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
SelectionControlDontFlattenMask	spirv.hpp	/^    SelectionControlDontFlattenMask = 0x00000002,$/;"	e	enum:spv::SelectionControlMask
SelectionControlDontFlattenShift	spirv.hpp	/^    SelectionControlDontFlattenShift = 1,$/;"	e	enum:spv::SelectionControlShift
SelectionControlFlattenMask	spirv.hpp	/^    SelectionControlFlattenMask = 0x00000001,$/;"	e	enum:spv::SelectionControlMask
SelectionControlFlattenShift	spirv.hpp	/^    SelectionControlFlattenShift = 0,$/;"	e	enum:spv::SelectionControlShift
SelectionControlMask	spirv.hpp	/^enum SelectionControlMask {$/;"	g	namespace:spv
SelectionControlMaskNone	spirv.hpp	/^    SelectionControlMaskNone = 0,$/;"	e	enum:spv::SelectionControlMask
SelectionControlMax	spirv.hpp	/^    SelectionControlMax = 0x7fffffff,$/;"	e	enum:spv::SelectionControlShift
SelectionControlShift	spirv.hpp	/^enum SelectionControlShift {$/;"	g	namespace:spv
SetBindingPair	spirv_common.hpp	/^struct SetBindingPair$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
ShaderResources	spirv_cross.hpp	/^struct ShaderResources$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
ShaderSubgroupSupportHelper	spirv_glsl.hpp	/^	struct ShaderSubgroupSupportHelper$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
Short	spirv_common.hpp	/^		Short,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
SmallVector	spirv_cross_containers.hpp	/^	SmallVector(SmallVector &&other) SPIRV_CROSS_NOEXCEPT : SmallVector()$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
SmallVector	spirv_cross_containers.hpp	/^	SmallVector(const SmallVector &other) SPIRV_CROSS_NOEXCEPT : SmallVector()$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
SmallVector	spirv_cross_containers.hpp	/^	SmallVector(const T *arg_list_begin, const T *arg_list_end) SPIRV_CROSS_NOEXCEPT : SmallVector()$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
SmallVector	spirv_cross_containers.hpp	/^	SmallVector(std::initializer_list<T> init) SPIRV_CROSS_NOEXCEPT : SmallVector(init.begin(), init.end())$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
SmallVector	spirv_cross_containers.hpp	/^	explicit SmallVector(size_t count) SPIRV_CROSS_NOEXCEPT : SmallVector()$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
SmallVector	spirv_cross_containers.hpp	/^class SmallVector : public VectorView<T>$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Snorm	spirv_hlsl.cpp	/^	Snorm = 2$/;"	m	class:ImageFormatNormalizedState	file:
SortAspect	spirv_msl.hpp	/^		enum SortAspect$/;"	g	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter
Source	spirv_cross_parsed_ir.hpp	/^	struct Source$/;"	s	class:SPIRV_CROSS_NAMESPACE::ParsedIR
SourceLanguage	spirv.hpp	/^enum SourceLanguage {$/;"	g	namespace:spv
SourceLanguageCPP_for_OpenCL	spirv.hpp	/^    SourceLanguageCPP_for_OpenCL = 6,$/;"	e	enum:spv::SourceLanguage
SourceLanguageESSL	spirv.hpp	/^    SourceLanguageESSL = 1,$/;"	e	enum:spv::SourceLanguage
SourceLanguageGLSL	spirv.hpp	/^    SourceLanguageGLSL = 2,$/;"	e	enum:spv::SourceLanguage
SourceLanguageHLSL	spirv.hpp	/^    SourceLanguageHLSL = 5,$/;"	e	enum:spv::SourceLanguage
SourceLanguageMax	spirv.hpp	/^    SourceLanguageMax = 0x7fffffff,$/;"	e	enum:spv::SourceLanguage
SourceLanguageOpenCL_C	spirv.hpp	/^    SourceLanguageOpenCL_C = 3,$/;"	e	enum:spv::SourceLanguage
SourceLanguageOpenCL_CPP	spirv.hpp	/^    SourceLanguageOpenCL_CPP = 4,$/;"	e	enum:spv::SourceLanguage
SourceLanguageUnknown	spirv.hpp	/^    SourceLanguageUnknown = 0,$/;"	e	enum:spv::SourceLanguage
SpecializationConstant	spirv_cross.hpp	/^struct SpecializationConstant$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
SpvAccessQualifier	spirv.h	/^} SpvAccessQualifier;$/;"	t	typeref:enum:SpvAccessQualifier_
SpvAccessQualifierMax	spirv.h	/^    SpvAccessQualifierMax = 0x7fffffff,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierReadOnly	spirv.h	/^    SpvAccessQualifierReadOnly = 0,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierReadWrite	spirv.h	/^    SpvAccessQualifierReadWrite = 2,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifierWriteOnly	spirv.h	/^    SpvAccessQualifierWriteOnly = 1,$/;"	e	enum:SpvAccessQualifier_
SpvAccessQualifier_	spirv.h	/^typedef enum SpvAccessQualifier_ {$/;"	g
SpvAddressingModel	spirv.h	/^} SpvAddressingModel;$/;"	t	typeref:enum:SpvAddressingModel_
SpvAddressingModelLogical	spirv.h	/^    SpvAddressingModelLogical = 0,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelMax	spirv.h	/^    SpvAddressingModelMax = 0x7fffffff,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysical32	spirv.h	/^    SpvAddressingModelPhysical32 = 1,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysical64	spirv.h	/^    SpvAddressingModelPhysical64 = 2,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysicalStorageBuffer64	spirv.h	/^    SpvAddressingModelPhysicalStorageBuffer64 = 5348,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModelPhysicalStorageBuffer64EXT	spirv.h	/^    SpvAddressingModelPhysicalStorageBuffer64EXT = 5348,$/;"	e	enum:SpvAddressingModel_
SpvAddressingModel_	spirv.h	/^typedef enum SpvAddressingModel_ {$/;"	g
SpvBuiltIn	spirv.h	/^} SpvBuiltIn;$/;"	t	typeref:enum:SpvBuiltIn_
SpvBuiltInBaryCoordKHR	spirv.h	/^    SpvBuiltInBaryCoordKHR = 5286,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNV	spirv.h	/^    SpvBuiltInBaryCoordNV = 5286,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNoPerspAMD	spirv.h	/^    SpvBuiltInBaryCoordNoPerspAMD = 4992,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNoPerspCentroidAMD	spirv.h	/^    SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNoPerspKHR	spirv.h	/^    SpvBuiltInBaryCoordNoPerspKHR = 5287,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNoPerspNV	spirv.h	/^    SpvBuiltInBaryCoordNoPerspNV = 5287,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordNoPerspSampleAMD	spirv.h	/^    SpvBuiltInBaryCoordNoPerspSampleAMD = 4994,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordPullModelAMD	spirv.h	/^    SpvBuiltInBaryCoordPullModelAMD = 4998,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordSmoothAMD	spirv.h	/^    SpvBuiltInBaryCoordSmoothAMD = 4995,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordSmoothCentroidAMD	spirv.h	/^    SpvBuiltInBaryCoordSmoothCentroidAMD = 4996,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaryCoordSmoothSampleAMD	spirv.h	/^    SpvBuiltInBaryCoordSmoothSampleAMD = 4997,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaseInstance	spirv.h	/^    SpvBuiltInBaseInstance = 4425,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInBaseVertex	spirv.h	/^    SpvBuiltInBaseVertex = 4424,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInClipDistance	spirv.h	/^    SpvBuiltInClipDistance = 3,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInClipDistancePerViewNV	spirv.h	/^    SpvBuiltInClipDistancePerViewNV = 5277,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInCullDistance	spirv.h	/^    SpvBuiltInCullDistance = 4,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInCullDistancePerViewNV	spirv.h	/^    SpvBuiltInCullDistancePerViewNV = 5278,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInCurrentRayTimeNV	spirv.h	/^    SpvBuiltInCurrentRayTimeNV = 5334,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInDeviceIndex	spirv.h	/^    SpvBuiltInDeviceIndex = 4438,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInDrawIndex	spirv.h	/^    SpvBuiltInDrawIndex = 4426,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInEnqueuedWorkgroupSize	spirv.h	/^    SpvBuiltInEnqueuedWorkgroupSize = 32,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragCoord	spirv.h	/^    SpvBuiltInFragCoord = 15,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragDepth	spirv.h	/^    SpvBuiltInFragDepth = 22,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragInvocationCountEXT	spirv.h	/^    SpvBuiltInFragInvocationCountEXT = 5293,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragSizeEXT	spirv.h	/^    SpvBuiltInFragSizeEXT = 5292,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragStencilRefEXT	spirv.h	/^    SpvBuiltInFragStencilRefEXT = 5014,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFragmentSizeNV	spirv.h	/^    SpvBuiltInFragmentSizeNV = 5292,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFrontFacing	spirv.h	/^    SpvBuiltInFrontFacing = 17,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInFullyCoveredEXT	spirv.h	/^    SpvBuiltInFullyCoveredEXT = 5264,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalInvocationId	spirv.h	/^    SpvBuiltInGlobalInvocationId = 28,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalLinearId	spirv.h	/^    SpvBuiltInGlobalLinearId = 34,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalOffset	spirv.h	/^    SpvBuiltInGlobalOffset = 33,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInGlobalSize	spirv.h	/^    SpvBuiltInGlobalSize = 31,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInHelperInvocation	spirv.h	/^    SpvBuiltInHelperInvocation = 23,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInHitKindKHR	spirv.h	/^    SpvBuiltInHitKindKHR = 5333,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInHitKindNV	spirv.h	/^    SpvBuiltInHitKindNV = 5333,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInHitTNV	spirv.h	/^    SpvBuiltInHitTNV = 5332,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInIncomingRayFlagsKHR	spirv.h	/^    SpvBuiltInIncomingRayFlagsKHR = 5351,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInIncomingRayFlagsNV	spirv.h	/^    SpvBuiltInIncomingRayFlagsNV = 5351,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceCustomIndexKHR	spirv.h	/^    SpvBuiltInInstanceCustomIndexKHR = 5327,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceCustomIndexNV	spirv.h	/^    SpvBuiltInInstanceCustomIndexNV = 5327,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceId	spirv.h	/^    SpvBuiltInInstanceId = 6,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInstanceIndex	spirv.h	/^    SpvBuiltInInstanceIndex = 43,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInvocationId	spirv.h	/^    SpvBuiltInInvocationId = 8,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInInvocationsPerPixelNV	spirv.h	/^    SpvBuiltInInvocationsPerPixelNV = 5293,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLaunchIdKHR	spirv.h	/^    SpvBuiltInLaunchIdKHR = 5319,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLaunchIdNV	spirv.h	/^    SpvBuiltInLaunchIdNV = 5319,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLaunchSizeKHR	spirv.h	/^    SpvBuiltInLaunchSizeKHR = 5320,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLaunchSizeNV	spirv.h	/^    SpvBuiltInLaunchSizeNV = 5320,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLayer	spirv.h	/^    SpvBuiltInLayer = 9,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLayerPerViewNV	spirv.h	/^    SpvBuiltInLayerPerViewNV = 5279,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLocalInvocationId	spirv.h	/^    SpvBuiltInLocalInvocationId = 27,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInLocalInvocationIndex	spirv.h	/^    SpvBuiltInLocalInvocationIndex = 29,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInMax	spirv.h	/^    SpvBuiltInMax = 0x7fffffff,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInMeshViewCountNV	spirv.h	/^    SpvBuiltInMeshViewCountNV = 5280,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInMeshViewIndicesNV	spirv.h	/^    SpvBuiltInMeshViewIndicesNV = 5281,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumEnqueuedSubgroups	spirv.h	/^    SpvBuiltInNumEnqueuedSubgroups = 39,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumSubgroups	spirv.h	/^    SpvBuiltInNumSubgroups = 38,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInNumWorkgroups	spirv.h	/^    SpvBuiltInNumWorkgroups = 24,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectRayDirectionKHR	spirv.h	/^    SpvBuiltInObjectRayDirectionKHR = 5324,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectRayDirectionNV	spirv.h	/^    SpvBuiltInObjectRayDirectionNV = 5324,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectRayOriginKHR	spirv.h	/^    SpvBuiltInObjectRayOriginKHR = 5323,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectRayOriginNV	spirv.h	/^    SpvBuiltInObjectRayOriginNV = 5323,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectToWorldKHR	spirv.h	/^    SpvBuiltInObjectToWorldKHR = 5330,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInObjectToWorldNV	spirv.h	/^    SpvBuiltInObjectToWorldNV = 5330,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPatchVertices	spirv.h	/^    SpvBuiltInPatchVertices = 14,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPointCoord	spirv.h	/^    SpvBuiltInPointCoord = 16,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPointSize	spirv.h	/^    SpvBuiltInPointSize = 1,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPosition	spirv.h	/^    SpvBuiltInPosition = 0,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPositionPerViewNV	spirv.h	/^    SpvBuiltInPositionPerViewNV = 5261,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPrimitiveCountNV	spirv.h	/^    SpvBuiltInPrimitiveCountNV = 5275,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPrimitiveId	spirv.h	/^    SpvBuiltInPrimitiveId = 7,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPrimitiveIndicesNV	spirv.h	/^    SpvBuiltInPrimitiveIndicesNV = 5276,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInPrimitiveShadingRateKHR	spirv.h	/^    SpvBuiltInPrimitiveShadingRateKHR = 4432,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInRayGeometryIndexKHR	spirv.h	/^    SpvBuiltInRayGeometryIndexKHR = 5352,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInRayTmaxKHR	spirv.h	/^    SpvBuiltInRayTmaxKHR = 5326,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInRayTmaxNV	spirv.h	/^    SpvBuiltInRayTmaxNV = 5326,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInRayTminKHR	spirv.h	/^    SpvBuiltInRayTminKHR = 5325,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInRayTminNV	spirv.h	/^    SpvBuiltInRayTminNV = 5325,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSMCountNV	spirv.h	/^    SpvBuiltInSMCountNV = 5375,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSMIDNV	spirv.h	/^    SpvBuiltInSMIDNV = 5377,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSampleId	spirv.h	/^    SpvBuiltInSampleId = 18,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSampleMask	spirv.h	/^    SpvBuiltInSampleMask = 20,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSamplePosition	spirv.h	/^    SpvBuiltInSamplePosition = 19,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSecondaryPositionNV	spirv.h	/^    SpvBuiltInSecondaryPositionNV = 5257,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSecondaryViewportMaskNV	spirv.h	/^    SpvBuiltInSecondaryViewportMaskNV = 5258,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInShadingRateKHR	spirv.h	/^    SpvBuiltInShadingRateKHR = 4444,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupEqMask	spirv.h	/^    SpvBuiltInSubgroupEqMask = 4416,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupEqMaskKHR	spirv.h	/^    SpvBuiltInSubgroupEqMaskKHR = 4416,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupGeMask	spirv.h	/^    SpvBuiltInSubgroupGeMask = 4417,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupGeMaskKHR	spirv.h	/^    SpvBuiltInSubgroupGeMaskKHR = 4417,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupGtMask	spirv.h	/^    SpvBuiltInSubgroupGtMask = 4418,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupGtMaskKHR	spirv.h	/^    SpvBuiltInSubgroupGtMaskKHR = 4418,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupId	spirv.h	/^    SpvBuiltInSubgroupId = 40,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLeMask	spirv.h	/^    SpvBuiltInSubgroupLeMask = 4419,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLeMaskKHR	spirv.h	/^    SpvBuiltInSubgroupLeMaskKHR = 4419,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLocalInvocationId	spirv.h	/^    SpvBuiltInSubgroupLocalInvocationId = 41,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLtMask	spirv.h	/^    SpvBuiltInSubgroupLtMask = 4420,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupLtMaskKHR	spirv.h	/^    SpvBuiltInSubgroupLtMaskKHR = 4420,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupMaxSize	spirv.h	/^    SpvBuiltInSubgroupMaxSize = 37,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInSubgroupSize	spirv.h	/^    SpvBuiltInSubgroupSize = 36,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTaskCountNV	spirv.h	/^    SpvBuiltInTaskCountNV = 5274,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessCoord	spirv.h	/^    SpvBuiltInTessCoord = 13,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessLevelInner	spirv.h	/^    SpvBuiltInTessLevelInner = 12,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInTessLevelOuter	spirv.h	/^    SpvBuiltInTessLevelOuter = 11,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInVertexId	spirv.h	/^    SpvBuiltInVertexId = 5,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInVertexIndex	spirv.h	/^    SpvBuiltInVertexIndex = 42,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInViewIndex	spirv.h	/^    SpvBuiltInViewIndex = 4440,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInViewportIndex	spirv.h	/^    SpvBuiltInViewportIndex = 10,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInViewportMaskNV	spirv.h	/^    SpvBuiltInViewportMaskNV = 5253,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInViewportMaskPerViewNV	spirv.h	/^    SpvBuiltInViewportMaskPerViewNV = 5262,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWarpIDNV	spirv.h	/^    SpvBuiltInWarpIDNV = 5376,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWarpsPerSMNV	spirv.h	/^    SpvBuiltInWarpsPerSMNV = 5374,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkDim	spirv.h	/^    SpvBuiltInWorkDim = 30,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkgroupId	spirv.h	/^    SpvBuiltInWorkgroupId = 26,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorkgroupSize	spirv.h	/^    SpvBuiltInWorkgroupSize = 25,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldRayDirectionKHR	spirv.h	/^    SpvBuiltInWorldRayDirectionKHR = 5322,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldRayDirectionNV	spirv.h	/^    SpvBuiltInWorldRayDirectionNV = 5322,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldRayOriginKHR	spirv.h	/^    SpvBuiltInWorldRayOriginKHR = 5321,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldRayOriginNV	spirv.h	/^    SpvBuiltInWorldRayOriginNV = 5321,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldToObjectKHR	spirv.h	/^    SpvBuiltInWorldToObjectKHR = 5331,$/;"	e	enum:SpvBuiltIn_
SpvBuiltInWorldToObjectNV	spirv.h	/^    SpvBuiltInWorldToObjectNV = 5331,$/;"	e	enum:SpvBuiltIn_
SpvBuiltIn_	spirv.h	/^typedef enum SpvBuiltIn_ {$/;"	g
SpvCapability	spirv.h	/^} SpvCapability;$/;"	t	typeref:enum:SpvCapability_
SpvCapabilityAddresses	spirv.h	/^    SpvCapabilityAddresses = 4,$/;"	e	enum:SpvCapability_
SpvCapabilityArbitraryPrecisionFixedPointINTEL	spirv.h	/^    SpvCapabilityArbitraryPrecisionFixedPointINTEL = 5922,$/;"	e	enum:SpvCapability_
SpvCapabilityArbitraryPrecisionFloatingPointINTEL	spirv.h	/^    SpvCapabilityArbitraryPrecisionFloatingPointINTEL = 5845,$/;"	e	enum:SpvCapability_
SpvCapabilityArbitraryPrecisionIntegersINTEL	spirv.h	/^    SpvCapabilityArbitraryPrecisionIntegersINTEL = 5844,$/;"	e	enum:SpvCapability_
SpvCapabilityAsmINTEL	spirv.h	/^    SpvCapabilityAsmINTEL = 5606,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat16AddEXT	spirv.h	/^    SpvCapabilityAtomicFloat16AddEXT = 6095,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat16MinMaxEXT	spirv.h	/^    SpvCapabilityAtomicFloat16MinMaxEXT = 5616,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat32AddEXT	spirv.h	/^    SpvCapabilityAtomicFloat32AddEXT = 6033,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat32MinMaxEXT	spirv.h	/^    SpvCapabilityAtomicFloat32MinMaxEXT = 5612,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat64AddEXT	spirv.h	/^    SpvCapabilityAtomicFloat64AddEXT = 6034,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicFloat64MinMaxEXT	spirv.h	/^    SpvCapabilityAtomicFloat64MinMaxEXT = 5613,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicStorage	spirv.h	/^    SpvCapabilityAtomicStorage = 21,$/;"	e	enum:SpvCapability_
SpvCapabilityAtomicStorageOps	spirv.h	/^    SpvCapabilityAtomicStorageOps = 4445,$/;"	e	enum:SpvCapability_
SpvCapabilityBindlessTextureNV	spirv.h	/^    SpvCapabilityBindlessTextureNV = 5390,$/;"	e	enum:SpvCapability_
SpvCapabilityBitInstructions	spirv.h	/^    SpvCapabilityBitInstructions = 6025,$/;"	e	enum:SpvCapability_
SpvCapabilityBlockingPipesINTEL	spirv.h	/^    SpvCapabilityBlockingPipesINTEL = 5945,$/;"	e	enum:SpvCapability_
SpvCapabilityClipDistance	spirv.h	/^    SpvCapabilityClipDistance = 32,$/;"	e	enum:SpvCapability_
SpvCapabilityComputeDerivativeGroupLinearNV	spirv.h	/^    SpvCapabilityComputeDerivativeGroupLinearNV = 5350,$/;"	e	enum:SpvCapability_
SpvCapabilityComputeDerivativeGroupQuadsNV	spirv.h	/^    SpvCapabilityComputeDerivativeGroupQuadsNV = 5288,$/;"	e	enum:SpvCapability_
SpvCapabilityCooperativeMatrixNV	spirv.h	/^    SpvCapabilityCooperativeMatrixNV = 5357,$/;"	e	enum:SpvCapability_
SpvCapabilityCullDistance	spirv.h	/^    SpvCapabilityCullDistance = 33,$/;"	e	enum:SpvCapability_
SpvCapabilityDebugInfoModuleINTEL	spirv.h	/^    SpvCapabilityDebugInfoModuleINTEL = 6114,$/;"	e	enum:SpvCapability_
SpvCapabilityDemoteToHelperInvocation	spirv.h	/^    SpvCapabilityDemoteToHelperInvocation = 5379,$/;"	e	enum:SpvCapability_
SpvCapabilityDemoteToHelperInvocationEXT	spirv.h	/^    SpvCapabilityDemoteToHelperInvocationEXT = 5379,$/;"	e	enum:SpvCapability_
SpvCapabilityDenormFlushToZero	spirv.h	/^    SpvCapabilityDenormFlushToZero = 4465,$/;"	e	enum:SpvCapability_
SpvCapabilityDenormPreserve	spirv.h	/^    SpvCapabilityDenormPreserve = 4464,$/;"	e	enum:SpvCapability_
SpvCapabilityDerivativeControl	spirv.h	/^    SpvCapabilityDerivativeControl = 51,$/;"	e	enum:SpvCapability_
SpvCapabilityDeviceEnqueue	spirv.h	/^    SpvCapabilityDeviceEnqueue = 19,$/;"	e	enum:SpvCapability_
SpvCapabilityDeviceGroup	spirv.h	/^    SpvCapabilityDeviceGroup = 4437,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProduct	spirv.h	/^    SpvCapabilityDotProduct = 6019,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInput4x8Bit	spirv.h	/^    SpvCapabilityDotProductInput4x8Bit = 6017,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInput4x8BitKHR	spirv.h	/^    SpvCapabilityDotProductInput4x8BitKHR = 6017,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInput4x8BitPacked	spirv.h	/^    SpvCapabilityDotProductInput4x8BitPacked = 6018,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInput4x8BitPackedKHR	spirv.h	/^    SpvCapabilityDotProductInput4x8BitPackedKHR = 6018,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInputAll	spirv.h	/^    SpvCapabilityDotProductInputAll = 6016,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductInputAllKHR	spirv.h	/^    SpvCapabilityDotProductInputAllKHR = 6016,$/;"	e	enum:SpvCapability_
SpvCapabilityDotProductKHR	spirv.h	/^    SpvCapabilityDotProductKHR = 6019,$/;"	e	enum:SpvCapability_
SpvCapabilityDrawParameters	spirv.h	/^    SpvCapabilityDrawParameters = 4427,$/;"	e	enum:SpvCapability_
SpvCapabilityExpectAssumeKHR	spirv.h	/^    SpvCapabilityExpectAssumeKHR = 5629,$/;"	e	enum:SpvCapability_
SpvCapabilityFPFastMathModeINTEL	spirv.h	/^    SpvCapabilityFPFastMathModeINTEL = 5837,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGABufferLocationINTEL	spirv.h	/^    SpvCapabilityFPGABufferLocationINTEL = 5920,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGAClusterAttributesINTEL	spirv.h	/^    SpvCapabilityFPGAClusterAttributesINTEL = 5904,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGAKernelAttributesINTEL	spirv.h	/^    SpvCapabilityFPGAKernelAttributesINTEL = 5897,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGALoopControlsINTEL	spirv.h	/^    SpvCapabilityFPGALoopControlsINTEL = 5888,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGAMemoryAccessesINTEL	spirv.h	/^    SpvCapabilityFPGAMemoryAccessesINTEL = 5898,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGAMemoryAttributesINTEL	spirv.h	/^    SpvCapabilityFPGAMemoryAttributesINTEL = 5824,$/;"	e	enum:SpvCapability_
SpvCapabilityFPGARegINTEL	spirv.h	/^    SpvCapabilityFPGARegINTEL = 5948,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat16	spirv.h	/^    SpvCapabilityFloat16 = 9,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat16Buffer	spirv.h	/^    SpvCapabilityFloat16Buffer = 8,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat16ImageAMD	spirv.h	/^    SpvCapabilityFloat16ImageAMD = 5008,$/;"	e	enum:SpvCapability_
SpvCapabilityFloat64	spirv.h	/^    SpvCapabilityFloat64 = 10,$/;"	e	enum:SpvCapability_
SpvCapabilityFloatingPointModeINTEL	spirv.h	/^    SpvCapabilityFloatingPointModeINTEL = 5583,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentBarycentricKHR	spirv.h	/^    SpvCapabilityFragmentBarycentricKHR = 5284,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentBarycentricNV	spirv.h	/^    SpvCapabilityFragmentBarycentricNV = 5284,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentDensityEXT	spirv.h	/^    SpvCapabilityFragmentDensityEXT = 5291,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentFullyCoveredEXT	spirv.h	/^    SpvCapabilityFragmentFullyCoveredEXT = 5265,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentMaskAMD	spirv.h	/^    SpvCapabilityFragmentMaskAMD = 5010,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentShaderPixelInterlockEXT	spirv.h	/^    SpvCapabilityFragmentShaderPixelInterlockEXT = 5378,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentShaderSampleInterlockEXT	spirv.h	/^    SpvCapabilityFragmentShaderSampleInterlockEXT = 5363,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentShaderShadingRateInterlockEXT	spirv.h	/^    SpvCapabilityFragmentShaderShadingRateInterlockEXT = 5372,$/;"	e	enum:SpvCapability_
SpvCapabilityFragmentShadingRateKHR	spirv.h	/^    SpvCapabilityFragmentShadingRateKHR = 4422,$/;"	e	enum:SpvCapability_
SpvCapabilityFunctionFloatControlINTEL	spirv.h	/^    SpvCapabilityFunctionFloatControlINTEL = 5821,$/;"	e	enum:SpvCapability_
SpvCapabilityFunctionPointersINTEL	spirv.h	/^    SpvCapabilityFunctionPointersINTEL = 5603,$/;"	e	enum:SpvCapability_
SpvCapabilityGenericPointer	spirv.h	/^    SpvCapabilityGenericPointer = 38,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometry	spirv.h	/^    SpvCapabilityGeometry = 2,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometryPointSize	spirv.h	/^    SpvCapabilityGeometryPointSize = 24,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometryShaderPassthroughNV	spirv.h	/^    SpvCapabilityGeometryShaderPassthroughNV = 5251,$/;"	e	enum:SpvCapability_
SpvCapabilityGeometryStreams	spirv.h	/^    SpvCapabilityGeometryStreams = 54,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniform	spirv.h	/^    SpvCapabilityGroupNonUniform = 61,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformArithmetic	spirv.h	/^    SpvCapabilityGroupNonUniformArithmetic = 63,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformBallot	spirv.h	/^    SpvCapabilityGroupNonUniformBallot = 64,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformClustered	spirv.h	/^    SpvCapabilityGroupNonUniformClustered = 67,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformPartitionedNV	spirv.h	/^    SpvCapabilityGroupNonUniformPartitionedNV = 5297,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformQuad	spirv.h	/^    SpvCapabilityGroupNonUniformQuad = 68,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformShuffle	spirv.h	/^    SpvCapabilityGroupNonUniformShuffle = 65,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformShuffleRelative	spirv.h	/^    SpvCapabilityGroupNonUniformShuffleRelative = 66,$/;"	e	enum:SpvCapability_
SpvCapabilityGroupNonUniformVote	spirv.h	/^    SpvCapabilityGroupNonUniformVote = 62,$/;"	e	enum:SpvCapability_
SpvCapabilityGroups	spirv.h	/^    SpvCapabilityGroups = 18,$/;"	e	enum:SpvCapability_
SpvCapabilityIOPipesINTEL	spirv.h	/^    SpvCapabilityIOPipesINTEL = 5943,$/;"	e	enum:SpvCapability_
SpvCapabilityImage1D	spirv.h	/^    SpvCapabilityImage1D = 44,$/;"	e	enum:SpvCapability_
SpvCapabilityImageBasic	spirv.h	/^    SpvCapabilityImageBasic = 13,$/;"	e	enum:SpvCapability_
SpvCapabilityImageBuffer	spirv.h	/^    SpvCapabilityImageBuffer = 47,$/;"	e	enum:SpvCapability_
SpvCapabilityImageCubeArray	spirv.h	/^    SpvCapabilityImageCubeArray = 34,$/;"	e	enum:SpvCapability_
SpvCapabilityImageFootprintNV	spirv.h	/^    SpvCapabilityImageFootprintNV = 5282,$/;"	e	enum:SpvCapability_
SpvCapabilityImageGatherBiasLodAMD	spirv.h	/^    SpvCapabilityImageGatherBiasLodAMD = 5009,$/;"	e	enum:SpvCapability_
SpvCapabilityImageGatherExtended	spirv.h	/^    SpvCapabilityImageGatherExtended = 25,$/;"	e	enum:SpvCapability_
SpvCapabilityImageMSArray	spirv.h	/^    SpvCapabilityImageMSArray = 48,$/;"	e	enum:SpvCapability_
SpvCapabilityImageMipmap	spirv.h	/^    SpvCapabilityImageMipmap = 15,$/;"	e	enum:SpvCapability_
SpvCapabilityImageQuery	spirv.h	/^    SpvCapabilityImageQuery = 50,$/;"	e	enum:SpvCapability_
SpvCapabilityImageReadWrite	spirv.h	/^    SpvCapabilityImageReadWrite = 14,$/;"	e	enum:SpvCapability_
SpvCapabilityImageReadWriteLodAMD	spirv.h	/^    SpvCapabilityImageReadWriteLodAMD = 5015,$/;"	e	enum:SpvCapability_
SpvCapabilityImageRect	spirv.h	/^    SpvCapabilityImageRect = 36,$/;"	e	enum:SpvCapability_
SpvCapabilityIndirectReferencesINTEL	spirv.h	/^    SpvCapabilityIndirectReferencesINTEL = 5604,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachment	spirv.h	/^    SpvCapabilityInputAttachment = 40,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachmentArrayDynamicIndexing	spirv.h	/^    SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachmentArrayDynamicIndexingEXT	spirv.h	/^    SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachmentArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,$/;"	e	enum:SpvCapability_
SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,$/;"	e	enum:SpvCapability_
SpvCapabilityInt16	spirv.h	/^    SpvCapabilityInt16 = 22,$/;"	e	enum:SpvCapability_
SpvCapabilityInt64	spirv.h	/^    SpvCapabilityInt64 = 11,$/;"	e	enum:SpvCapability_
SpvCapabilityInt64Atomics	spirv.h	/^    SpvCapabilityInt64Atomics = 12,$/;"	e	enum:SpvCapability_
SpvCapabilityInt64ImageEXT	spirv.h	/^    SpvCapabilityInt64ImageEXT = 5016,$/;"	e	enum:SpvCapability_
SpvCapabilityInt8	spirv.h	/^    SpvCapabilityInt8 = 39,$/;"	e	enum:SpvCapability_
SpvCapabilityIntegerFunctions2INTEL	spirv.h	/^    SpvCapabilityIntegerFunctions2INTEL = 5584,$/;"	e	enum:SpvCapability_
SpvCapabilityInterpolationFunction	spirv.h	/^    SpvCapabilityInterpolationFunction = 52,$/;"	e	enum:SpvCapability_
SpvCapabilityKernel	spirv.h	/^    SpvCapabilityKernel = 6,$/;"	e	enum:SpvCapability_
SpvCapabilityKernelAttributesINTEL	spirv.h	/^    SpvCapabilityKernelAttributesINTEL = 5892,$/;"	e	enum:SpvCapability_
SpvCapabilityLinkage	spirv.h	/^    SpvCapabilityLinkage = 5,$/;"	e	enum:SpvCapability_
SpvCapabilityLiteralSampler	spirv.h	/^    SpvCapabilityLiteralSampler = 20,$/;"	e	enum:SpvCapability_
SpvCapabilityLongConstantCompositeINTEL	spirv.h	/^    SpvCapabilityLongConstantCompositeINTEL = 6089,$/;"	e	enum:SpvCapability_
SpvCapabilityLoopFuseINTEL	spirv.h	/^    SpvCapabilityLoopFuseINTEL = 5906,$/;"	e	enum:SpvCapability_
SpvCapabilityMatrix	spirv.h	/^    SpvCapabilityMatrix = 0,$/;"	e	enum:SpvCapability_
SpvCapabilityMax	spirv.h	/^    SpvCapabilityMax = 0x7fffffff,$/;"	e	enum:SpvCapability_
SpvCapabilityMeshShadingNV	spirv.h	/^    SpvCapabilityMeshShadingNV = 5266,$/;"	e	enum:SpvCapability_
SpvCapabilityMinLod	spirv.h	/^    SpvCapabilityMinLod = 42,$/;"	e	enum:SpvCapability_
SpvCapabilityMultiView	spirv.h	/^    SpvCapabilityMultiView = 4439,$/;"	e	enum:SpvCapability_
SpvCapabilityMultiViewport	spirv.h	/^    SpvCapabilityMultiViewport = 57,$/;"	e	enum:SpvCapability_
SpvCapabilityNamedBarrier	spirv.h	/^    SpvCapabilityNamedBarrier = 59,$/;"	e	enum:SpvCapability_
SpvCapabilityOptNoneINTEL	spirv.h	/^    SpvCapabilityOptNoneINTEL = 6094,$/;"	e	enum:SpvCapability_
SpvCapabilityPerViewAttributesNV	spirv.h	/^    SpvCapabilityPerViewAttributesNV = 5260,$/;"	e	enum:SpvCapability_
SpvCapabilityPhysicalStorageBufferAddresses	spirv.h	/^    SpvCapabilityPhysicalStorageBufferAddresses = 5347,$/;"	e	enum:SpvCapability_
SpvCapabilityPhysicalStorageBufferAddressesEXT	spirv.h	/^    SpvCapabilityPhysicalStorageBufferAddressesEXT = 5347,$/;"	e	enum:SpvCapability_
SpvCapabilityPipeStorage	spirv.h	/^    SpvCapabilityPipeStorage = 60,$/;"	e	enum:SpvCapability_
SpvCapabilityPipes	spirv.h	/^    SpvCapabilityPipes = 17,$/;"	e	enum:SpvCapability_
SpvCapabilityRayQueryKHR	spirv.h	/^    SpvCapabilityRayQueryKHR = 4472,$/;"	e	enum:SpvCapability_
SpvCapabilityRayQueryProvisionalKHR	spirv.h	/^    SpvCapabilityRayQueryProvisionalKHR = 4471,$/;"	e	enum:SpvCapability_
SpvCapabilityRayTracingKHR	spirv.h	/^    SpvCapabilityRayTracingKHR = 4479,$/;"	e	enum:SpvCapability_
SpvCapabilityRayTracingMotionBlurNV	spirv.h	/^    SpvCapabilityRayTracingMotionBlurNV = 5341,$/;"	e	enum:SpvCapability_
SpvCapabilityRayTracingNV	spirv.h	/^    SpvCapabilityRayTracingNV = 5340,$/;"	e	enum:SpvCapability_
SpvCapabilityRayTracingProvisionalKHR	spirv.h	/^    SpvCapabilityRayTracingProvisionalKHR = 5353,$/;"	e	enum:SpvCapability_
SpvCapabilityRayTraversalPrimitiveCullingKHR	spirv.h	/^    SpvCapabilityRayTraversalPrimitiveCullingKHR = 4478,$/;"	e	enum:SpvCapability_
SpvCapabilityRoundToInfinityINTEL	spirv.h	/^    SpvCapabilityRoundToInfinityINTEL = 5582,$/;"	e	enum:SpvCapability_
SpvCapabilityRoundingModeRTE	spirv.h	/^    SpvCapabilityRoundingModeRTE = 4467,$/;"	e	enum:SpvCapability_
SpvCapabilityRoundingModeRTZ	spirv.h	/^    SpvCapabilityRoundingModeRTZ = 4468,$/;"	e	enum:SpvCapability_
SpvCapabilityRuntimeDescriptorArray	spirv.h	/^    SpvCapabilityRuntimeDescriptorArray = 5302,$/;"	e	enum:SpvCapability_
SpvCapabilityRuntimeDescriptorArrayEXT	spirv.h	/^    SpvCapabilityRuntimeDescriptorArrayEXT = 5302,$/;"	e	enum:SpvCapability_
SpvCapabilitySampleMaskOverrideCoverageNV	spirv.h	/^    SpvCapabilitySampleMaskOverrideCoverageNV = 5249,$/;"	e	enum:SpvCapability_
SpvCapabilitySampleMaskPostDepthCoverage	spirv.h	/^    SpvCapabilitySampleMaskPostDepthCoverage = 4447,$/;"	e	enum:SpvCapability_
SpvCapabilitySampleRateShading	spirv.h	/^    SpvCapabilitySampleRateShading = 35,$/;"	e	enum:SpvCapability_
SpvCapabilitySampled1D	spirv.h	/^    SpvCapabilitySampled1D = 43,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledBuffer	spirv.h	/^    SpvCapabilitySampledBuffer = 46,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledCubeArray	spirv.h	/^    SpvCapabilitySampledCubeArray = 45,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledImageArrayDynamicIndexing	spirv.h	/^    SpvCapabilitySampledImageArrayDynamicIndexing = 29,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledImageArrayNonUniformIndexing	spirv.h	/^    SpvCapabilitySampledImageArrayNonUniformIndexing = 5307,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledImageArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307,$/;"	e	enum:SpvCapability_
SpvCapabilitySampledRect	spirv.h	/^    SpvCapabilitySampledRect = 37,$/;"	e	enum:SpvCapability_
SpvCapabilityShader	spirv.h	/^    SpvCapabilityShader = 1,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderClockKHR	spirv.h	/^    SpvCapabilityShaderClockKHR = 5055,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderLayer	spirv.h	/^    SpvCapabilityShaderLayer = 69,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderNonUniform	spirv.h	/^    SpvCapabilityShaderNonUniform = 5301,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderNonUniformEXT	spirv.h	/^    SpvCapabilityShaderNonUniformEXT = 5301,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderSMBuiltinsNV	spirv.h	/^    SpvCapabilityShaderSMBuiltinsNV = 5373,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderStereoViewNV	spirv.h	/^    SpvCapabilityShaderStereoViewNV = 5259,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderViewportIndex	spirv.h	/^    SpvCapabilityShaderViewportIndex = 70,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderViewportIndexLayerEXT	spirv.h	/^    SpvCapabilityShaderViewportIndexLayerEXT = 5254,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderViewportIndexLayerNV	spirv.h	/^    SpvCapabilityShaderViewportIndexLayerNV = 5254,$/;"	e	enum:SpvCapability_
SpvCapabilityShaderViewportMaskNV	spirv.h	/^    SpvCapabilityShaderViewportMaskNV = 5255,$/;"	e	enum:SpvCapability_
SpvCapabilityShadingRateNV	spirv.h	/^    SpvCapabilityShadingRateNV = 5291,$/;"	e	enum:SpvCapability_
SpvCapabilitySignedZeroInfNanPreserve	spirv.h	/^    SpvCapabilitySignedZeroInfNanPreserve = 4466,$/;"	e	enum:SpvCapability_
SpvCapabilitySparseResidency	spirv.h	/^    SpvCapabilitySparseResidency = 41,$/;"	e	enum:SpvCapability_
SpvCapabilityStencilExportEXT	spirv.h	/^    SpvCapabilityStencilExportEXT = 5013,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBuffer16BitAccess	spirv.h	/^    SpvCapabilityStorageBuffer16BitAccess = 4433,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBuffer8BitAccess	spirv.h	/^    SpvCapabilityStorageBuffer8BitAccess = 4448,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBufferArrayDynamicIndexing	spirv.h	/^    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBufferArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageBufferArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageArrayDynamicIndexing	spirv.h	/^    SpvCapabilityStorageImageArrayDynamicIndexing = 31,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityStorageImageArrayNonUniformIndexing = 5309,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageExtendedFormats	spirv.h	/^    SpvCapabilityStorageImageExtendedFormats = 49,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageMultisample	spirv.h	/^    SpvCapabilityStorageImageMultisample = 27,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageReadWithoutFormat	spirv.h	/^    SpvCapabilityStorageImageReadWithoutFormat = 55,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageImageWriteWithoutFormat	spirv.h	/^    SpvCapabilityStorageImageWriteWithoutFormat = 56,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageInputOutput16	spirv.h	/^    SpvCapabilityStorageInputOutput16 = 4436,$/;"	e	enum:SpvCapability_
SpvCapabilityStoragePushConstant16	spirv.h	/^    SpvCapabilityStoragePushConstant16 = 4435,$/;"	e	enum:SpvCapability_
SpvCapabilityStoragePushConstant8	spirv.h	/^    SpvCapabilityStoragePushConstant8 = 4450,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageTexelBufferArrayDynamicIndexing	spirv.h	/^    SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT	spirv.h	/^    SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageTexelBufferArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageUniform16	spirv.h	/^    SpvCapabilityStorageUniform16 = 4434,$/;"	e	enum:SpvCapability_
SpvCapabilityStorageUniformBufferBlock16	spirv.h	/^    SpvCapabilityStorageUniformBufferBlock16 = 4433,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL	spirv.h	/^    SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupAvcMotionEstimationINTEL	spirv.h	/^    SpvCapabilitySubgroupAvcMotionEstimationINTEL = 5696,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL	spirv.h	/^    SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupBallotKHR	spirv.h	/^    SpvCapabilitySubgroupBallotKHR = 4423,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupBufferBlockIOINTEL	spirv.h	/^    SpvCapabilitySubgroupBufferBlockIOINTEL = 5569,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupDispatch	spirv.h	/^    SpvCapabilitySubgroupDispatch = 58,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupImageBlockIOINTEL	spirv.h	/^    SpvCapabilitySubgroupImageBlockIOINTEL = 5570,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupImageMediaBlockIOINTEL	spirv.h	/^    SpvCapabilitySubgroupImageMediaBlockIOINTEL = 5579,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupShuffleINTEL	spirv.h	/^    SpvCapabilitySubgroupShuffleINTEL = 5568,$/;"	e	enum:SpvCapability_
SpvCapabilitySubgroupVoteKHR	spirv.h	/^    SpvCapabilitySubgroupVoteKHR = 4431,$/;"	e	enum:SpvCapability_
SpvCapabilityTessellation	spirv.h	/^    SpvCapabilityTessellation = 3,$/;"	e	enum:SpvCapability_
SpvCapabilityTessellationPointSize	spirv.h	/^    SpvCapabilityTessellationPointSize = 23,$/;"	e	enum:SpvCapability_
SpvCapabilityTransformFeedback	spirv.h	/^    SpvCapabilityTransformFeedback = 53,$/;"	e	enum:SpvCapability_
SpvCapabilityUSMStorageClassesINTEL	spirv.h	/^    SpvCapabilityUSMStorageClassesINTEL = 5935,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformAndStorageBuffer16BitAccess	spirv.h	/^    SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformAndStorageBuffer8BitAccess	spirv.h	/^    SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformBufferArrayDynamicIndexing	spirv.h	/^    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformBufferArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformBufferArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformDecoration	spirv.h	/^    SpvCapabilityUniformDecoration = 71,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformTexelBufferArrayDynamicIndexing	spirv.h	/^    SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT	spirv.h	/^    SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformTexelBufferArrayNonUniformIndexing	spirv.h	/^    SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,$/;"	e	enum:SpvCapability_
SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT	spirv.h	/^    SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,$/;"	e	enum:SpvCapability_
SpvCapabilityUnstructuredLoopControlsINTEL	spirv.h	/^    SpvCapabilityUnstructuredLoopControlsINTEL = 5886,$/;"	e	enum:SpvCapability_
SpvCapabilityVariableLengthArrayINTEL	spirv.h	/^    SpvCapabilityVariableLengthArrayINTEL = 5817,$/;"	e	enum:SpvCapability_
SpvCapabilityVariablePointers	spirv.h	/^    SpvCapabilityVariablePointers = 4442,$/;"	e	enum:SpvCapability_
SpvCapabilityVariablePointersStorageBuffer	spirv.h	/^    SpvCapabilityVariablePointersStorageBuffer = 4441,$/;"	e	enum:SpvCapability_
SpvCapabilityVector16	spirv.h	/^    SpvCapabilityVector16 = 7,$/;"	e	enum:SpvCapability_
SpvCapabilityVectorAnyINTEL	spirv.h	/^    SpvCapabilityVectorAnyINTEL = 5619,$/;"	e	enum:SpvCapability_
SpvCapabilityVectorComputeINTEL	spirv.h	/^    SpvCapabilityVectorComputeINTEL = 5617,$/;"	e	enum:SpvCapability_
SpvCapabilityVulkanMemoryModel	spirv.h	/^    SpvCapabilityVulkanMemoryModel = 5345,$/;"	e	enum:SpvCapability_
SpvCapabilityVulkanMemoryModelDeviceScope	spirv.h	/^    SpvCapabilityVulkanMemoryModelDeviceScope = 5346,$/;"	e	enum:SpvCapability_
SpvCapabilityVulkanMemoryModelDeviceScopeKHR	spirv.h	/^    SpvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346,$/;"	e	enum:SpvCapability_
SpvCapabilityVulkanMemoryModelKHR	spirv.h	/^    SpvCapabilityVulkanMemoryModelKHR = 5345,$/;"	e	enum:SpvCapability_
SpvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR	spirv.h	/^    SpvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR = 4430,$/;"	e	enum:SpvCapability_
SpvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR	spirv.h	/^    SpvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR = 4429,$/;"	e	enum:SpvCapability_
SpvCapabilityWorkgroupMemoryExplicitLayoutKHR	spirv.h	/^    SpvCapabilityWorkgroupMemoryExplicitLayoutKHR = 4428,$/;"	e	enum:SpvCapability_
SpvCapability_	spirv.h	/^typedef enum SpvCapability_ {$/;"	g
SpvDecoration	spirv.h	/^} SpvDecoration;$/;"	t	typeref:enum:SpvDecoration_
SpvDecorationAliased	spirv.h	/^    SpvDecorationAliased = 20,$/;"	e	enum:SpvDecoration_
SpvDecorationAliasedPointer	spirv.h	/^    SpvDecorationAliasedPointer = 5356,$/;"	e	enum:SpvDecoration_
SpvDecorationAliasedPointerEXT	spirv.h	/^    SpvDecorationAliasedPointerEXT = 5356,$/;"	e	enum:SpvDecoration_
SpvDecorationAlignment	spirv.h	/^    SpvDecorationAlignment = 44,$/;"	e	enum:SpvDecoration_
SpvDecorationAlignmentId	spirv.h	/^    SpvDecorationAlignmentId = 46,$/;"	e	enum:SpvDecoration_
SpvDecorationArrayStride	spirv.h	/^    SpvDecorationArrayStride = 6,$/;"	e	enum:SpvDecoration_
SpvDecorationBankBitsINTEL	spirv.h	/^    SpvDecorationBankBitsINTEL = 5835,$/;"	e	enum:SpvDecoration_
SpvDecorationBankwidthINTEL	spirv.h	/^    SpvDecorationBankwidthINTEL = 5828,$/;"	e	enum:SpvDecoration_
SpvDecorationBinding	spirv.h	/^    SpvDecorationBinding = 33,$/;"	e	enum:SpvDecoration_
SpvDecorationBindlessImageNV	spirv.h	/^    SpvDecorationBindlessImageNV = 5399,$/;"	e	enum:SpvDecoration_
SpvDecorationBindlessSamplerNV	spirv.h	/^    SpvDecorationBindlessSamplerNV = 5398,$/;"	e	enum:SpvDecoration_
SpvDecorationBlock	spirv.h	/^    SpvDecorationBlock = 2,$/;"	e	enum:SpvDecoration_
SpvDecorationBoundImageNV	spirv.h	/^    SpvDecorationBoundImageNV = 5401,$/;"	e	enum:SpvDecoration_
SpvDecorationBoundSamplerNV	spirv.h	/^    SpvDecorationBoundSamplerNV = 5400,$/;"	e	enum:SpvDecoration_
SpvDecorationBufferBlock	spirv.h	/^    SpvDecorationBufferBlock = 3,$/;"	e	enum:SpvDecoration_
SpvDecorationBufferLocationINTEL	spirv.h	/^    SpvDecorationBufferLocationINTEL = 5921,$/;"	e	enum:SpvDecoration_
SpvDecorationBuiltIn	spirv.h	/^    SpvDecorationBuiltIn = 11,$/;"	e	enum:SpvDecoration_
SpvDecorationBurstCoalesceINTEL	spirv.h	/^    SpvDecorationBurstCoalesceINTEL = 5899,$/;"	e	enum:SpvDecoration_
SpvDecorationCPacked	spirv.h	/^    SpvDecorationCPacked = 10,$/;"	e	enum:SpvDecoration_
SpvDecorationCacheSizeINTEL	spirv.h	/^    SpvDecorationCacheSizeINTEL = 5900,$/;"	e	enum:SpvDecoration_
SpvDecorationCentroid	spirv.h	/^    SpvDecorationCentroid = 16,$/;"	e	enum:SpvDecoration_
SpvDecorationClobberINTEL	spirv.h	/^    SpvDecorationClobberINTEL = 5607,$/;"	e	enum:SpvDecoration_
SpvDecorationCoherent	spirv.h	/^    SpvDecorationCoherent = 23,$/;"	e	enum:SpvDecoration_
SpvDecorationColMajor	spirv.h	/^    SpvDecorationColMajor = 5,$/;"	e	enum:SpvDecoration_
SpvDecorationComponent	spirv.h	/^    SpvDecorationComponent = 31,$/;"	e	enum:SpvDecoration_
SpvDecorationConstant	spirv.h	/^    SpvDecorationConstant = 22,$/;"	e	enum:SpvDecoration_
SpvDecorationCounterBuffer	spirv.h	/^    SpvDecorationCounterBuffer = 5634,$/;"	e	enum:SpvDecoration_
SpvDecorationDescriptorSet	spirv.h	/^    SpvDecorationDescriptorSet = 34,$/;"	e	enum:SpvDecoration_
SpvDecorationDontStaticallyCoalesceINTEL	spirv.h	/^    SpvDecorationDontStaticallyCoalesceINTEL = 5901,$/;"	e	enum:SpvDecoration_
SpvDecorationDoublepumpINTEL	spirv.h	/^    SpvDecorationDoublepumpINTEL = 5831,$/;"	e	enum:SpvDecoration_
SpvDecorationExplicitInterpAMD	spirv.h	/^    SpvDecorationExplicitInterpAMD = 4999,$/;"	e	enum:SpvDecoration_
SpvDecorationFPFastMathMode	spirv.h	/^    SpvDecorationFPFastMathMode = 40,$/;"	e	enum:SpvDecoration_
SpvDecorationFPRoundingMode	spirv.h	/^    SpvDecorationFPRoundingMode = 39,$/;"	e	enum:SpvDecoration_
SpvDecorationFlat	spirv.h	/^    SpvDecorationFlat = 14,$/;"	e	enum:SpvDecoration_
SpvDecorationForcePow2DepthINTEL	spirv.h	/^    SpvDecorationForcePow2DepthINTEL = 5836,$/;"	e	enum:SpvDecoration_
SpvDecorationFuncParamAttr	spirv.h	/^    SpvDecorationFuncParamAttr = 38,$/;"	e	enum:SpvDecoration_
SpvDecorationFuncParamIOKindINTEL	spirv.h	/^    SpvDecorationFuncParamIOKindINTEL = 5625,$/;"	e	enum:SpvDecoration_
SpvDecorationFunctionDenormModeINTEL	spirv.h	/^    SpvDecorationFunctionDenormModeINTEL = 5823,$/;"	e	enum:SpvDecoration_
SpvDecorationFunctionFloatingPointModeINTEL	spirv.h	/^    SpvDecorationFunctionFloatingPointModeINTEL = 6080,$/;"	e	enum:SpvDecoration_
SpvDecorationFunctionRoundingModeINTEL	spirv.h	/^    SpvDecorationFunctionRoundingModeINTEL = 5822,$/;"	e	enum:SpvDecoration_
SpvDecorationFuseLoopsInFunctionINTEL	spirv.h	/^    SpvDecorationFuseLoopsInFunctionINTEL = 5907,$/;"	e	enum:SpvDecoration_
SpvDecorationGLSLPacked	spirv.h	/^    SpvDecorationGLSLPacked = 9,$/;"	e	enum:SpvDecoration_
SpvDecorationGLSLShared	spirv.h	/^    SpvDecorationGLSLShared = 8,$/;"	e	enum:SpvDecoration_
SpvDecorationGlobalVariableOffsetINTEL	spirv.h	/^    SpvDecorationGlobalVariableOffsetINTEL = 5628,$/;"	e	enum:SpvDecoration_
SpvDecorationHlslCounterBufferGOOGLE	spirv.h	/^    SpvDecorationHlslCounterBufferGOOGLE = 5634,$/;"	e	enum:SpvDecoration_
SpvDecorationHlslSemanticGOOGLE	spirv.h	/^    SpvDecorationHlslSemanticGOOGLE = 5635,$/;"	e	enum:SpvDecoration_
SpvDecorationIOPipeStorageINTEL	spirv.h	/^    SpvDecorationIOPipeStorageINTEL = 5944,$/;"	e	enum:SpvDecoration_
SpvDecorationIndex	spirv.h	/^    SpvDecorationIndex = 32,$/;"	e	enum:SpvDecoration_
SpvDecorationInputAttachmentIndex	spirv.h	/^    SpvDecorationInputAttachmentIndex = 43,$/;"	e	enum:SpvDecoration_
SpvDecorationInvariant	spirv.h	/^    SpvDecorationInvariant = 18,$/;"	e	enum:SpvDecoration_
SpvDecorationLinkageAttributes	spirv.h	/^    SpvDecorationLinkageAttributes = 41,$/;"	e	enum:SpvDecoration_
SpvDecorationLocation	spirv.h	/^    SpvDecorationLocation = 30,$/;"	e	enum:SpvDecoration_
SpvDecorationMatrixStride	spirv.h	/^    SpvDecorationMatrixStride = 7,$/;"	e	enum:SpvDecoration_
SpvDecorationMax	spirv.h	/^    SpvDecorationMax = 0x7fffffff,$/;"	e	enum:SpvDecoration_
SpvDecorationMaxByteOffset	spirv.h	/^    SpvDecorationMaxByteOffset = 45,$/;"	e	enum:SpvDecoration_
SpvDecorationMaxByteOffsetId	spirv.h	/^    SpvDecorationMaxByteOffsetId = 47,$/;"	e	enum:SpvDecoration_
SpvDecorationMaxPrivateCopiesINTEL	spirv.h	/^    SpvDecorationMaxPrivateCopiesINTEL = 5829,$/;"	e	enum:SpvDecoration_
SpvDecorationMaxReplicatesINTEL	spirv.h	/^    SpvDecorationMaxReplicatesINTEL = 5832,$/;"	e	enum:SpvDecoration_
SpvDecorationMediaBlockIOINTEL	spirv.h	/^    SpvDecorationMediaBlockIOINTEL = 6140,$/;"	e	enum:SpvDecoration_
SpvDecorationMemoryINTEL	spirv.h	/^    SpvDecorationMemoryINTEL = 5826,$/;"	e	enum:SpvDecoration_
SpvDecorationMergeINTEL	spirv.h	/^    SpvDecorationMergeINTEL = 5834,$/;"	e	enum:SpvDecoration_
SpvDecorationNoContraction	spirv.h	/^    SpvDecorationNoContraction = 42,$/;"	e	enum:SpvDecoration_
SpvDecorationNoPerspective	spirv.h	/^    SpvDecorationNoPerspective = 13,$/;"	e	enum:SpvDecoration_
SpvDecorationNoSignedWrap	spirv.h	/^    SpvDecorationNoSignedWrap = 4469,$/;"	e	enum:SpvDecoration_
SpvDecorationNoUnsignedWrap	spirv.h	/^    SpvDecorationNoUnsignedWrap = 4470,$/;"	e	enum:SpvDecoration_
SpvDecorationNonReadable	spirv.h	/^    SpvDecorationNonReadable = 25,$/;"	e	enum:SpvDecoration_
SpvDecorationNonUniform	spirv.h	/^    SpvDecorationNonUniform = 5300,$/;"	e	enum:SpvDecoration_
SpvDecorationNonUniformEXT	spirv.h	/^    SpvDecorationNonUniformEXT = 5300,$/;"	e	enum:SpvDecoration_
SpvDecorationNonWritable	spirv.h	/^    SpvDecorationNonWritable = 24,$/;"	e	enum:SpvDecoration_
SpvDecorationNumbanksINTEL	spirv.h	/^    SpvDecorationNumbanksINTEL = 5827,$/;"	e	enum:SpvDecoration_
SpvDecorationOffset	spirv.h	/^    SpvDecorationOffset = 35,$/;"	e	enum:SpvDecoration_
SpvDecorationOverrideCoverageNV	spirv.h	/^    SpvDecorationOverrideCoverageNV = 5248,$/;"	e	enum:SpvDecoration_
SpvDecorationPassthroughNV	spirv.h	/^    SpvDecorationPassthroughNV = 5250,$/;"	e	enum:SpvDecoration_
SpvDecorationPatch	spirv.h	/^    SpvDecorationPatch = 15,$/;"	e	enum:SpvDecoration_
SpvDecorationPerPrimitiveNV	spirv.h	/^    SpvDecorationPerPrimitiveNV = 5271,$/;"	e	enum:SpvDecoration_
SpvDecorationPerTaskNV	spirv.h	/^    SpvDecorationPerTaskNV = 5273,$/;"	e	enum:SpvDecoration_
SpvDecorationPerVertexKHR	spirv.h	/^    SpvDecorationPerVertexKHR = 5285,$/;"	e	enum:SpvDecoration_
SpvDecorationPerVertexNV	spirv.h	/^    SpvDecorationPerVertexNV = 5285,$/;"	e	enum:SpvDecoration_
SpvDecorationPerViewNV	spirv.h	/^    SpvDecorationPerViewNV = 5272,$/;"	e	enum:SpvDecoration_
SpvDecorationPrefetchINTEL	spirv.h	/^    SpvDecorationPrefetchINTEL = 5902,$/;"	e	enum:SpvDecoration_
SpvDecorationReferencedIndirectlyINTEL	spirv.h	/^    SpvDecorationReferencedIndirectlyINTEL = 5602,$/;"	e	enum:SpvDecoration_
SpvDecorationRegisterINTEL	spirv.h	/^    SpvDecorationRegisterINTEL = 5825,$/;"	e	enum:SpvDecoration_
SpvDecorationRelaxedPrecision	spirv.h	/^    SpvDecorationRelaxedPrecision = 0,$/;"	e	enum:SpvDecoration_
SpvDecorationRestrict	spirv.h	/^    SpvDecorationRestrict = 19,$/;"	e	enum:SpvDecoration_
SpvDecorationRestrictPointer	spirv.h	/^    SpvDecorationRestrictPointer = 5355,$/;"	e	enum:SpvDecoration_
SpvDecorationRestrictPointerEXT	spirv.h	/^    SpvDecorationRestrictPointerEXT = 5355,$/;"	e	enum:SpvDecoration_
SpvDecorationRowMajor	spirv.h	/^    SpvDecorationRowMajor = 4,$/;"	e	enum:SpvDecoration_
SpvDecorationSIMTCallINTEL	spirv.h	/^    SpvDecorationSIMTCallINTEL = 5599,$/;"	e	enum:SpvDecoration_
SpvDecorationSample	spirv.h	/^    SpvDecorationSample = 17,$/;"	e	enum:SpvDecoration_
SpvDecorationSaturatedConversion	spirv.h	/^    SpvDecorationSaturatedConversion = 28,$/;"	e	enum:SpvDecoration_
SpvDecorationSecondaryViewportRelativeNV	spirv.h	/^    SpvDecorationSecondaryViewportRelativeNV = 5256,$/;"	e	enum:SpvDecoration_
SpvDecorationSideEffectsINTEL	spirv.h	/^    SpvDecorationSideEffectsINTEL = 5608,$/;"	e	enum:SpvDecoration_
SpvDecorationSimpleDualPortINTEL	spirv.h	/^    SpvDecorationSimpleDualPortINTEL = 5833,$/;"	e	enum:SpvDecoration_
SpvDecorationSingleElementVectorINTEL	spirv.h	/^    SpvDecorationSingleElementVectorINTEL = 6085,$/;"	e	enum:SpvDecoration_
SpvDecorationSinglepumpINTEL	spirv.h	/^    SpvDecorationSinglepumpINTEL = 5830,$/;"	e	enum:SpvDecoration_
SpvDecorationSpecId	spirv.h	/^    SpvDecorationSpecId = 1,$/;"	e	enum:SpvDecoration_
SpvDecorationStackCallINTEL	spirv.h	/^    SpvDecorationStackCallINTEL = 5627,$/;"	e	enum:SpvDecoration_
SpvDecorationStallEnableINTEL	spirv.h	/^    SpvDecorationStallEnableINTEL = 5905,$/;"	e	enum:SpvDecoration_
SpvDecorationStream	spirv.h	/^    SpvDecorationStream = 29,$/;"	e	enum:SpvDecoration_
SpvDecorationUniform	spirv.h	/^    SpvDecorationUniform = 26,$/;"	e	enum:SpvDecoration_
SpvDecorationUniformId	spirv.h	/^    SpvDecorationUniformId = 27,$/;"	e	enum:SpvDecoration_
SpvDecorationUserSemantic	spirv.h	/^    SpvDecorationUserSemantic = 5635,$/;"	e	enum:SpvDecoration_
SpvDecorationUserTypeGOOGLE	spirv.h	/^    SpvDecorationUserTypeGOOGLE = 5636,$/;"	e	enum:SpvDecoration_
SpvDecorationVectorComputeCallableFunctionINTEL	spirv.h	/^    SpvDecorationVectorComputeCallableFunctionINTEL = 6087,$/;"	e	enum:SpvDecoration_
SpvDecorationVectorComputeFunctionINTEL	spirv.h	/^    SpvDecorationVectorComputeFunctionINTEL = 5626,$/;"	e	enum:SpvDecoration_
SpvDecorationVectorComputeVariableINTEL	spirv.h	/^    SpvDecorationVectorComputeVariableINTEL = 5624,$/;"	e	enum:SpvDecoration_
SpvDecorationViewportRelativeNV	spirv.h	/^    SpvDecorationViewportRelativeNV = 5252,$/;"	e	enum:SpvDecoration_
SpvDecorationVolatile	spirv.h	/^    SpvDecorationVolatile = 21,$/;"	e	enum:SpvDecoration_
SpvDecorationXfbBuffer	spirv.h	/^    SpvDecorationXfbBuffer = 36,$/;"	e	enum:SpvDecoration_
SpvDecorationXfbStride	spirv.h	/^    SpvDecorationXfbStride = 37,$/;"	e	enum:SpvDecoration_
SpvDecoration_	spirv.h	/^typedef enum SpvDecoration_ {$/;"	g
SpvDim	spirv.h	/^} SpvDim;$/;"	t	typeref:enum:SpvDim_
SpvDim1D	spirv.h	/^    SpvDim1D = 0,$/;"	e	enum:SpvDim_
SpvDim2D	spirv.h	/^    SpvDim2D = 1,$/;"	e	enum:SpvDim_
SpvDim3D	spirv.h	/^    SpvDim3D = 2,$/;"	e	enum:SpvDim_
SpvDimBuffer	spirv.h	/^    SpvDimBuffer = 5,$/;"	e	enum:SpvDim_
SpvDimCube	spirv.h	/^    SpvDimCube = 3,$/;"	e	enum:SpvDim_
SpvDimMax	spirv.h	/^    SpvDimMax = 0x7fffffff,$/;"	e	enum:SpvDim_
SpvDimRect	spirv.h	/^    SpvDimRect = 4,$/;"	e	enum:SpvDim_
SpvDimSubpassData	spirv.h	/^    SpvDimSubpassData = 6,$/;"	e	enum:SpvDim_
SpvDim_	spirv.h	/^typedef enum SpvDim_ {$/;"	g
SpvExecutionMode	spirv.h	/^} SpvExecutionMode;$/;"	t	typeref:enum:SpvExecutionMode_
SpvExecutionModeContractionOff	spirv.h	/^    SpvExecutionModeContractionOff = 31,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDenormFlushToZero	spirv.h	/^    SpvExecutionModeDenormFlushToZero = 4460,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDenormPreserve	spirv.h	/^    SpvExecutionModeDenormPreserve = 4459,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthGreater	spirv.h	/^    SpvExecutionModeDepthGreater = 14,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthLess	spirv.h	/^    SpvExecutionModeDepthLess = 15,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthReplacing	spirv.h	/^    SpvExecutionModeDepthReplacing = 12,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDepthUnchanged	spirv.h	/^    SpvExecutionModeDepthUnchanged = 16,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDerivativeGroupLinearNV	spirv.h	/^    SpvExecutionModeDerivativeGroupLinearNV = 5290,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeDerivativeGroupQuadsNV	spirv.h	/^    SpvExecutionModeDerivativeGroupQuadsNV = 5289,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeEarlyFragmentTests	spirv.h	/^    SpvExecutionModeEarlyFragmentTests = 9,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeFinalizer	spirv.h	/^    SpvExecutionModeFinalizer = 34,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeFloatingPointModeALTINTEL	spirv.h	/^    SpvExecutionModeFloatingPointModeALTINTEL = 5622,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeFloatingPointModeIEEEINTEL	spirv.h	/^    SpvExecutionModeFloatingPointModeIEEEINTEL = 5623,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInitializer	spirv.h	/^    SpvExecutionModeInitializer = 33,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputLines	spirv.h	/^    SpvExecutionModeInputLines = 20,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputLinesAdjacency	spirv.h	/^    SpvExecutionModeInputLinesAdjacency = 21,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputPoints	spirv.h	/^    SpvExecutionModeInputPoints = 19,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInputTrianglesAdjacency	spirv.h	/^    SpvExecutionModeInputTrianglesAdjacency = 23,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeInvocations	spirv.h	/^    SpvExecutionModeInvocations = 0,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeIsolines	spirv.h	/^    SpvExecutionModeIsolines = 25,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSize	spirv.h	/^    SpvExecutionModeLocalSize = 17,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSizeHint	spirv.h	/^    SpvExecutionModeLocalSizeHint = 18,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSizeHintId	spirv.h	/^    SpvExecutionModeLocalSizeHintId = 39,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeLocalSizeId	spirv.h	/^    SpvExecutionModeLocalSizeId = 38,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeMax	spirv.h	/^    SpvExecutionModeMax = 0x7fffffff,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeMaxWorkDimINTEL	spirv.h	/^    SpvExecutionModeMaxWorkDimINTEL = 5894,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeMaxWorkgroupSizeINTEL	spirv.h	/^    SpvExecutionModeMaxWorkgroupSizeINTEL = 5893,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeNoGlobalOffsetINTEL	spirv.h	/^    SpvExecutionModeNoGlobalOffsetINTEL = 5895,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeNumSIMDWorkitemsINTEL	spirv.h	/^    SpvExecutionModeNumSIMDWorkitemsINTEL = 5896,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOriginLowerLeft	spirv.h	/^    SpvExecutionModeOriginLowerLeft = 8,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOriginUpperLeft	spirv.h	/^    SpvExecutionModeOriginUpperLeft = 7,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputLineStrip	spirv.h	/^    SpvExecutionModeOutputLineStrip = 28,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputLinesNV	spirv.h	/^    SpvExecutionModeOutputLinesNV = 5269,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputPoints	spirv.h	/^    SpvExecutionModeOutputPoints = 27,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputPrimitivesNV	spirv.h	/^    SpvExecutionModeOutputPrimitivesNV = 5270,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputTriangleStrip	spirv.h	/^    SpvExecutionModeOutputTriangleStrip = 29,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputTrianglesNV	spirv.h	/^    SpvExecutionModeOutputTrianglesNV = 5298,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeOutputVertices	spirv.h	/^    SpvExecutionModeOutputVertices = 26,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePixelCenterInteger	spirv.h	/^    SpvExecutionModePixelCenterInteger = 6,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePixelInterlockOrderedEXT	spirv.h	/^    SpvExecutionModePixelInterlockOrderedEXT = 5366,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePixelInterlockUnorderedEXT	spirv.h	/^    SpvExecutionModePixelInterlockUnorderedEXT = 5367,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePointMode	spirv.h	/^    SpvExecutionModePointMode = 10,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModePostDepthCoverage	spirv.h	/^    SpvExecutionModePostDepthCoverage = 4446,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeQuads	spirv.h	/^    SpvExecutionModeQuads = 24,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeRoundingModeRTE	spirv.h	/^    SpvExecutionModeRoundingModeRTE = 4462,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeRoundingModeRTNINTEL	spirv.h	/^    SpvExecutionModeRoundingModeRTNINTEL = 5621,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeRoundingModeRTPINTEL	spirv.h	/^    SpvExecutionModeRoundingModeRTPINTEL = 5620,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeRoundingModeRTZ	spirv.h	/^    SpvExecutionModeRoundingModeRTZ = 4463,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSampleInterlockOrderedEXT	spirv.h	/^    SpvExecutionModeSampleInterlockOrderedEXT = 5368,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSampleInterlockUnorderedEXT	spirv.h	/^    SpvExecutionModeSampleInterlockUnorderedEXT = 5369,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSchedulerTargetFmaxMhzINTEL	spirv.h	/^    SpvExecutionModeSchedulerTargetFmaxMhzINTEL = 5903,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeShadingRateInterlockOrderedEXT	spirv.h	/^    SpvExecutionModeShadingRateInterlockOrderedEXT = 5370,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeShadingRateInterlockUnorderedEXT	spirv.h	/^    SpvExecutionModeShadingRateInterlockUnorderedEXT = 5371,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSharedLocalMemorySizeINTEL	spirv.h	/^    SpvExecutionModeSharedLocalMemorySizeINTEL = 5618,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSignedZeroInfNanPreserve	spirv.h	/^    SpvExecutionModeSignedZeroInfNanPreserve = 4461,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingEqual	spirv.h	/^    SpvExecutionModeSpacingEqual = 1,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingFractionalEven	spirv.h	/^    SpvExecutionModeSpacingFractionalEven = 2,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSpacingFractionalOdd	spirv.h	/^    SpvExecutionModeSpacingFractionalOdd = 3,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeStencilRefReplacingEXT	spirv.h	/^    SpvExecutionModeStencilRefReplacingEXT = 5027,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupSize	spirv.h	/^    SpvExecutionModeSubgroupSize = 35,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupUniformControlFlowKHR	spirv.h	/^    SpvExecutionModeSubgroupUniformControlFlowKHR = 4421,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupsPerWorkgroup	spirv.h	/^    SpvExecutionModeSubgroupsPerWorkgroup = 36,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeSubgroupsPerWorkgroupId	spirv.h	/^    SpvExecutionModeSubgroupsPerWorkgroupId = 37,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeTriangles	spirv.h	/^    SpvExecutionModeTriangles = 22,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVecTypeHint	spirv.h	/^    SpvExecutionModeVecTypeHint = 30,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVertexOrderCcw	spirv.h	/^    SpvExecutionModeVertexOrderCcw = 5,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeVertexOrderCw	spirv.h	/^    SpvExecutionModeVertexOrderCw = 4,$/;"	e	enum:SpvExecutionMode_
SpvExecutionModeXfb	spirv.h	/^    SpvExecutionModeXfb = 11,$/;"	e	enum:SpvExecutionMode_
SpvExecutionMode_	spirv.h	/^typedef enum SpvExecutionMode_ {$/;"	g
SpvExecutionModel	spirv.h	/^} SpvExecutionModel;$/;"	t	typeref:enum:SpvExecutionModel_
SpvExecutionModelAnyHitKHR	spirv.h	/^    SpvExecutionModelAnyHitKHR = 5315,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelAnyHitNV	spirv.h	/^    SpvExecutionModelAnyHitNV = 5315,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelCallableKHR	spirv.h	/^    SpvExecutionModelCallableKHR = 5318,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelCallableNV	spirv.h	/^    SpvExecutionModelCallableNV = 5318,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelClosestHitKHR	spirv.h	/^    SpvExecutionModelClosestHitKHR = 5316,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelClosestHitNV	spirv.h	/^    SpvExecutionModelClosestHitNV = 5316,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelFragment	spirv.h	/^    SpvExecutionModelFragment = 4,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelGLCompute	spirv.h	/^    SpvExecutionModelGLCompute = 5,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelGeometry	spirv.h	/^    SpvExecutionModelGeometry = 3,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelIntersectionKHR	spirv.h	/^    SpvExecutionModelIntersectionKHR = 5314,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelIntersectionNV	spirv.h	/^    SpvExecutionModelIntersectionNV = 5314,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelKernel	spirv.h	/^    SpvExecutionModelKernel = 6,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelMax	spirv.h	/^    SpvExecutionModelMax = 0x7fffffff,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelMeshNV	spirv.h	/^    SpvExecutionModelMeshNV = 5268,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelMissKHR	spirv.h	/^    SpvExecutionModelMissKHR = 5317,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelMissNV	spirv.h	/^    SpvExecutionModelMissNV = 5317,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelRayGenerationKHR	spirv.h	/^    SpvExecutionModelRayGenerationKHR = 5313,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelRayGenerationNV	spirv.h	/^    SpvExecutionModelRayGenerationNV = 5313,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelTaskNV	spirv.h	/^    SpvExecutionModelTaskNV = 5267,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelTessellationControl	spirv.h	/^    SpvExecutionModelTessellationControl = 1,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelTessellationEvaluation	spirv.h	/^    SpvExecutionModelTessellationEvaluation = 2,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModelVertex	spirv.h	/^    SpvExecutionModelVertex = 0,$/;"	e	enum:SpvExecutionModel_
SpvExecutionModel_	spirv.h	/^typedef enum SpvExecutionModel_ {$/;"	g
SpvFPDenormMode	spirv.h	/^} SpvFPDenormMode;$/;"	t	typeref:enum:SpvFPDenormMode_
SpvFPDenormModeFlushToZero	spirv.h	/^    SpvFPDenormModeFlushToZero = 1,$/;"	e	enum:SpvFPDenormMode_
SpvFPDenormModeMax	spirv.h	/^    SpvFPDenormModeMax = 0x7fffffff,$/;"	e	enum:SpvFPDenormMode_
SpvFPDenormModePreserve	spirv.h	/^    SpvFPDenormModePreserve = 0,$/;"	e	enum:SpvFPDenormMode_
SpvFPDenormMode_	spirv.h	/^typedef enum SpvFPDenormMode_ {$/;"	g
SpvFPFastMathModeAllowContractFastINTELMask	spirv.h	/^    SpvFPFastMathModeAllowContractFastINTELMask = 0x00010000,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeAllowContractFastINTELShift	spirv.h	/^    SpvFPFastMathModeAllowContractFastINTELShift = 16,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeAllowReassocINTELMask	spirv.h	/^    SpvFPFastMathModeAllowReassocINTELMask = 0x00020000,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeAllowReassocINTELShift	spirv.h	/^    SpvFPFastMathModeAllowReassocINTELShift = 17,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeAllowRecipMask	spirv.h	/^    SpvFPFastMathModeAllowRecipMask = 0x00000008,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeAllowRecipShift	spirv.h	/^    SpvFPFastMathModeAllowRecipShift = 3,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeFastMask	spirv.h	/^    SpvFPFastMathModeFastMask = 0x00000010,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeFastShift	spirv.h	/^    SpvFPFastMathModeFastShift = 4,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeMask	spirv.h	/^} SpvFPFastMathModeMask;$/;"	t	typeref:enum:SpvFPFastMathModeMask_
SpvFPFastMathModeMaskNone	spirv.h	/^    SpvFPFastMathModeMaskNone = 0,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeMask_	spirv.h	/^typedef enum SpvFPFastMathModeMask_ {$/;"	g
SpvFPFastMathModeMax	spirv.h	/^    SpvFPFastMathModeMax = 0x7fffffff,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNSZMask	spirv.h	/^    SpvFPFastMathModeNSZMask = 0x00000004,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNSZShift	spirv.h	/^    SpvFPFastMathModeNSZShift = 2,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNotInfMask	spirv.h	/^    SpvFPFastMathModeNotInfMask = 0x00000002,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNotInfShift	spirv.h	/^    SpvFPFastMathModeNotInfShift = 1,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeNotNaNMask	spirv.h	/^    SpvFPFastMathModeNotNaNMask = 0x00000001,$/;"	e	enum:SpvFPFastMathModeMask_
SpvFPFastMathModeNotNaNShift	spirv.h	/^    SpvFPFastMathModeNotNaNShift = 0,$/;"	e	enum:SpvFPFastMathModeShift_
SpvFPFastMathModeShift	spirv.h	/^} SpvFPFastMathModeShift;$/;"	t	typeref:enum:SpvFPFastMathModeShift_
SpvFPFastMathModeShift_	spirv.h	/^typedef enum SpvFPFastMathModeShift_ {$/;"	g
SpvFPOperationMode	spirv.h	/^} SpvFPOperationMode;$/;"	t	typeref:enum:SpvFPOperationMode_
SpvFPOperationModeALT	spirv.h	/^    SpvFPOperationModeALT = 1,$/;"	e	enum:SpvFPOperationMode_
SpvFPOperationModeIEEE	spirv.h	/^    SpvFPOperationModeIEEE = 0,$/;"	e	enum:SpvFPOperationMode_
SpvFPOperationModeMax	spirv.h	/^    SpvFPOperationModeMax = 0x7fffffff,$/;"	e	enum:SpvFPOperationMode_
SpvFPOperationMode_	spirv.h	/^typedef enum SpvFPOperationMode_ {$/;"	g
SpvFPRoundingMode	spirv.h	/^} SpvFPRoundingMode;$/;"	t	typeref:enum:SpvFPRoundingMode_
SpvFPRoundingModeMax	spirv.h	/^    SpvFPRoundingModeMax = 0x7fffffff,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTE	spirv.h	/^    SpvFPRoundingModeRTE = 0,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTN	spirv.h	/^    SpvFPRoundingModeRTN = 3,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTP	spirv.h	/^    SpvFPRoundingModeRTP = 2,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingModeRTZ	spirv.h	/^    SpvFPRoundingModeRTZ = 1,$/;"	e	enum:SpvFPRoundingMode_
SpvFPRoundingMode_	spirv.h	/^typedef enum SpvFPRoundingMode_ {$/;"	g
SpvFragmentShadingRateHorizontal2PixelsMask	spirv.h	/^    SpvFragmentShadingRateHorizontal2PixelsMask = 0x00000004,$/;"	e	enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateHorizontal2PixelsShift	spirv.h	/^    SpvFragmentShadingRateHorizontal2PixelsShift = 2,$/;"	e	enum:SpvFragmentShadingRateShift_
SpvFragmentShadingRateHorizontal4PixelsMask	spirv.h	/^    SpvFragmentShadingRateHorizontal4PixelsMask = 0x00000008,$/;"	e	enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateHorizontal4PixelsShift	spirv.h	/^    SpvFragmentShadingRateHorizontal4PixelsShift = 3,$/;"	e	enum:SpvFragmentShadingRateShift_
SpvFragmentShadingRateMask	spirv.h	/^} SpvFragmentShadingRateMask;$/;"	t	typeref:enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateMaskNone	spirv.h	/^    SpvFragmentShadingRateMaskNone = 0,$/;"	e	enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateMask_	spirv.h	/^typedef enum SpvFragmentShadingRateMask_ {$/;"	g
SpvFragmentShadingRateMax	spirv.h	/^    SpvFragmentShadingRateMax = 0x7fffffff,$/;"	e	enum:SpvFragmentShadingRateShift_
SpvFragmentShadingRateShift	spirv.h	/^} SpvFragmentShadingRateShift;$/;"	t	typeref:enum:SpvFragmentShadingRateShift_
SpvFragmentShadingRateShift_	spirv.h	/^typedef enum SpvFragmentShadingRateShift_ {$/;"	g
SpvFragmentShadingRateVertical2PixelsMask	spirv.h	/^    SpvFragmentShadingRateVertical2PixelsMask = 0x00000001,$/;"	e	enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateVertical2PixelsShift	spirv.h	/^    SpvFragmentShadingRateVertical2PixelsShift = 0,$/;"	e	enum:SpvFragmentShadingRateShift_
SpvFragmentShadingRateVertical4PixelsMask	spirv.h	/^    SpvFragmentShadingRateVertical4PixelsMask = 0x00000002,$/;"	e	enum:SpvFragmentShadingRateMask_
SpvFragmentShadingRateVertical4PixelsShift	spirv.h	/^    SpvFragmentShadingRateVertical4PixelsShift = 1,$/;"	e	enum:SpvFragmentShadingRateShift_
SpvFunctionControlConstMask	spirv.h	/^    SpvFunctionControlConstMask = 0x00000008,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlConstShift	spirv.h	/^    SpvFunctionControlConstShift = 3,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlDontInlineMask	spirv.h	/^    SpvFunctionControlDontInlineMask = 0x00000002,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlDontInlineShift	spirv.h	/^    SpvFunctionControlDontInlineShift = 1,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlInlineMask	spirv.h	/^    SpvFunctionControlInlineMask = 0x00000001,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlInlineShift	spirv.h	/^    SpvFunctionControlInlineShift = 0,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlMask	spirv.h	/^} SpvFunctionControlMask;$/;"	t	typeref:enum:SpvFunctionControlMask_
SpvFunctionControlMaskNone	spirv.h	/^    SpvFunctionControlMaskNone = 0,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlMask_	spirv.h	/^typedef enum SpvFunctionControlMask_ {$/;"	g
SpvFunctionControlMax	spirv.h	/^    SpvFunctionControlMax = 0x7fffffff,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlOptNoneINTELMask	spirv.h	/^    SpvFunctionControlOptNoneINTELMask = 0x00010000,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlOptNoneINTELShift	spirv.h	/^    SpvFunctionControlOptNoneINTELShift = 16,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlPureMask	spirv.h	/^    SpvFunctionControlPureMask = 0x00000004,$/;"	e	enum:SpvFunctionControlMask_
SpvFunctionControlPureShift	spirv.h	/^    SpvFunctionControlPureShift = 2,$/;"	e	enum:SpvFunctionControlShift_
SpvFunctionControlShift	spirv.h	/^} SpvFunctionControlShift;$/;"	t	typeref:enum:SpvFunctionControlShift_
SpvFunctionControlShift_	spirv.h	/^typedef enum SpvFunctionControlShift_ {$/;"	g
SpvFunctionParameterAttribute	spirv.h	/^} SpvFunctionParameterAttribute;$/;"	t	typeref:enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeByVal	spirv.h	/^    SpvFunctionParameterAttributeByVal = 2,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeMax	spirv.h	/^    SpvFunctionParameterAttributeMax = 0x7fffffff,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoAlias	spirv.h	/^    SpvFunctionParameterAttributeNoAlias = 4,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoCapture	spirv.h	/^    SpvFunctionParameterAttributeNoCapture = 5,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoReadWrite	spirv.h	/^    SpvFunctionParameterAttributeNoReadWrite = 7,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeNoWrite	spirv.h	/^    SpvFunctionParameterAttributeNoWrite = 6,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeSext	spirv.h	/^    SpvFunctionParameterAttributeSext = 1,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeSret	spirv.h	/^    SpvFunctionParameterAttributeSret = 3,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttributeZext	spirv.h	/^    SpvFunctionParameterAttributeZext = 0,$/;"	e	enum:SpvFunctionParameterAttribute_
SpvFunctionParameterAttribute_	spirv.h	/^typedef enum SpvFunctionParameterAttribute_ {$/;"	g
SpvGroupOperation	spirv.h	/^} SpvGroupOperation;$/;"	t	typeref:enum:SpvGroupOperation_
SpvGroupOperationClusteredReduce	spirv.h	/^    SpvGroupOperationClusteredReduce = 3,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationExclusiveScan	spirv.h	/^    SpvGroupOperationExclusiveScan = 2,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationInclusiveScan	spirv.h	/^    SpvGroupOperationInclusiveScan = 1,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationMax	spirv.h	/^    SpvGroupOperationMax = 0x7fffffff,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationPartitionedExclusiveScanNV	spirv.h	/^    SpvGroupOperationPartitionedExclusiveScanNV = 8,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationPartitionedInclusiveScanNV	spirv.h	/^    SpvGroupOperationPartitionedInclusiveScanNV = 7,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationPartitionedReduceNV	spirv.h	/^    SpvGroupOperationPartitionedReduceNV = 6,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperationReduce	spirv.h	/^    SpvGroupOperationReduce = 0,$/;"	e	enum:SpvGroupOperation_
SpvGroupOperation_	spirv.h	/^typedef enum SpvGroupOperation_ {$/;"	g
SpvHasResultAndType	spirv.h	/^inline void SpvHasResultAndType(SpvOp opcode, bool *hasResult, bool *hasResultType) {$/;"	f
SpvId	spirv.h	/^typedef unsigned int SpvId;$/;"	t
SpvImageChannelDataType	spirv.h	/^} SpvImageChannelDataType;$/;"	t	typeref:enum:SpvImageChannelDataType_
SpvImageChannelDataTypeFloat	spirv.h	/^    SpvImageChannelDataTypeFloat = 14,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeHalfFloat	spirv.h	/^    SpvImageChannelDataTypeHalfFloat = 13,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeMax	spirv.h	/^    SpvImageChannelDataTypeMax = 0x7fffffff,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt16	spirv.h	/^    SpvImageChannelDataTypeSignedInt16 = 8,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt32	spirv.h	/^    SpvImageChannelDataTypeSignedInt32 = 9,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSignedInt8	spirv.h	/^    SpvImageChannelDataTypeSignedInt8 = 7,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSnormInt16	spirv.h	/^    SpvImageChannelDataTypeSnormInt16 = 1,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeSnormInt8	spirv.h	/^    SpvImageChannelDataTypeSnormInt8 = 0,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt101010	spirv.h	/^    SpvImageChannelDataTypeUnormInt101010 = 6,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt101010_2	spirv.h	/^    SpvImageChannelDataTypeUnormInt101010_2 = 16,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt16	spirv.h	/^    SpvImageChannelDataTypeUnormInt16 = 3,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt24	spirv.h	/^    SpvImageChannelDataTypeUnormInt24 = 15,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormInt8	spirv.h	/^    SpvImageChannelDataTypeUnormInt8 = 2,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormShort555	spirv.h	/^    SpvImageChannelDataTypeUnormShort555 = 5,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnormShort565	spirv.h	/^    SpvImageChannelDataTypeUnormShort565 = 4,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt16	spirv.h	/^    SpvImageChannelDataTypeUnsignedInt16 = 11,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt32	spirv.h	/^    SpvImageChannelDataTypeUnsignedInt32 = 12,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataTypeUnsignedInt8	spirv.h	/^    SpvImageChannelDataTypeUnsignedInt8 = 10,$/;"	e	enum:SpvImageChannelDataType_
SpvImageChannelDataType_	spirv.h	/^typedef enum SpvImageChannelDataType_ {$/;"	g
SpvImageChannelOrder	spirv.h	/^} SpvImageChannelOrder;$/;"	t	typeref:enum:SpvImageChannelOrder_
SpvImageChannelOrderA	spirv.h	/^    SpvImageChannelOrderA = 1,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderABGR	spirv.h	/^    SpvImageChannelOrderABGR = 19,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderARGB	spirv.h	/^    SpvImageChannelOrderARGB = 7,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderBGRA	spirv.h	/^    SpvImageChannelOrderBGRA = 6,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderDepth	spirv.h	/^    SpvImageChannelOrderDepth = 13,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderDepthStencil	spirv.h	/^    SpvImageChannelOrderDepthStencil = 14,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderIntensity	spirv.h	/^    SpvImageChannelOrderIntensity = 8,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderLuminance	spirv.h	/^    SpvImageChannelOrderLuminance = 9,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderMax	spirv.h	/^    SpvImageChannelOrderMax = 0x7fffffff,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderR	spirv.h	/^    SpvImageChannelOrderR = 0,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRA	spirv.h	/^    SpvImageChannelOrderRA = 3,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRG	spirv.h	/^    SpvImageChannelOrderRG = 2,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGB	spirv.h	/^    SpvImageChannelOrderRGB = 4,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGBA	spirv.h	/^    SpvImageChannelOrderRGBA = 5,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGBx	spirv.h	/^    SpvImageChannelOrderRGBx = 12,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRGx	spirv.h	/^    SpvImageChannelOrderRGx = 11,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrderRx	spirv.h	/^    SpvImageChannelOrderRx = 10,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrder_	spirv.h	/^typedef enum SpvImageChannelOrder_ {$/;"	g
SpvImageChannelOrdersBGRA	spirv.h	/^    SpvImageChannelOrdersBGRA = 18,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGB	spirv.h	/^    SpvImageChannelOrdersRGB = 15,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGBA	spirv.h	/^    SpvImageChannelOrdersRGBA = 17,$/;"	e	enum:SpvImageChannelOrder_
SpvImageChannelOrdersRGBx	spirv.h	/^    SpvImageChannelOrdersRGBx = 16,$/;"	e	enum:SpvImageChannelOrder_
SpvImageFormat	spirv.h	/^} SpvImageFormat;$/;"	t	typeref:enum:SpvImageFormat_
SpvImageFormatMax	spirv.h	/^    SpvImageFormatMax = 0x7fffffff,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR11fG11fB10f	spirv.h	/^    SpvImageFormatR11fG11fB10f = 8,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16	spirv.h	/^    SpvImageFormatR16 = 14,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16Snorm	spirv.h	/^    SpvImageFormatR16Snorm = 19,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16f	spirv.h	/^    SpvImageFormatR16f = 9,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16i	spirv.h	/^    SpvImageFormatR16i = 28,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR16ui	spirv.h	/^    SpvImageFormatR16ui = 38,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32f	spirv.h	/^    SpvImageFormatR32f = 3,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32i	spirv.h	/^    SpvImageFormatR32i = 24,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR32ui	spirv.h	/^    SpvImageFormatR32ui = 33,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR64i	spirv.h	/^    SpvImageFormatR64i = 41,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR64ui	spirv.h	/^    SpvImageFormatR64ui = 40,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8	spirv.h	/^    SpvImageFormatR8 = 15,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8Snorm	spirv.h	/^    SpvImageFormatR8Snorm = 20,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8i	spirv.h	/^    SpvImageFormatR8i = 29,$/;"	e	enum:SpvImageFormat_
SpvImageFormatR8ui	spirv.h	/^    SpvImageFormatR8ui = 39,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16	spirv.h	/^    SpvImageFormatRg16 = 12,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16Snorm	spirv.h	/^    SpvImageFormatRg16Snorm = 17,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16f	spirv.h	/^    SpvImageFormatRg16f = 7,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16i	spirv.h	/^    SpvImageFormatRg16i = 26,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg16ui	spirv.h	/^    SpvImageFormatRg16ui = 36,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32f	spirv.h	/^    SpvImageFormatRg32f = 6,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32i	spirv.h	/^    SpvImageFormatRg32i = 25,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg32ui	spirv.h	/^    SpvImageFormatRg32ui = 35,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8	spirv.h	/^    SpvImageFormatRg8 = 13,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8Snorm	spirv.h	/^    SpvImageFormatRg8Snorm = 18,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8i	spirv.h	/^    SpvImageFormatRg8i = 27,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRg8ui	spirv.h	/^    SpvImageFormatRg8ui = 37,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgb10A2	spirv.h	/^    SpvImageFormatRgb10A2 = 11,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgb10a2ui	spirv.h	/^    SpvImageFormatRgb10a2ui = 34,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16	spirv.h	/^    SpvImageFormatRgba16 = 10,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16Snorm	spirv.h	/^    SpvImageFormatRgba16Snorm = 16,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16f	spirv.h	/^    SpvImageFormatRgba16f = 2,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16i	spirv.h	/^    SpvImageFormatRgba16i = 22,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba16ui	spirv.h	/^    SpvImageFormatRgba16ui = 31,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32f	spirv.h	/^    SpvImageFormatRgba32f = 1,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32i	spirv.h	/^    SpvImageFormatRgba32i = 21,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba32ui	spirv.h	/^    SpvImageFormatRgba32ui = 30,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8	spirv.h	/^    SpvImageFormatRgba8 = 4,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8Snorm	spirv.h	/^    SpvImageFormatRgba8Snorm = 5,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8i	spirv.h	/^    SpvImageFormatRgba8i = 23,$/;"	e	enum:SpvImageFormat_
SpvImageFormatRgba8ui	spirv.h	/^    SpvImageFormatRgba8ui = 32,$/;"	e	enum:SpvImageFormat_
SpvImageFormatUnknown	spirv.h	/^    SpvImageFormatUnknown = 0,$/;"	e	enum:SpvImageFormat_
SpvImageFormat_	spirv.h	/^typedef enum SpvImageFormat_ {$/;"	g
SpvImageOperandsBiasMask	spirv.h	/^    SpvImageOperandsBiasMask = 0x00000001,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsBiasShift	spirv.h	/^    SpvImageOperandsBiasShift = 0,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsConstOffsetMask	spirv.h	/^    SpvImageOperandsConstOffsetMask = 0x00000008,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsConstOffsetShift	spirv.h	/^    SpvImageOperandsConstOffsetShift = 3,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsConstOffsetsMask	spirv.h	/^    SpvImageOperandsConstOffsetsMask = 0x00000020,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsConstOffsetsShift	spirv.h	/^    SpvImageOperandsConstOffsetsShift = 5,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsGradMask	spirv.h	/^    SpvImageOperandsGradMask = 0x00000004,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsGradShift	spirv.h	/^    SpvImageOperandsGradShift = 2,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsLodMask	spirv.h	/^    SpvImageOperandsLodMask = 0x00000002,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsLodShift	spirv.h	/^    SpvImageOperandsLodShift = 1,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMakeTexelAvailableKHRMask	spirv.h	/^    SpvImageOperandsMakeTexelAvailableKHRMask = 0x00000100,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMakeTexelAvailableKHRShift	spirv.h	/^    SpvImageOperandsMakeTexelAvailableKHRShift = 8,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMakeTexelAvailableMask	spirv.h	/^    SpvImageOperandsMakeTexelAvailableMask = 0x00000100,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMakeTexelAvailableShift	spirv.h	/^    SpvImageOperandsMakeTexelAvailableShift = 8,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMakeTexelVisibleKHRMask	spirv.h	/^    SpvImageOperandsMakeTexelVisibleKHRMask = 0x00000200,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMakeTexelVisibleKHRShift	spirv.h	/^    SpvImageOperandsMakeTexelVisibleKHRShift = 9,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMakeTexelVisibleMask	spirv.h	/^    SpvImageOperandsMakeTexelVisibleMask = 0x00000200,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMakeTexelVisibleShift	spirv.h	/^    SpvImageOperandsMakeTexelVisibleShift = 9,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMask	spirv.h	/^} SpvImageOperandsMask;$/;"	t	typeref:enum:SpvImageOperandsMask_
SpvImageOperandsMaskNone	spirv.h	/^    SpvImageOperandsMaskNone = 0,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMask_	spirv.h	/^typedef enum SpvImageOperandsMask_ {$/;"	g
SpvImageOperandsMax	spirv.h	/^    SpvImageOperandsMax = 0x7fffffff,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsMinLodMask	spirv.h	/^    SpvImageOperandsMinLodMask = 0x00000080,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsMinLodShift	spirv.h	/^    SpvImageOperandsMinLodShift = 7,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsNonPrivateTexelKHRMask	spirv.h	/^    SpvImageOperandsNonPrivateTexelKHRMask = 0x00000400,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsNonPrivateTexelKHRShift	spirv.h	/^    SpvImageOperandsNonPrivateTexelKHRShift = 10,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsNonPrivateTexelMask	spirv.h	/^    SpvImageOperandsNonPrivateTexelMask = 0x00000400,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsNonPrivateTexelShift	spirv.h	/^    SpvImageOperandsNonPrivateTexelShift = 10,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsNontemporalMask	spirv.h	/^    SpvImageOperandsNontemporalMask = 0x00004000,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsNontemporalShift	spirv.h	/^    SpvImageOperandsNontemporalShift = 14,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsOffsetMask	spirv.h	/^    SpvImageOperandsOffsetMask = 0x00000010,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsOffsetShift	spirv.h	/^    SpvImageOperandsOffsetShift = 4,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsOffsetsMask	spirv.h	/^    SpvImageOperandsOffsetsMask = 0x00010000,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsOffsetsShift	spirv.h	/^    SpvImageOperandsOffsetsShift = 16,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsSampleMask	spirv.h	/^    SpvImageOperandsSampleMask = 0x00000040,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsSampleShift	spirv.h	/^    SpvImageOperandsSampleShift = 6,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsShift	spirv.h	/^} SpvImageOperandsShift;$/;"	t	typeref:enum:SpvImageOperandsShift_
SpvImageOperandsShift_	spirv.h	/^typedef enum SpvImageOperandsShift_ {$/;"	g
SpvImageOperandsSignExtendMask	spirv.h	/^    SpvImageOperandsSignExtendMask = 0x00001000,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsSignExtendShift	spirv.h	/^    SpvImageOperandsSignExtendShift = 12,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsVolatileTexelKHRMask	spirv.h	/^    SpvImageOperandsVolatileTexelKHRMask = 0x00000800,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsVolatileTexelKHRShift	spirv.h	/^    SpvImageOperandsVolatileTexelKHRShift = 11,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsVolatileTexelMask	spirv.h	/^    SpvImageOperandsVolatileTexelMask = 0x00000800,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsVolatileTexelShift	spirv.h	/^    SpvImageOperandsVolatileTexelShift = 11,$/;"	e	enum:SpvImageOperandsShift_
SpvImageOperandsZeroExtendMask	spirv.h	/^    SpvImageOperandsZeroExtendMask = 0x00002000,$/;"	e	enum:SpvImageOperandsMask_
SpvImageOperandsZeroExtendShift	spirv.h	/^    SpvImageOperandsZeroExtendShift = 13,$/;"	e	enum:SpvImageOperandsShift_
SpvKernelEnqueueFlags	spirv.h	/^} SpvKernelEnqueueFlags;$/;"	t	typeref:enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsMax	spirv.h	/^    SpvKernelEnqueueFlagsMax = 0x7fffffff,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsNoWait	spirv.h	/^    SpvKernelEnqueueFlagsNoWait = 0,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsWaitKernel	spirv.h	/^    SpvKernelEnqueueFlagsWaitKernel = 1,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlagsWaitWorkGroup	spirv.h	/^    SpvKernelEnqueueFlagsWaitWorkGroup = 2,$/;"	e	enum:SpvKernelEnqueueFlags_
SpvKernelEnqueueFlags_	spirv.h	/^typedef enum SpvKernelEnqueueFlags_ {$/;"	g
SpvKernelProfilingInfoCmdExecTimeMask	spirv.h	/^    SpvKernelProfilingInfoCmdExecTimeMask = 0x00000001,$/;"	e	enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoCmdExecTimeShift	spirv.h	/^    SpvKernelProfilingInfoCmdExecTimeShift = 0,$/;"	e	enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoMask	spirv.h	/^} SpvKernelProfilingInfoMask;$/;"	t	typeref:enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoMaskNone	spirv.h	/^    SpvKernelProfilingInfoMaskNone = 0,$/;"	e	enum:SpvKernelProfilingInfoMask_
SpvKernelProfilingInfoMask_	spirv.h	/^typedef enum SpvKernelProfilingInfoMask_ {$/;"	g
SpvKernelProfilingInfoMax	spirv.h	/^    SpvKernelProfilingInfoMax = 0x7fffffff,$/;"	e	enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoShift	spirv.h	/^} SpvKernelProfilingInfoShift;$/;"	t	typeref:enum:SpvKernelProfilingInfoShift_
SpvKernelProfilingInfoShift_	spirv.h	/^typedef enum SpvKernelProfilingInfoShift_ {$/;"	g
SpvLinkageType	spirv.h	/^} SpvLinkageType;$/;"	t	typeref:enum:SpvLinkageType_
SpvLinkageTypeExport	spirv.h	/^    SpvLinkageTypeExport = 0,$/;"	e	enum:SpvLinkageType_
SpvLinkageTypeImport	spirv.h	/^    SpvLinkageTypeImport = 1,$/;"	e	enum:SpvLinkageType_
SpvLinkageTypeLinkOnceODR	spirv.h	/^    SpvLinkageTypeLinkOnceODR = 2,$/;"	e	enum:SpvLinkageType_
SpvLinkageTypeMax	spirv.h	/^    SpvLinkageTypeMax = 0x7fffffff,$/;"	e	enum:SpvLinkageType_
SpvLinkageType_	spirv.h	/^typedef enum SpvLinkageType_ {$/;"	g
SpvLoopControlDependencyArrayINTELMask	spirv.h	/^    SpvLoopControlDependencyArrayINTELMask = 0x00040000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDependencyArrayINTELShift	spirv.h	/^    SpvLoopControlDependencyArrayINTELShift = 18,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlDependencyInfiniteMask	spirv.h	/^    SpvLoopControlDependencyInfiniteMask = 0x00000004,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDependencyInfiniteShift	spirv.h	/^    SpvLoopControlDependencyInfiniteShift = 2,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlDependencyLengthMask	spirv.h	/^    SpvLoopControlDependencyLengthMask = 0x00000008,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDependencyLengthShift	spirv.h	/^    SpvLoopControlDependencyLengthShift = 3,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlDontUnrollMask	spirv.h	/^    SpvLoopControlDontUnrollMask = 0x00000002,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlDontUnrollShift	spirv.h	/^    SpvLoopControlDontUnrollShift = 1,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlInitiationIntervalINTELMask	spirv.h	/^    SpvLoopControlInitiationIntervalINTELMask = 0x00010000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlInitiationIntervalINTELShift	spirv.h	/^    SpvLoopControlInitiationIntervalINTELShift = 16,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlIterationMultipleMask	spirv.h	/^    SpvLoopControlIterationMultipleMask = 0x00000040,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlIterationMultipleShift	spirv.h	/^    SpvLoopControlIterationMultipleShift = 6,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlLoopCoalesceINTELMask	spirv.h	/^    SpvLoopControlLoopCoalesceINTELMask = 0x00100000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlLoopCoalesceINTELShift	spirv.h	/^    SpvLoopControlLoopCoalesceINTELShift = 20,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMask	spirv.h	/^} SpvLoopControlMask;$/;"	t	typeref:enum:SpvLoopControlMask_
SpvLoopControlMaskNone	spirv.h	/^    SpvLoopControlMaskNone = 0,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMask_	spirv.h	/^typedef enum SpvLoopControlMask_ {$/;"	g
SpvLoopControlMax	spirv.h	/^    SpvLoopControlMax = 0x7fffffff,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMaxConcurrencyINTELMask	spirv.h	/^    SpvLoopControlMaxConcurrencyINTELMask = 0x00020000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMaxConcurrencyINTELShift	spirv.h	/^    SpvLoopControlMaxConcurrencyINTELShift = 17,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMaxInterleavingINTELMask	spirv.h	/^    SpvLoopControlMaxInterleavingINTELMask = 0x00200000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMaxInterleavingINTELShift	spirv.h	/^    SpvLoopControlMaxInterleavingINTELShift = 21,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMaxIterationsMask	spirv.h	/^    SpvLoopControlMaxIterationsMask = 0x00000020,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMaxIterationsShift	spirv.h	/^    SpvLoopControlMaxIterationsShift = 5,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlMinIterationsMask	spirv.h	/^    SpvLoopControlMinIterationsMask = 0x00000010,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlMinIterationsShift	spirv.h	/^    SpvLoopControlMinIterationsShift = 4,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlNoFusionINTELMask	spirv.h	/^    SpvLoopControlNoFusionINTELMask = 0x00800000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlNoFusionINTELShift	spirv.h	/^    SpvLoopControlNoFusionINTELShift = 23,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlPartialCountMask	spirv.h	/^    SpvLoopControlPartialCountMask = 0x00000100,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlPartialCountShift	spirv.h	/^    SpvLoopControlPartialCountShift = 8,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlPeelCountMask	spirv.h	/^    SpvLoopControlPeelCountMask = 0x00000080,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlPeelCountShift	spirv.h	/^    SpvLoopControlPeelCountShift = 7,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlPipelineEnableINTELMask	spirv.h	/^    SpvLoopControlPipelineEnableINTELMask = 0x00080000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlPipelineEnableINTELShift	spirv.h	/^    SpvLoopControlPipelineEnableINTELShift = 19,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlShift	spirv.h	/^} SpvLoopControlShift;$/;"	t	typeref:enum:SpvLoopControlShift_
SpvLoopControlShift_	spirv.h	/^typedef enum SpvLoopControlShift_ {$/;"	g
SpvLoopControlSpeculatedIterationsINTELMask	spirv.h	/^    SpvLoopControlSpeculatedIterationsINTELMask = 0x00400000,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlSpeculatedIterationsINTELShift	spirv.h	/^    SpvLoopControlSpeculatedIterationsINTELShift = 22,$/;"	e	enum:SpvLoopControlShift_
SpvLoopControlUnrollMask	spirv.h	/^    SpvLoopControlUnrollMask = 0x00000001,$/;"	e	enum:SpvLoopControlMask_
SpvLoopControlUnrollShift	spirv.h	/^    SpvLoopControlUnrollShift = 0,$/;"	e	enum:SpvLoopControlShift_
SpvMagicNumber	spirv.h	/^static const unsigned int SpvMagicNumber = 0x07230203;$/;"	v
SpvMemoryAccessAlignedMask	spirv.h	/^    SpvMemoryAccessAlignedMask = 0x00000002,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessAlignedShift	spirv.h	/^    SpvMemoryAccessAlignedShift = 1,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMakePointerAvailableKHRMask	spirv.h	/^    SpvMemoryAccessMakePointerAvailableKHRMask = 0x00000008,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMakePointerAvailableKHRShift	spirv.h	/^    SpvMemoryAccessMakePointerAvailableKHRShift = 3,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMakePointerAvailableMask	spirv.h	/^    SpvMemoryAccessMakePointerAvailableMask = 0x00000008,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMakePointerAvailableShift	spirv.h	/^    SpvMemoryAccessMakePointerAvailableShift = 3,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMakePointerVisibleKHRMask	spirv.h	/^    SpvMemoryAccessMakePointerVisibleKHRMask = 0x00000010,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMakePointerVisibleKHRShift	spirv.h	/^    SpvMemoryAccessMakePointerVisibleKHRShift = 4,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMakePointerVisibleMask	spirv.h	/^    SpvMemoryAccessMakePointerVisibleMask = 0x00000010,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMakePointerVisibleShift	spirv.h	/^    SpvMemoryAccessMakePointerVisibleShift = 4,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessMask	spirv.h	/^} SpvMemoryAccessMask;$/;"	t	typeref:enum:SpvMemoryAccessMask_
SpvMemoryAccessMaskNone	spirv.h	/^    SpvMemoryAccessMaskNone = 0,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessMask_	spirv.h	/^typedef enum SpvMemoryAccessMask_ {$/;"	g
SpvMemoryAccessMax	spirv.h	/^    SpvMemoryAccessMax = 0x7fffffff,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessNonPrivatePointerKHRMask	spirv.h	/^    SpvMemoryAccessNonPrivatePointerKHRMask = 0x00000020,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessNonPrivatePointerKHRShift	spirv.h	/^    SpvMemoryAccessNonPrivatePointerKHRShift = 5,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessNonPrivatePointerMask	spirv.h	/^    SpvMemoryAccessNonPrivatePointerMask = 0x00000020,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessNonPrivatePointerShift	spirv.h	/^    SpvMemoryAccessNonPrivatePointerShift = 5,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessNontemporalMask	spirv.h	/^    SpvMemoryAccessNontemporalMask = 0x00000004,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessNontemporalShift	spirv.h	/^    SpvMemoryAccessNontemporalShift = 2,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryAccessShift	spirv.h	/^} SpvMemoryAccessShift;$/;"	t	typeref:enum:SpvMemoryAccessShift_
SpvMemoryAccessShift_	spirv.h	/^typedef enum SpvMemoryAccessShift_ {$/;"	g
SpvMemoryAccessVolatileMask	spirv.h	/^    SpvMemoryAccessVolatileMask = 0x00000001,$/;"	e	enum:SpvMemoryAccessMask_
SpvMemoryAccessVolatileShift	spirv.h	/^    SpvMemoryAccessVolatileShift = 0,$/;"	e	enum:SpvMemoryAccessShift_
SpvMemoryModel	spirv.h	/^} SpvMemoryModel;$/;"	t	typeref:enum:SpvMemoryModel_
SpvMemoryModelGLSL450	spirv.h	/^    SpvMemoryModelGLSL450 = 1,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelMax	spirv.h	/^    SpvMemoryModelMax = 0x7fffffff,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelOpenCL	spirv.h	/^    SpvMemoryModelOpenCL = 2,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelSimple	spirv.h	/^    SpvMemoryModelSimple = 0,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelVulkan	spirv.h	/^    SpvMemoryModelVulkan = 3,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModelVulkanKHR	spirv.h	/^    SpvMemoryModelVulkanKHR = 3,$/;"	e	enum:SpvMemoryModel_
SpvMemoryModel_	spirv.h	/^typedef enum SpvMemoryModel_ {$/;"	g
SpvMemorySemanticsAcquireMask	spirv.h	/^    SpvMemorySemanticsAcquireMask = 0x00000002,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAcquireReleaseMask	spirv.h	/^    SpvMemorySemanticsAcquireReleaseMask = 0x00000008,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAcquireReleaseShift	spirv.h	/^    SpvMemorySemanticsAcquireReleaseShift = 3,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsAcquireShift	spirv.h	/^    SpvMemorySemanticsAcquireShift = 1,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsAtomicCounterMemoryMask	spirv.h	/^    SpvMemorySemanticsAtomicCounterMemoryMask = 0x00000400,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsAtomicCounterMemoryShift	spirv.h	/^    SpvMemorySemanticsAtomicCounterMemoryShift = 10,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsCrossWorkgroupMemoryMask	spirv.h	/^    SpvMemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsCrossWorkgroupMemoryShift	spirv.h	/^    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsImageMemoryMask	spirv.h	/^    SpvMemorySemanticsImageMemoryMask = 0x00000800,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsImageMemoryShift	spirv.h	/^    SpvMemorySemanticsImageMemoryShift = 11,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMakeAvailableKHRMask	spirv.h	/^    SpvMemorySemanticsMakeAvailableKHRMask = 0x00002000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMakeAvailableKHRShift	spirv.h	/^    SpvMemorySemanticsMakeAvailableKHRShift = 13,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMakeAvailableMask	spirv.h	/^    SpvMemorySemanticsMakeAvailableMask = 0x00002000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMakeAvailableShift	spirv.h	/^    SpvMemorySemanticsMakeAvailableShift = 13,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMakeVisibleKHRMask	spirv.h	/^    SpvMemorySemanticsMakeVisibleKHRMask = 0x00004000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMakeVisibleKHRShift	spirv.h	/^    SpvMemorySemanticsMakeVisibleKHRShift = 14,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMakeVisibleMask	spirv.h	/^    SpvMemorySemanticsMakeVisibleMask = 0x00004000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMakeVisibleShift	spirv.h	/^    SpvMemorySemanticsMakeVisibleShift = 14,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsMask	spirv.h	/^} SpvMemorySemanticsMask;$/;"	t	typeref:enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMaskNone	spirv.h	/^    SpvMemorySemanticsMaskNone = 0,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsMask_	spirv.h	/^typedef enum SpvMemorySemanticsMask_ {$/;"	g
SpvMemorySemanticsMax	spirv.h	/^    SpvMemorySemanticsMax = 0x7fffffff,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsOutputMemoryKHRMask	spirv.h	/^    SpvMemorySemanticsOutputMemoryKHRMask = 0x00001000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsOutputMemoryKHRShift	spirv.h	/^    SpvMemorySemanticsOutputMemoryKHRShift = 12,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsOutputMemoryMask	spirv.h	/^    SpvMemorySemanticsOutputMemoryMask = 0x00001000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsOutputMemoryShift	spirv.h	/^    SpvMemorySemanticsOutputMemoryShift = 12,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsReleaseMask	spirv.h	/^    SpvMemorySemanticsReleaseMask = 0x00000004,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsReleaseShift	spirv.h	/^    SpvMemorySemanticsReleaseShift = 2,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsSequentiallyConsistentMask	spirv.h	/^    SpvMemorySemanticsSequentiallyConsistentMask = 0x00000010,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsSequentiallyConsistentShift	spirv.h	/^    SpvMemorySemanticsSequentiallyConsistentShift = 4,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsShift	spirv.h	/^} SpvMemorySemanticsShift;$/;"	t	typeref:enum:SpvMemorySemanticsShift_
SpvMemorySemanticsShift_	spirv.h	/^typedef enum SpvMemorySemanticsShift_ {$/;"	g
SpvMemorySemanticsSubgroupMemoryMask	spirv.h	/^    SpvMemorySemanticsSubgroupMemoryMask = 0x00000080,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsSubgroupMemoryShift	spirv.h	/^    SpvMemorySemanticsSubgroupMemoryShift = 7,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsUniformMemoryMask	spirv.h	/^    SpvMemorySemanticsUniformMemoryMask = 0x00000040,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsUniformMemoryShift	spirv.h	/^    SpvMemorySemanticsUniformMemoryShift = 6,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsVolatileMask	spirv.h	/^    SpvMemorySemanticsVolatileMask = 0x00008000,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsVolatileShift	spirv.h	/^    SpvMemorySemanticsVolatileShift = 15,$/;"	e	enum:SpvMemorySemanticsShift_
SpvMemorySemanticsWorkgroupMemoryMask	spirv.h	/^    SpvMemorySemanticsWorkgroupMemoryMask = 0x00000100,$/;"	e	enum:SpvMemorySemanticsMask_
SpvMemorySemanticsWorkgroupMemoryShift	spirv.h	/^    SpvMemorySemanticsWorkgroupMemoryShift = 8,$/;"	e	enum:SpvMemorySemanticsShift_
SpvOp	spirv.h	/^} SpvOp;$/;"	t	typeref:enum:SpvOp_
SpvOpAbsISubINTEL	spirv.h	/^    SpvOpAbsISubINTEL = 5587,$/;"	e	enum:SpvOp_
SpvOpAbsUSubINTEL	spirv.h	/^    SpvOpAbsUSubINTEL = 5588,$/;"	e	enum:SpvOp_
SpvOpAccessChain	spirv.h	/^    SpvOpAccessChain = 65,$/;"	e	enum:SpvOp_
SpvOpAll	spirv.h	/^    SpvOpAll = 155,$/;"	e	enum:SpvOp_
SpvOpAny	spirv.h	/^    SpvOpAny = 154,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatACosINTEL	spirv.h	/^    SpvOpArbitraryFloatACosINTEL = 5875,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatACosPiINTEL	spirv.h	/^    SpvOpArbitraryFloatACosPiINTEL = 5876,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatASinINTEL	spirv.h	/^    SpvOpArbitraryFloatASinINTEL = 5873,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatASinPiINTEL	spirv.h	/^    SpvOpArbitraryFloatASinPiINTEL = 5874,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatATan2INTEL	spirv.h	/^    SpvOpArbitraryFloatATan2INTEL = 5879,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatATanINTEL	spirv.h	/^    SpvOpArbitraryFloatATanINTEL = 5877,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatATanPiINTEL	spirv.h	/^    SpvOpArbitraryFloatATanPiINTEL = 5878,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatAddINTEL	spirv.h	/^    SpvOpArbitraryFloatAddINTEL = 5846,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCastFromIntINTEL	spirv.h	/^    SpvOpArbitraryFloatCastFromIntINTEL = 5842,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCastINTEL	spirv.h	/^    SpvOpArbitraryFloatCastINTEL = 5841,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCastToIntINTEL	spirv.h	/^    SpvOpArbitraryFloatCastToIntINTEL = 5843,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCbrtINTEL	spirv.h	/^    SpvOpArbitraryFloatCbrtINTEL = 5857,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCosINTEL	spirv.h	/^    SpvOpArbitraryFloatCosINTEL = 5869,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatCosPiINTEL	spirv.h	/^    SpvOpArbitraryFloatCosPiINTEL = 5872,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatDivINTEL	spirv.h	/^    SpvOpArbitraryFloatDivINTEL = 5849,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatEQINTEL	spirv.h	/^    SpvOpArbitraryFloatEQINTEL = 5854,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatExp10INTEL	spirv.h	/^    SpvOpArbitraryFloatExp10INTEL = 5866,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatExp2INTEL	spirv.h	/^    SpvOpArbitraryFloatExp2INTEL = 5865,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatExpINTEL	spirv.h	/^    SpvOpArbitraryFloatExpINTEL = 5864,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatExpm1INTEL	spirv.h	/^    SpvOpArbitraryFloatExpm1INTEL = 5867,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatGEINTEL	spirv.h	/^    SpvOpArbitraryFloatGEINTEL = 5851,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatGTINTEL	spirv.h	/^    SpvOpArbitraryFloatGTINTEL = 5850,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatHypotINTEL	spirv.h	/^    SpvOpArbitraryFloatHypotINTEL = 5858,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLEINTEL	spirv.h	/^    SpvOpArbitraryFloatLEINTEL = 5853,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLTINTEL	spirv.h	/^    SpvOpArbitraryFloatLTINTEL = 5852,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLog10INTEL	spirv.h	/^    SpvOpArbitraryFloatLog10INTEL = 5862,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLog1pINTEL	spirv.h	/^    SpvOpArbitraryFloatLog1pINTEL = 5863,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLog2INTEL	spirv.h	/^    SpvOpArbitraryFloatLog2INTEL = 5861,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatLogINTEL	spirv.h	/^    SpvOpArbitraryFloatLogINTEL = 5860,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatMulINTEL	spirv.h	/^    SpvOpArbitraryFloatMulINTEL = 5848,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatPowINTEL	spirv.h	/^    SpvOpArbitraryFloatPowINTEL = 5880,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatPowNINTEL	spirv.h	/^    SpvOpArbitraryFloatPowNINTEL = 5882,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatPowRINTEL	spirv.h	/^    SpvOpArbitraryFloatPowRINTEL = 5881,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatRSqrtINTEL	spirv.h	/^    SpvOpArbitraryFloatRSqrtINTEL = 5856,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatRecipINTEL	spirv.h	/^    SpvOpArbitraryFloatRecipINTEL = 5855,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSinCosINTEL	spirv.h	/^    SpvOpArbitraryFloatSinCosINTEL = 5870,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSinCosPiINTEL	spirv.h	/^    SpvOpArbitraryFloatSinCosPiINTEL = 5840,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSinINTEL	spirv.h	/^    SpvOpArbitraryFloatSinINTEL = 5868,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSinPiINTEL	spirv.h	/^    SpvOpArbitraryFloatSinPiINTEL = 5871,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSqrtINTEL	spirv.h	/^    SpvOpArbitraryFloatSqrtINTEL = 5859,$/;"	e	enum:SpvOp_
SpvOpArbitraryFloatSubINTEL	spirv.h	/^    SpvOpArbitraryFloatSubINTEL = 5847,$/;"	e	enum:SpvOp_
SpvOpArrayLength	spirv.h	/^    SpvOpArrayLength = 68,$/;"	e	enum:SpvOp_
SpvOpAsmCallINTEL	spirv.h	/^    SpvOpAsmCallINTEL = 5611,$/;"	e	enum:SpvOp_
SpvOpAsmINTEL	spirv.h	/^    SpvOpAsmINTEL = 5610,$/;"	e	enum:SpvOp_
SpvOpAsmTargetINTEL	spirv.h	/^    SpvOpAsmTargetINTEL = 5609,$/;"	e	enum:SpvOp_
SpvOpAssumeTrueKHR	spirv.h	/^    SpvOpAssumeTrueKHR = 5630,$/;"	e	enum:SpvOp_
SpvOpAtomicAnd	spirv.h	/^    SpvOpAtomicAnd = 240,$/;"	e	enum:SpvOp_
SpvOpAtomicCompareExchange	spirv.h	/^    SpvOpAtomicCompareExchange = 230,$/;"	e	enum:SpvOp_
SpvOpAtomicCompareExchangeWeak	spirv.h	/^    SpvOpAtomicCompareExchangeWeak = 231,$/;"	e	enum:SpvOp_
SpvOpAtomicExchange	spirv.h	/^    SpvOpAtomicExchange = 229,$/;"	e	enum:SpvOp_
SpvOpAtomicFAddEXT	spirv.h	/^    SpvOpAtomicFAddEXT = 6035,$/;"	e	enum:SpvOp_
SpvOpAtomicFMaxEXT	spirv.h	/^    SpvOpAtomicFMaxEXT = 5615,$/;"	e	enum:SpvOp_
SpvOpAtomicFMinEXT	spirv.h	/^    SpvOpAtomicFMinEXT = 5614,$/;"	e	enum:SpvOp_
SpvOpAtomicFlagClear	spirv.h	/^    SpvOpAtomicFlagClear = 319,$/;"	e	enum:SpvOp_
SpvOpAtomicFlagTestAndSet	spirv.h	/^    SpvOpAtomicFlagTestAndSet = 318,$/;"	e	enum:SpvOp_
SpvOpAtomicIAdd	spirv.h	/^    SpvOpAtomicIAdd = 234,$/;"	e	enum:SpvOp_
SpvOpAtomicIDecrement	spirv.h	/^    SpvOpAtomicIDecrement = 233,$/;"	e	enum:SpvOp_
SpvOpAtomicIIncrement	spirv.h	/^    SpvOpAtomicIIncrement = 232,$/;"	e	enum:SpvOp_
SpvOpAtomicISub	spirv.h	/^    SpvOpAtomicISub = 235,$/;"	e	enum:SpvOp_
SpvOpAtomicLoad	spirv.h	/^    SpvOpAtomicLoad = 227,$/;"	e	enum:SpvOp_
SpvOpAtomicOr	spirv.h	/^    SpvOpAtomicOr = 241,$/;"	e	enum:SpvOp_
SpvOpAtomicSMax	spirv.h	/^    SpvOpAtomicSMax = 238,$/;"	e	enum:SpvOp_
SpvOpAtomicSMin	spirv.h	/^    SpvOpAtomicSMin = 236,$/;"	e	enum:SpvOp_
SpvOpAtomicStore	spirv.h	/^    SpvOpAtomicStore = 228,$/;"	e	enum:SpvOp_
SpvOpAtomicUMax	spirv.h	/^    SpvOpAtomicUMax = 239,$/;"	e	enum:SpvOp_
SpvOpAtomicUMin	spirv.h	/^    SpvOpAtomicUMin = 237,$/;"	e	enum:SpvOp_
SpvOpAtomicXor	spirv.h	/^    SpvOpAtomicXor = 242,$/;"	e	enum:SpvOp_
SpvOpBeginInvocationInterlockEXT	spirv.h	/^    SpvOpBeginInvocationInterlockEXT = 5364,$/;"	e	enum:SpvOp_
SpvOpBitCount	spirv.h	/^    SpvOpBitCount = 205,$/;"	e	enum:SpvOp_
SpvOpBitFieldInsert	spirv.h	/^    SpvOpBitFieldInsert = 201,$/;"	e	enum:SpvOp_
SpvOpBitFieldSExtract	spirv.h	/^    SpvOpBitFieldSExtract = 202,$/;"	e	enum:SpvOp_
SpvOpBitFieldUExtract	spirv.h	/^    SpvOpBitFieldUExtract = 203,$/;"	e	enum:SpvOp_
SpvOpBitReverse	spirv.h	/^    SpvOpBitReverse = 204,$/;"	e	enum:SpvOp_
SpvOpBitcast	spirv.h	/^    SpvOpBitcast = 124,$/;"	e	enum:SpvOp_
SpvOpBitwiseAnd	spirv.h	/^    SpvOpBitwiseAnd = 199,$/;"	e	enum:SpvOp_
SpvOpBitwiseOr	spirv.h	/^    SpvOpBitwiseOr = 197,$/;"	e	enum:SpvOp_
SpvOpBitwiseXor	spirv.h	/^    SpvOpBitwiseXor = 198,$/;"	e	enum:SpvOp_
SpvOpBranch	spirv.h	/^    SpvOpBranch = 249,$/;"	e	enum:SpvOp_
SpvOpBranchConditional	spirv.h	/^    SpvOpBranchConditional = 250,$/;"	e	enum:SpvOp_
SpvOpBuildNDRange	spirv.h	/^    SpvOpBuildNDRange = 304,$/;"	e	enum:SpvOp_
SpvOpCapability	spirv.h	/^    SpvOpCapability = 17,$/;"	e	enum:SpvOp_
SpvOpCaptureEventProfilingInfo	spirv.h	/^    SpvOpCaptureEventProfilingInfo = 302,$/;"	e	enum:SpvOp_
SpvOpCodeMask	spirv.h	/^static const unsigned int SpvOpCodeMask = 0xffff;$/;"	v
SpvOpCommitReadPipe	spirv.h	/^    SpvOpCommitReadPipe = 280,$/;"	e	enum:SpvOp_
SpvOpCommitWritePipe	spirv.h	/^    SpvOpCommitWritePipe = 281,$/;"	e	enum:SpvOp_
SpvOpCompositeConstruct	spirv.h	/^    SpvOpCompositeConstruct = 80,$/;"	e	enum:SpvOp_
SpvOpCompositeExtract	spirv.h	/^    SpvOpCompositeExtract = 81,$/;"	e	enum:SpvOp_
SpvOpCompositeInsert	spirv.h	/^    SpvOpCompositeInsert = 82,$/;"	e	enum:SpvOp_
SpvOpConstant	spirv.h	/^    SpvOpConstant = 43,$/;"	e	enum:SpvOp_
SpvOpConstantComposite	spirv.h	/^    SpvOpConstantComposite = 44,$/;"	e	enum:SpvOp_
SpvOpConstantCompositeContinuedINTEL	spirv.h	/^    SpvOpConstantCompositeContinuedINTEL = 6091,$/;"	e	enum:SpvOp_
SpvOpConstantFalse	spirv.h	/^    SpvOpConstantFalse = 42,$/;"	e	enum:SpvOp_
SpvOpConstantFunctionPointerINTEL	spirv.h	/^    SpvOpConstantFunctionPointerINTEL = 5600,$/;"	e	enum:SpvOp_
SpvOpConstantNull	spirv.h	/^    SpvOpConstantNull = 46,$/;"	e	enum:SpvOp_
SpvOpConstantPipeStorage	spirv.h	/^    SpvOpConstantPipeStorage = 323,$/;"	e	enum:SpvOp_
SpvOpConstantSampler	spirv.h	/^    SpvOpConstantSampler = 45,$/;"	e	enum:SpvOp_
SpvOpConstantTrue	spirv.h	/^    SpvOpConstantTrue = 41,$/;"	e	enum:SpvOp_
SpvOpControlBarrier	spirv.h	/^    SpvOpControlBarrier = 224,$/;"	e	enum:SpvOp_
SpvOpConvertFToS	spirv.h	/^    SpvOpConvertFToS = 110,$/;"	e	enum:SpvOp_
SpvOpConvertFToU	spirv.h	/^    SpvOpConvertFToU = 109,$/;"	e	enum:SpvOp_
SpvOpConvertImageToUNV	spirv.h	/^    SpvOpConvertImageToUNV = 5393,$/;"	e	enum:SpvOp_
SpvOpConvertPtrToU	spirv.h	/^    SpvOpConvertPtrToU = 117,$/;"	e	enum:SpvOp_
SpvOpConvertSToF	spirv.h	/^    SpvOpConvertSToF = 111,$/;"	e	enum:SpvOp_
SpvOpConvertSampledImageToUNV	spirv.h	/^    SpvOpConvertSampledImageToUNV = 5396,$/;"	e	enum:SpvOp_
SpvOpConvertSamplerToUNV	spirv.h	/^    SpvOpConvertSamplerToUNV = 5394,$/;"	e	enum:SpvOp_
SpvOpConvertUToAccelerationStructureKHR	spirv.h	/^    SpvOpConvertUToAccelerationStructureKHR = 4447,$/;"	e	enum:SpvOp_
SpvOpConvertUToF	spirv.h	/^    SpvOpConvertUToF = 112,$/;"	e	enum:SpvOp_
SpvOpConvertUToImageNV	spirv.h	/^    SpvOpConvertUToImageNV = 5391,$/;"	e	enum:SpvOp_
SpvOpConvertUToPtr	spirv.h	/^    SpvOpConvertUToPtr = 120,$/;"	e	enum:SpvOp_
SpvOpConvertUToSampledImageNV	spirv.h	/^    SpvOpConvertUToSampledImageNV = 5395,$/;"	e	enum:SpvOp_
SpvOpConvertUToSamplerNV	spirv.h	/^    SpvOpConvertUToSamplerNV = 5392,$/;"	e	enum:SpvOp_
SpvOpCooperativeMatrixLengthNV	spirv.h	/^    SpvOpCooperativeMatrixLengthNV = 5362,$/;"	e	enum:SpvOp_
SpvOpCooperativeMatrixLoadNV	spirv.h	/^    SpvOpCooperativeMatrixLoadNV = 5359,$/;"	e	enum:SpvOp_
SpvOpCooperativeMatrixMulAddNV	spirv.h	/^    SpvOpCooperativeMatrixMulAddNV = 5361,$/;"	e	enum:SpvOp_
SpvOpCooperativeMatrixStoreNV	spirv.h	/^    SpvOpCooperativeMatrixStoreNV = 5360,$/;"	e	enum:SpvOp_
SpvOpCopyLogical	spirv.h	/^    SpvOpCopyLogical = 400,$/;"	e	enum:SpvOp_
SpvOpCopyMemory	spirv.h	/^    SpvOpCopyMemory = 63,$/;"	e	enum:SpvOp_
SpvOpCopyMemorySized	spirv.h	/^    SpvOpCopyMemorySized = 64,$/;"	e	enum:SpvOp_
SpvOpCopyObject	spirv.h	/^    SpvOpCopyObject = 83,$/;"	e	enum:SpvOp_
SpvOpCreatePipeFromPipeStorage	spirv.h	/^    SpvOpCreatePipeFromPipeStorage = 324,$/;"	e	enum:SpvOp_
SpvOpCreateUserEvent	spirv.h	/^    SpvOpCreateUserEvent = 299,$/;"	e	enum:SpvOp_
SpvOpCrossWorkgroupCastToPtrINTEL	spirv.h	/^    SpvOpCrossWorkgroupCastToPtrINTEL = 5938,$/;"	e	enum:SpvOp_
SpvOpDPdx	spirv.h	/^    SpvOpDPdx = 207,$/;"	e	enum:SpvOp_
SpvOpDPdxCoarse	spirv.h	/^    SpvOpDPdxCoarse = 213,$/;"	e	enum:SpvOp_
SpvOpDPdxFine	spirv.h	/^    SpvOpDPdxFine = 210,$/;"	e	enum:SpvOp_
SpvOpDPdy	spirv.h	/^    SpvOpDPdy = 208,$/;"	e	enum:SpvOp_
SpvOpDPdyCoarse	spirv.h	/^    SpvOpDPdyCoarse = 214,$/;"	e	enum:SpvOp_
SpvOpDPdyFine	spirv.h	/^    SpvOpDPdyFine = 211,$/;"	e	enum:SpvOp_
SpvOpDecorate	spirv.h	/^    SpvOpDecorate = 71,$/;"	e	enum:SpvOp_
SpvOpDecorateId	spirv.h	/^    SpvOpDecorateId = 332,$/;"	e	enum:SpvOp_
SpvOpDecorateString	spirv.h	/^    SpvOpDecorateString = 5632,$/;"	e	enum:SpvOp_
SpvOpDecorateStringGOOGLE	spirv.h	/^    SpvOpDecorateStringGOOGLE = 5632,$/;"	e	enum:SpvOp_
SpvOpDecorationGroup	spirv.h	/^    SpvOpDecorationGroup = 73,$/;"	e	enum:SpvOp_
SpvOpDemoteToHelperInvocation	spirv.h	/^    SpvOpDemoteToHelperInvocation = 5380,$/;"	e	enum:SpvOp_
SpvOpDemoteToHelperInvocationEXT	spirv.h	/^    SpvOpDemoteToHelperInvocationEXT = 5380,$/;"	e	enum:SpvOp_
SpvOpDot	spirv.h	/^    SpvOpDot = 148,$/;"	e	enum:SpvOp_
SpvOpEmitStreamVertex	spirv.h	/^    SpvOpEmitStreamVertex = 220,$/;"	e	enum:SpvOp_
SpvOpEmitVertex	spirv.h	/^    SpvOpEmitVertex = 218,$/;"	e	enum:SpvOp_
SpvOpEndInvocationInterlockEXT	spirv.h	/^    SpvOpEndInvocationInterlockEXT = 5365,$/;"	e	enum:SpvOp_
SpvOpEndPrimitive	spirv.h	/^    SpvOpEndPrimitive = 219,$/;"	e	enum:SpvOp_
SpvOpEndStreamPrimitive	spirv.h	/^    SpvOpEndStreamPrimitive = 221,$/;"	e	enum:SpvOp_
SpvOpEnqueueKernel	spirv.h	/^    SpvOpEnqueueKernel = 292,$/;"	e	enum:SpvOp_
SpvOpEnqueueMarker	spirv.h	/^    SpvOpEnqueueMarker = 291,$/;"	e	enum:SpvOp_
SpvOpEntryPoint	spirv.h	/^    SpvOpEntryPoint = 15,$/;"	e	enum:SpvOp_
SpvOpExecuteCallableKHR	spirv.h	/^    SpvOpExecuteCallableKHR = 4446,$/;"	e	enum:SpvOp_
SpvOpExecuteCallableNV	spirv.h	/^    SpvOpExecuteCallableNV = 5344,$/;"	e	enum:SpvOp_
SpvOpExecutionMode	spirv.h	/^    SpvOpExecutionMode = 16,$/;"	e	enum:SpvOp_
SpvOpExecutionModeId	spirv.h	/^    SpvOpExecutionModeId = 331,$/;"	e	enum:SpvOp_
SpvOpExpectKHR	spirv.h	/^    SpvOpExpectKHR = 5631,$/;"	e	enum:SpvOp_
SpvOpExtInst	spirv.h	/^    SpvOpExtInst = 12,$/;"	e	enum:SpvOp_
SpvOpExtInstImport	spirv.h	/^    SpvOpExtInstImport = 11,$/;"	e	enum:SpvOp_
SpvOpExtension	spirv.h	/^    SpvOpExtension = 10,$/;"	e	enum:SpvOp_
SpvOpFAdd	spirv.h	/^    SpvOpFAdd = 129,$/;"	e	enum:SpvOp_
SpvOpFConvert	spirv.h	/^    SpvOpFConvert = 115,$/;"	e	enum:SpvOp_
SpvOpFDiv	spirv.h	/^    SpvOpFDiv = 136,$/;"	e	enum:SpvOp_
SpvOpFMod	spirv.h	/^    SpvOpFMod = 141,$/;"	e	enum:SpvOp_
SpvOpFMul	spirv.h	/^    SpvOpFMul = 133,$/;"	e	enum:SpvOp_
SpvOpFNegate	spirv.h	/^    SpvOpFNegate = 127,$/;"	e	enum:SpvOp_
SpvOpFOrdEqual	spirv.h	/^    SpvOpFOrdEqual = 180,$/;"	e	enum:SpvOp_
SpvOpFOrdGreaterThan	spirv.h	/^    SpvOpFOrdGreaterThan = 186,$/;"	e	enum:SpvOp_
SpvOpFOrdGreaterThanEqual	spirv.h	/^    SpvOpFOrdGreaterThanEqual = 190,$/;"	e	enum:SpvOp_
SpvOpFOrdLessThan	spirv.h	/^    SpvOpFOrdLessThan = 184,$/;"	e	enum:SpvOp_
SpvOpFOrdLessThanEqual	spirv.h	/^    SpvOpFOrdLessThanEqual = 188,$/;"	e	enum:SpvOp_
SpvOpFOrdNotEqual	spirv.h	/^    SpvOpFOrdNotEqual = 182,$/;"	e	enum:SpvOp_
SpvOpFPGARegINTEL	spirv.h	/^    SpvOpFPGARegINTEL = 5949,$/;"	e	enum:SpvOp_
SpvOpFRem	spirv.h	/^    SpvOpFRem = 140,$/;"	e	enum:SpvOp_
SpvOpFSub	spirv.h	/^    SpvOpFSub = 131,$/;"	e	enum:SpvOp_
SpvOpFUnordEqual	spirv.h	/^    SpvOpFUnordEqual = 181,$/;"	e	enum:SpvOp_
SpvOpFUnordGreaterThan	spirv.h	/^    SpvOpFUnordGreaterThan = 187,$/;"	e	enum:SpvOp_
SpvOpFUnordGreaterThanEqual	spirv.h	/^    SpvOpFUnordGreaterThanEqual = 191,$/;"	e	enum:SpvOp_
SpvOpFUnordLessThan	spirv.h	/^    SpvOpFUnordLessThan = 185,$/;"	e	enum:SpvOp_
SpvOpFUnordLessThanEqual	spirv.h	/^    SpvOpFUnordLessThanEqual = 189,$/;"	e	enum:SpvOp_
SpvOpFUnordNotEqual	spirv.h	/^    SpvOpFUnordNotEqual = 183,$/;"	e	enum:SpvOp_
SpvOpFixedCosINTEL	spirv.h	/^    SpvOpFixedCosINTEL = 5927,$/;"	e	enum:SpvOp_
SpvOpFixedCosPiINTEL	spirv.h	/^    SpvOpFixedCosPiINTEL = 5930,$/;"	e	enum:SpvOp_
SpvOpFixedExpINTEL	spirv.h	/^    SpvOpFixedExpINTEL = 5933,$/;"	e	enum:SpvOp_
SpvOpFixedLogINTEL	spirv.h	/^    SpvOpFixedLogINTEL = 5932,$/;"	e	enum:SpvOp_
SpvOpFixedRecipINTEL	spirv.h	/^    SpvOpFixedRecipINTEL = 5924,$/;"	e	enum:SpvOp_
SpvOpFixedRsqrtINTEL	spirv.h	/^    SpvOpFixedRsqrtINTEL = 5925,$/;"	e	enum:SpvOp_
SpvOpFixedSinCosINTEL	spirv.h	/^    SpvOpFixedSinCosINTEL = 5928,$/;"	e	enum:SpvOp_
SpvOpFixedSinCosPiINTEL	spirv.h	/^    SpvOpFixedSinCosPiINTEL = 5931,$/;"	e	enum:SpvOp_
SpvOpFixedSinINTEL	spirv.h	/^    SpvOpFixedSinINTEL = 5926,$/;"	e	enum:SpvOp_
SpvOpFixedSinPiINTEL	spirv.h	/^    SpvOpFixedSinPiINTEL = 5929,$/;"	e	enum:SpvOp_
SpvOpFixedSqrtINTEL	spirv.h	/^    SpvOpFixedSqrtINTEL = 5923,$/;"	e	enum:SpvOp_
SpvOpFragmentFetchAMD	spirv.h	/^    SpvOpFragmentFetchAMD = 5012,$/;"	e	enum:SpvOp_
SpvOpFragmentMaskFetchAMD	spirv.h	/^    SpvOpFragmentMaskFetchAMD = 5011,$/;"	e	enum:SpvOp_
SpvOpFunction	spirv.h	/^    SpvOpFunction = 54,$/;"	e	enum:SpvOp_
SpvOpFunctionCall	spirv.h	/^    SpvOpFunctionCall = 57,$/;"	e	enum:SpvOp_
SpvOpFunctionEnd	spirv.h	/^    SpvOpFunctionEnd = 56,$/;"	e	enum:SpvOp_
SpvOpFunctionParameter	spirv.h	/^    SpvOpFunctionParameter = 55,$/;"	e	enum:SpvOp_
SpvOpFunctionPointerCallINTEL	spirv.h	/^    SpvOpFunctionPointerCallINTEL = 5601,$/;"	e	enum:SpvOp_
SpvOpFwidth	spirv.h	/^    SpvOpFwidth = 209,$/;"	e	enum:SpvOp_
SpvOpFwidthCoarse	spirv.h	/^    SpvOpFwidthCoarse = 215,$/;"	e	enum:SpvOp_
SpvOpFwidthFine	spirv.h	/^    SpvOpFwidthFine = 212,$/;"	e	enum:SpvOp_
SpvOpGenericCastToPtr	spirv.h	/^    SpvOpGenericCastToPtr = 122,$/;"	e	enum:SpvOp_
SpvOpGenericCastToPtrExplicit	spirv.h	/^    SpvOpGenericCastToPtrExplicit = 123,$/;"	e	enum:SpvOp_
SpvOpGenericPtrMemSemantics	spirv.h	/^    SpvOpGenericPtrMemSemantics = 69,$/;"	e	enum:SpvOp_
SpvOpGetDefaultQueue	spirv.h	/^    SpvOpGetDefaultQueue = 303,$/;"	e	enum:SpvOp_
SpvOpGetKernelLocalSizeForSubgroupCount	spirv.h	/^    SpvOpGetKernelLocalSizeForSubgroupCount = 325,$/;"	e	enum:SpvOp_
SpvOpGetKernelMaxNumSubgroups	spirv.h	/^    SpvOpGetKernelMaxNumSubgroups = 326,$/;"	e	enum:SpvOp_
SpvOpGetKernelNDrangeMaxSubGroupSize	spirv.h	/^    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,$/;"	e	enum:SpvOp_
SpvOpGetKernelNDrangeSubGroupCount	spirv.h	/^    SpvOpGetKernelNDrangeSubGroupCount = 293,$/;"	e	enum:SpvOp_
SpvOpGetKernelPreferredWorkGroupSizeMultiple	spirv.h	/^    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,$/;"	e	enum:SpvOp_
SpvOpGetKernelWorkGroupSize	spirv.h	/^    SpvOpGetKernelWorkGroupSize = 295,$/;"	e	enum:SpvOp_
SpvOpGetMaxPipePackets	spirv.h	/^    SpvOpGetMaxPipePackets = 284,$/;"	e	enum:SpvOp_
SpvOpGetNumPipePackets	spirv.h	/^    SpvOpGetNumPipePackets = 283,$/;"	e	enum:SpvOp_
SpvOpGroupAll	spirv.h	/^    SpvOpGroupAll = 261,$/;"	e	enum:SpvOp_
SpvOpGroupAny	spirv.h	/^    SpvOpGroupAny = 262,$/;"	e	enum:SpvOp_
SpvOpGroupAsyncCopy	spirv.h	/^    SpvOpGroupAsyncCopy = 259,$/;"	e	enum:SpvOp_
SpvOpGroupBroadcast	spirv.h	/^    SpvOpGroupBroadcast = 263,$/;"	e	enum:SpvOp_
SpvOpGroupCommitReadPipe	spirv.h	/^    SpvOpGroupCommitReadPipe = 287,$/;"	e	enum:SpvOp_
SpvOpGroupCommitWritePipe	spirv.h	/^    SpvOpGroupCommitWritePipe = 288,$/;"	e	enum:SpvOp_
SpvOpGroupDecorate	spirv.h	/^    SpvOpGroupDecorate = 74,$/;"	e	enum:SpvOp_
SpvOpGroupFAdd	spirv.h	/^    SpvOpGroupFAdd = 265,$/;"	e	enum:SpvOp_
SpvOpGroupFAddNonUniformAMD	spirv.h	/^    SpvOpGroupFAddNonUniformAMD = 5001,$/;"	e	enum:SpvOp_
SpvOpGroupFMax	spirv.h	/^    SpvOpGroupFMax = 269,$/;"	e	enum:SpvOp_
SpvOpGroupFMaxNonUniformAMD	spirv.h	/^    SpvOpGroupFMaxNonUniformAMD = 5005,$/;"	e	enum:SpvOp_
SpvOpGroupFMin	spirv.h	/^    SpvOpGroupFMin = 266,$/;"	e	enum:SpvOp_
SpvOpGroupFMinNonUniformAMD	spirv.h	/^    SpvOpGroupFMinNonUniformAMD = 5002,$/;"	e	enum:SpvOp_
SpvOpGroupIAdd	spirv.h	/^    SpvOpGroupIAdd = 264,$/;"	e	enum:SpvOp_
SpvOpGroupIAddNonUniformAMD	spirv.h	/^    SpvOpGroupIAddNonUniformAMD = 5000,$/;"	e	enum:SpvOp_
SpvOpGroupMemberDecorate	spirv.h	/^    SpvOpGroupMemberDecorate = 75,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformAll	spirv.h	/^    SpvOpGroupNonUniformAll = 334,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformAllEqual	spirv.h	/^    SpvOpGroupNonUniformAllEqual = 336,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformAny	spirv.h	/^    SpvOpGroupNonUniformAny = 335,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBallot	spirv.h	/^    SpvOpGroupNonUniformBallot = 339,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBallotBitCount	spirv.h	/^    SpvOpGroupNonUniformBallotBitCount = 342,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBallotBitExtract	spirv.h	/^    SpvOpGroupNonUniformBallotBitExtract = 341,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBallotFindLSB	spirv.h	/^    SpvOpGroupNonUniformBallotFindLSB = 343,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBallotFindMSB	spirv.h	/^    SpvOpGroupNonUniformBallotFindMSB = 344,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBitwiseAnd	spirv.h	/^    SpvOpGroupNonUniformBitwiseAnd = 359,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBitwiseOr	spirv.h	/^    SpvOpGroupNonUniformBitwiseOr = 360,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBitwiseXor	spirv.h	/^    SpvOpGroupNonUniformBitwiseXor = 361,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBroadcast	spirv.h	/^    SpvOpGroupNonUniformBroadcast = 337,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformBroadcastFirst	spirv.h	/^    SpvOpGroupNonUniformBroadcastFirst = 338,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformElect	spirv.h	/^    SpvOpGroupNonUniformElect = 333,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformFAdd	spirv.h	/^    SpvOpGroupNonUniformFAdd = 350,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformFMax	spirv.h	/^    SpvOpGroupNonUniformFMax = 358,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformFMin	spirv.h	/^    SpvOpGroupNonUniformFMin = 355,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformFMul	spirv.h	/^    SpvOpGroupNonUniformFMul = 352,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformIAdd	spirv.h	/^    SpvOpGroupNonUniformIAdd = 349,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformIMul	spirv.h	/^    SpvOpGroupNonUniformIMul = 351,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformInverseBallot	spirv.h	/^    SpvOpGroupNonUniformInverseBallot = 340,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformLogicalAnd	spirv.h	/^    SpvOpGroupNonUniformLogicalAnd = 362,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformLogicalOr	spirv.h	/^    SpvOpGroupNonUniformLogicalOr = 363,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformLogicalXor	spirv.h	/^    SpvOpGroupNonUniformLogicalXor = 364,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformPartitionNV	spirv.h	/^    SpvOpGroupNonUniformPartitionNV = 5296,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformQuadBroadcast	spirv.h	/^    SpvOpGroupNonUniformQuadBroadcast = 365,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformQuadSwap	spirv.h	/^    SpvOpGroupNonUniformQuadSwap = 366,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformSMax	spirv.h	/^    SpvOpGroupNonUniformSMax = 356,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformSMin	spirv.h	/^    SpvOpGroupNonUniformSMin = 353,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformShuffle	spirv.h	/^    SpvOpGroupNonUniformShuffle = 345,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformShuffleDown	spirv.h	/^    SpvOpGroupNonUniformShuffleDown = 348,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformShuffleUp	spirv.h	/^    SpvOpGroupNonUniformShuffleUp = 347,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformShuffleXor	spirv.h	/^    SpvOpGroupNonUniformShuffleXor = 346,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformUMax	spirv.h	/^    SpvOpGroupNonUniformUMax = 357,$/;"	e	enum:SpvOp_
SpvOpGroupNonUniformUMin	spirv.h	/^    SpvOpGroupNonUniformUMin = 354,$/;"	e	enum:SpvOp_
SpvOpGroupReserveReadPipePackets	spirv.h	/^    SpvOpGroupReserveReadPipePackets = 285,$/;"	e	enum:SpvOp_
SpvOpGroupReserveWritePipePackets	spirv.h	/^    SpvOpGroupReserveWritePipePackets = 286,$/;"	e	enum:SpvOp_
SpvOpGroupSMax	spirv.h	/^    SpvOpGroupSMax = 271,$/;"	e	enum:SpvOp_
SpvOpGroupSMaxNonUniformAMD	spirv.h	/^    SpvOpGroupSMaxNonUniformAMD = 5007,$/;"	e	enum:SpvOp_
SpvOpGroupSMin	spirv.h	/^    SpvOpGroupSMin = 268,$/;"	e	enum:SpvOp_
SpvOpGroupSMinNonUniformAMD	spirv.h	/^    SpvOpGroupSMinNonUniformAMD = 5004,$/;"	e	enum:SpvOp_
SpvOpGroupUMax	spirv.h	/^    SpvOpGroupUMax = 270,$/;"	e	enum:SpvOp_
SpvOpGroupUMaxNonUniformAMD	spirv.h	/^    SpvOpGroupUMaxNonUniformAMD = 5006,$/;"	e	enum:SpvOp_
SpvOpGroupUMin	spirv.h	/^    SpvOpGroupUMin = 267,$/;"	e	enum:SpvOp_
SpvOpGroupUMinNonUniformAMD	spirv.h	/^    SpvOpGroupUMinNonUniformAMD = 5003,$/;"	e	enum:SpvOp_
SpvOpGroupWaitEvents	spirv.h	/^    SpvOpGroupWaitEvents = 260,$/;"	e	enum:SpvOp_
SpvOpIAdd	spirv.h	/^    SpvOpIAdd = 128,$/;"	e	enum:SpvOp_
SpvOpIAddCarry	spirv.h	/^    SpvOpIAddCarry = 149,$/;"	e	enum:SpvOp_
SpvOpIAddSatINTEL	spirv.h	/^    SpvOpIAddSatINTEL = 5589,$/;"	e	enum:SpvOp_
SpvOpIAverageINTEL	spirv.h	/^    SpvOpIAverageINTEL = 5591,$/;"	e	enum:SpvOp_
SpvOpIAverageRoundedINTEL	spirv.h	/^    SpvOpIAverageRoundedINTEL = 5593,$/;"	e	enum:SpvOp_
SpvOpIEqual	spirv.h	/^    SpvOpIEqual = 170,$/;"	e	enum:SpvOp_
SpvOpIMul	spirv.h	/^    SpvOpIMul = 132,$/;"	e	enum:SpvOp_
SpvOpIMul32x16INTEL	spirv.h	/^    SpvOpIMul32x16INTEL = 5597,$/;"	e	enum:SpvOp_
SpvOpINotEqual	spirv.h	/^    SpvOpINotEqual = 171,$/;"	e	enum:SpvOp_
SpvOpISub	spirv.h	/^    SpvOpISub = 130,$/;"	e	enum:SpvOp_
SpvOpISubBorrow	spirv.h	/^    SpvOpISubBorrow = 150,$/;"	e	enum:SpvOp_
SpvOpISubSatINTEL	spirv.h	/^    SpvOpISubSatINTEL = 5595,$/;"	e	enum:SpvOp_
SpvOpIgnoreIntersectionKHR	spirv.h	/^    SpvOpIgnoreIntersectionKHR = 4448,$/;"	e	enum:SpvOp_
SpvOpIgnoreIntersectionNV	spirv.h	/^    SpvOpIgnoreIntersectionNV = 5335,$/;"	e	enum:SpvOp_
SpvOpImage	spirv.h	/^    SpvOpImage = 100,$/;"	e	enum:SpvOp_
SpvOpImageDrefGather	spirv.h	/^    SpvOpImageDrefGather = 97,$/;"	e	enum:SpvOp_
SpvOpImageFetch	spirv.h	/^    SpvOpImageFetch = 95,$/;"	e	enum:SpvOp_
SpvOpImageGather	spirv.h	/^    SpvOpImageGather = 96,$/;"	e	enum:SpvOp_
SpvOpImageQueryFormat	spirv.h	/^    SpvOpImageQueryFormat = 101,$/;"	e	enum:SpvOp_
SpvOpImageQueryLevels	spirv.h	/^    SpvOpImageQueryLevels = 106,$/;"	e	enum:SpvOp_
SpvOpImageQueryLod	spirv.h	/^    SpvOpImageQueryLod = 105,$/;"	e	enum:SpvOp_
SpvOpImageQueryOrder	spirv.h	/^    SpvOpImageQueryOrder = 102,$/;"	e	enum:SpvOp_
SpvOpImageQuerySamples	spirv.h	/^    SpvOpImageQuerySamples = 107,$/;"	e	enum:SpvOp_
SpvOpImageQuerySize	spirv.h	/^    SpvOpImageQuerySize = 104,$/;"	e	enum:SpvOp_
SpvOpImageQuerySizeLod	spirv.h	/^    SpvOpImageQuerySizeLod = 103,$/;"	e	enum:SpvOp_
SpvOpImageRead	spirv.h	/^    SpvOpImageRead = 98,$/;"	e	enum:SpvOp_
SpvOpImageSampleDrefExplicitLod	spirv.h	/^    SpvOpImageSampleDrefExplicitLod = 90,$/;"	e	enum:SpvOp_
SpvOpImageSampleDrefImplicitLod	spirv.h	/^    SpvOpImageSampleDrefImplicitLod = 89,$/;"	e	enum:SpvOp_
SpvOpImageSampleExplicitLod	spirv.h	/^    SpvOpImageSampleExplicitLod = 88,$/;"	e	enum:SpvOp_
SpvOpImageSampleFootprintNV	spirv.h	/^    SpvOpImageSampleFootprintNV = 5283,$/;"	e	enum:SpvOp_
SpvOpImageSampleImplicitLod	spirv.h	/^    SpvOpImageSampleImplicitLod = 87,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjDrefExplicitLod	spirv.h	/^    SpvOpImageSampleProjDrefExplicitLod = 94,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjDrefImplicitLod	spirv.h	/^    SpvOpImageSampleProjDrefImplicitLod = 93,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjExplicitLod	spirv.h	/^    SpvOpImageSampleProjExplicitLod = 92,$/;"	e	enum:SpvOp_
SpvOpImageSampleProjImplicitLod	spirv.h	/^    SpvOpImageSampleProjImplicitLod = 91,$/;"	e	enum:SpvOp_
SpvOpImageSparseDrefGather	spirv.h	/^    SpvOpImageSparseDrefGather = 315,$/;"	e	enum:SpvOp_
SpvOpImageSparseFetch	spirv.h	/^    SpvOpImageSparseFetch = 313,$/;"	e	enum:SpvOp_
SpvOpImageSparseGather	spirv.h	/^    SpvOpImageSparseGather = 314,$/;"	e	enum:SpvOp_
SpvOpImageSparseRead	spirv.h	/^    SpvOpImageSparseRead = 320,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleDrefExplicitLod	spirv.h	/^    SpvOpImageSparseSampleDrefExplicitLod = 308,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleDrefImplicitLod	spirv.h	/^    SpvOpImageSparseSampleDrefImplicitLod = 307,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleExplicitLod	spirv.h	/^    SpvOpImageSparseSampleExplicitLod = 306,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleImplicitLod	spirv.h	/^    SpvOpImageSparseSampleImplicitLod = 305,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjDrefExplicitLod	spirv.h	/^    SpvOpImageSparseSampleProjDrefExplicitLod = 312,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjDrefImplicitLod	spirv.h	/^    SpvOpImageSparseSampleProjDrefImplicitLod = 311,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjExplicitLod	spirv.h	/^    SpvOpImageSparseSampleProjExplicitLod = 310,$/;"	e	enum:SpvOp_
SpvOpImageSparseSampleProjImplicitLod	spirv.h	/^    SpvOpImageSparseSampleProjImplicitLod = 309,$/;"	e	enum:SpvOp_
SpvOpImageSparseTexelsResident	spirv.h	/^    SpvOpImageSparseTexelsResident = 316,$/;"	e	enum:SpvOp_
SpvOpImageTexelPointer	spirv.h	/^    SpvOpImageTexelPointer = 60,$/;"	e	enum:SpvOp_
SpvOpImageWrite	spirv.h	/^    SpvOpImageWrite = 99,$/;"	e	enum:SpvOp_
SpvOpInBoundsAccessChain	spirv.h	/^    SpvOpInBoundsAccessChain = 66,$/;"	e	enum:SpvOp_
SpvOpInBoundsPtrAccessChain	spirv.h	/^    SpvOpInBoundsPtrAccessChain = 70,$/;"	e	enum:SpvOp_
SpvOpIsFinite	spirv.h	/^    SpvOpIsFinite = 158,$/;"	e	enum:SpvOp_
SpvOpIsHelperInvocationEXT	spirv.h	/^    SpvOpIsHelperInvocationEXT = 5381,$/;"	e	enum:SpvOp_
SpvOpIsInf	spirv.h	/^    SpvOpIsInf = 157,$/;"	e	enum:SpvOp_
SpvOpIsNan	spirv.h	/^    SpvOpIsNan = 156,$/;"	e	enum:SpvOp_
SpvOpIsNormal	spirv.h	/^    SpvOpIsNormal = 159,$/;"	e	enum:SpvOp_
SpvOpIsValidEvent	spirv.h	/^    SpvOpIsValidEvent = 300,$/;"	e	enum:SpvOp_
SpvOpIsValidReserveId	spirv.h	/^    SpvOpIsValidReserveId = 282,$/;"	e	enum:SpvOp_
SpvOpKill	spirv.h	/^    SpvOpKill = 252,$/;"	e	enum:SpvOp_
SpvOpLabel	spirv.h	/^    SpvOpLabel = 248,$/;"	e	enum:SpvOp_
SpvOpLessOrGreater	spirv.h	/^    SpvOpLessOrGreater = 161,$/;"	e	enum:SpvOp_
SpvOpLifetimeStart	spirv.h	/^    SpvOpLifetimeStart = 256,$/;"	e	enum:SpvOp_
SpvOpLifetimeStop	spirv.h	/^    SpvOpLifetimeStop = 257,$/;"	e	enum:SpvOp_
SpvOpLine	spirv.h	/^    SpvOpLine = 8,$/;"	e	enum:SpvOp_
SpvOpLoad	spirv.h	/^    SpvOpLoad = 61,$/;"	e	enum:SpvOp_
SpvOpLogicalAnd	spirv.h	/^    SpvOpLogicalAnd = 167,$/;"	e	enum:SpvOp_
SpvOpLogicalEqual	spirv.h	/^    SpvOpLogicalEqual = 164,$/;"	e	enum:SpvOp_
SpvOpLogicalNot	spirv.h	/^    SpvOpLogicalNot = 168,$/;"	e	enum:SpvOp_
SpvOpLogicalNotEqual	spirv.h	/^    SpvOpLogicalNotEqual = 165,$/;"	e	enum:SpvOp_
SpvOpLogicalOr	spirv.h	/^    SpvOpLogicalOr = 166,$/;"	e	enum:SpvOp_
SpvOpLoopControlINTEL	spirv.h	/^    SpvOpLoopControlINTEL = 5887,$/;"	e	enum:SpvOp_
SpvOpLoopMerge	spirv.h	/^    SpvOpLoopMerge = 246,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesMatrix	spirv.h	/^    SpvOpMatrixTimesMatrix = 146,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesScalar	spirv.h	/^    SpvOpMatrixTimesScalar = 143,$/;"	e	enum:SpvOp_
SpvOpMatrixTimesVector	spirv.h	/^    SpvOpMatrixTimesVector = 145,$/;"	e	enum:SpvOp_
SpvOpMax	spirv.h	/^    SpvOpMax = 0x7fffffff,$/;"	e	enum:SpvOp_
SpvOpMemberDecorate	spirv.h	/^    SpvOpMemberDecorate = 72,$/;"	e	enum:SpvOp_
SpvOpMemberDecorateString	spirv.h	/^    SpvOpMemberDecorateString = 5633,$/;"	e	enum:SpvOp_
SpvOpMemberDecorateStringGOOGLE	spirv.h	/^    SpvOpMemberDecorateStringGOOGLE = 5633,$/;"	e	enum:SpvOp_
SpvOpMemberName	spirv.h	/^    SpvOpMemberName = 6,$/;"	e	enum:SpvOp_
SpvOpMemoryBarrier	spirv.h	/^    SpvOpMemoryBarrier = 225,$/;"	e	enum:SpvOp_
SpvOpMemoryModel	spirv.h	/^    SpvOpMemoryModel = 14,$/;"	e	enum:SpvOp_
SpvOpMemoryNamedBarrier	spirv.h	/^    SpvOpMemoryNamedBarrier = 329,$/;"	e	enum:SpvOp_
SpvOpModuleProcessed	spirv.h	/^    SpvOpModuleProcessed = 330,$/;"	e	enum:SpvOp_
SpvOpName	spirv.h	/^    SpvOpName = 5,$/;"	e	enum:SpvOp_
SpvOpNamedBarrierInitialize	spirv.h	/^    SpvOpNamedBarrierInitialize = 328,$/;"	e	enum:SpvOp_
SpvOpNoLine	spirv.h	/^    SpvOpNoLine = 317,$/;"	e	enum:SpvOp_
SpvOpNop	spirv.h	/^    SpvOpNop = 0,$/;"	e	enum:SpvOp_
SpvOpNot	spirv.h	/^    SpvOpNot = 200,$/;"	e	enum:SpvOp_
SpvOpOrdered	spirv.h	/^    SpvOpOrdered = 162,$/;"	e	enum:SpvOp_
SpvOpOuterProduct	spirv.h	/^    SpvOpOuterProduct = 147,$/;"	e	enum:SpvOp_
SpvOpPhi	spirv.h	/^    SpvOpPhi = 245,$/;"	e	enum:SpvOp_
SpvOpPtrAccessChain	spirv.h	/^    SpvOpPtrAccessChain = 67,$/;"	e	enum:SpvOp_
SpvOpPtrCastToCrossWorkgroupINTEL	spirv.h	/^    SpvOpPtrCastToCrossWorkgroupINTEL = 5934,$/;"	e	enum:SpvOp_
SpvOpPtrCastToGeneric	spirv.h	/^    SpvOpPtrCastToGeneric = 121,$/;"	e	enum:SpvOp_
SpvOpPtrDiff	spirv.h	/^    SpvOpPtrDiff = 403,$/;"	e	enum:SpvOp_
SpvOpPtrEqual	spirv.h	/^    SpvOpPtrEqual = 401,$/;"	e	enum:SpvOp_
SpvOpPtrNotEqual	spirv.h	/^    SpvOpPtrNotEqual = 402,$/;"	e	enum:SpvOp_
SpvOpQuantizeToF16	spirv.h	/^    SpvOpQuantizeToF16 = 116,$/;"	e	enum:SpvOp_
SpvOpRayQueryConfirmIntersectionKHR	spirv.h	/^    SpvOpRayQueryConfirmIntersectionKHR = 4476,$/;"	e	enum:SpvOp_
SpvOpRayQueryGenerateIntersectionKHR	spirv.h	/^    SpvOpRayQueryGenerateIntersectionKHR = 4475,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionBarycentricsKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionBarycentricsKHR = 6024,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionFrontFaceKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionFrontFaceKHR = 6025,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionGeometryIndexKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionGeometryIndexKHR = 6022,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionInstanceIdKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionInstanceIdKHR = 6020,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionObjectRayDirectionKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionObjectRayOriginKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionObjectToWorldKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionObjectToWorldKHR = 6031,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionPrimitiveIndexKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionTKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionTKHR = 6018,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionTypeKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionTypeKHR = 4479,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetIntersectionWorldToObjectKHR	spirv.h	/^    SpvOpRayQueryGetIntersectionWorldToObjectKHR = 6032,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetRayFlagsKHR	spirv.h	/^    SpvOpRayQueryGetRayFlagsKHR = 6017,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetRayTMinKHR	spirv.h	/^    SpvOpRayQueryGetRayTMinKHR = 6016,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetWorldRayDirectionKHR	spirv.h	/^    SpvOpRayQueryGetWorldRayDirectionKHR = 6029,$/;"	e	enum:SpvOp_
SpvOpRayQueryGetWorldRayOriginKHR	spirv.h	/^    SpvOpRayQueryGetWorldRayOriginKHR = 6030,$/;"	e	enum:SpvOp_
SpvOpRayQueryInitializeKHR	spirv.h	/^    SpvOpRayQueryInitializeKHR = 4473,$/;"	e	enum:SpvOp_
SpvOpRayQueryProceedKHR	spirv.h	/^    SpvOpRayQueryProceedKHR = 4477,$/;"	e	enum:SpvOp_
SpvOpRayQueryTerminateKHR	spirv.h	/^    SpvOpRayQueryTerminateKHR = 4474,$/;"	e	enum:SpvOp_
SpvOpReadClockKHR	spirv.h	/^    SpvOpReadClockKHR = 5056,$/;"	e	enum:SpvOp_
SpvOpReadPipe	spirv.h	/^    SpvOpReadPipe = 274,$/;"	e	enum:SpvOp_
SpvOpReadPipeBlockingINTEL	spirv.h	/^    SpvOpReadPipeBlockingINTEL = 5946,$/;"	e	enum:SpvOp_
SpvOpReleaseEvent	spirv.h	/^    SpvOpReleaseEvent = 298,$/;"	e	enum:SpvOp_
SpvOpReportIntersectionKHR	spirv.h	/^    SpvOpReportIntersectionKHR = 5334,$/;"	e	enum:SpvOp_
SpvOpReportIntersectionNV	spirv.h	/^    SpvOpReportIntersectionNV = 5334,$/;"	e	enum:SpvOp_
SpvOpReserveReadPipePackets	spirv.h	/^    SpvOpReserveReadPipePackets = 278,$/;"	e	enum:SpvOp_
SpvOpReserveWritePipePackets	spirv.h	/^    SpvOpReserveWritePipePackets = 279,$/;"	e	enum:SpvOp_
SpvOpReservedReadPipe	spirv.h	/^    SpvOpReservedReadPipe = 276,$/;"	e	enum:SpvOp_
SpvOpReservedWritePipe	spirv.h	/^    SpvOpReservedWritePipe = 277,$/;"	e	enum:SpvOp_
SpvOpRestoreMemoryINTEL	spirv.h	/^    SpvOpRestoreMemoryINTEL = 5820,$/;"	e	enum:SpvOp_
SpvOpRetainEvent	spirv.h	/^    SpvOpRetainEvent = 297,$/;"	e	enum:SpvOp_
SpvOpReturn	spirv.h	/^    SpvOpReturn = 253,$/;"	e	enum:SpvOp_
SpvOpReturnValue	spirv.h	/^    SpvOpReturnValue = 254,$/;"	e	enum:SpvOp_
SpvOpSConvert	spirv.h	/^    SpvOpSConvert = 114,$/;"	e	enum:SpvOp_
SpvOpSDiv	spirv.h	/^    SpvOpSDiv = 135,$/;"	e	enum:SpvOp_
SpvOpSDot	spirv.h	/^    SpvOpSDot = 4450,$/;"	e	enum:SpvOp_
SpvOpSDotAccSat	spirv.h	/^    SpvOpSDotAccSat = 4453,$/;"	e	enum:SpvOp_
SpvOpSDotAccSatKHR	spirv.h	/^    SpvOpSDotAccSatKHR = 4453,$/;"	e	enum:SpvOp_
SpvOpSDotKHR	spirv.h	/^    SpvOpSDotKHR = 4450,$/;"	e	enum:SpvOp_
SpvOpSGreaterThan	spirv.h	/^    SpvOpSGreaterThan = 173,$/;"	e	enum:SpvOp_
SpvOpSGreaterThanEqual	spirv.h	/^    SpvOpSGreaterThanEqual = 175,$/;"	e	enum:SpvOp_
SpvOpSLessThan	spirv.h	/^    SpvOpSLessThan = 177,$/;"	e	enum:SpvOp_
SpvOpSLessThanEqual	spirv.h	/^    SpvOpSLessThanEqual = 179,$/;"	e	enum:SpvOp_
SpvOpSMod	spirv.h	/^    SpvOpSMod = 139,$/;"	e	enum:SpvOp_
SpvOpSMulExtended	spirv.h	/^    SpvOpSMulExtended = 152,$/;"	e	enum:SpvOp_
SpvOpSNegate	spirv.h	/^    SpvOpSNegate = 126,$/;"	e	enum:SpvOp_
SpvOpSRem	spirv.h	/^    SpvOpSRem = 138,$/;"	e	enum:SpvOp_
SpvOpSUDot	spirv.h	/^    SpvOpSUDot = 4452,$/;"	e	enum:SpvOp_
SpvOpSUDotAccSat	spirv.h	/^    SpvOpSUDotAccSat = 4455,$/;"	e	enum:SpvOp_
SpvOpSUDotAccSatKHR	spirv.h	/^    SpvOpSUDotAccSatKHR = 4455,$/;"	e	enum:SpvOp_
SpvOpSUDotKHR	spirv.h	/^    SpvOpSUDotKHR = 4452,$/;"	e	enum:SpvOp_
SpvOpSampledImage	spirv.h	/^    SpvOpSampledImage = 86,$/;"	e	enum:SpvOp_
SpvOpSamplerImageAddressingModeNV	spirv.h	/^    SpvOpSamplerImageAddressingModeNV = 5397,$/;"	e	enum:SpvOp_
SpvOpSatConvertSToU	spirv.h	/^    SpvOpSatConvertSToU = 118,$/;"	e	enum:SpvOp_
SpvOpSatConvertUToS	spirv.h	/^    SpvOpSatConvertUToS = 119,$/;"	e	enum:SpvOp_
SpvOpSaveMemoryINTEL	spirv.h	/^    SpvOpSaveMemoryINTEL = 5819,$/;"	e	enum:SpvOp_
SpvOpSelect	spirv.h	/^    SpvOpSelect = 169,$/;"	e	enum:SpvOp_
SpvOpSelectionMerge	spirv.h	/^    SpvOpSelectionMerge = 247,$/;"	e	enum:SpvOp_
SpvOpSetUserEventStatus	spirv.h	/^    SpvOpSetUserEventStatus = 301,$/;"	e	enum:SpvOp_
SpvOpShiftLeftLogical	spirv.h	/^    SpvOpShiftLeftLogical = 196,$/;"	e	enum:SpvOp_
SpvOpShiftRightArithmetic	spirv.h	/^    SpvOpShiftRightArithmetic = 195,$/;"	e	enum:SpvOp_
SpvOpShiftRightLogical	spirv.h	/^    SpvOpShiftRightLogical = 194,$/;"	e	enum:SpvOp_
SpvOpSignBitSet	spirv.h	/^    SpvOpSignBitSet = 160,$/;"	e	enum:SpvOp_
SpvOpSizeOf	spirv.h	/^    SpvOpSizeOf = 321,$/;"	e	enum:SpvOp_
SpvOpSource	spirv.h	/^    SpvOpSource = 3,$/;"	e	enum:SpvOp_
SpvOpSourceContinued	spirv.h	/^    SpvOpSourceContinued = 2,$/;"	e	enum:SpvOp_
SpvOpSourceExtension	spirv.h	/^    SpvOpSourceExtension = 4,$/;"	e	enum:SpvOp_
SpvOpSpecConstant	spirv.h	/^    SpvOpSpecConstant = 50,$/;"	e	enum:SpvOp_
SpvOpSpecConstantComposite	spirv.h	/^    SpvOpSpecConstantComposite = 51,$/;"	e	enum:SpvOp_
SpvOpSpecConstantCompositeContinuedINTEL	spirv.h	/^    SpvOpSpecConstantCompositeContinuedINTEL = 6092,$/;"	e	enum:SpvOp_
SpvOpSpecConstantFalse	spirv.h	/^    SpvOpSpecConstantFalse = 49,$/;"	e	enum:SpvOp_
SpvOpSpecConstantOp	spirv.h	/^    SpvOpSpecConstantOp = 52,$/;"	e	enum:SpvOp_
SpvOpSpecConstantTrue	spirv.h	/^    SpvOpSpecConstantTrue = 48,$/;"	e	enum:SpvOp_
SpvOpStore	spirv.h	/^    SpvOpStore = 62,$/;"	e	enum:SpvOp_
SpvOpString	spirv.h	/^    SpvOpString = 7,$/;"	e	enum:SpvOp_
SpvOpSubgroupAllEqualKHR	spirv.h	/^    SpvOpSubgroupAllEqualKHR = 4430,$/;"	e	enum:SpvOp_
SpvOpSubgroupAllKHR	spirv.h	/^    SpvOpSubgroupAllKHR = 4428,$/;"	e	enum:SpvOp_
SpvOpSubgroupAnyKHR	spirv.h	/^    SpvOpSubgroupAnyKHR = 4429,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcBmeInitializeINTEL	spirv.h	/^    SpvOpSubgroupAvcBmeInitializeINTEL = 5782,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcFmeInitializeINTEL	spirv.h	/^    SpvOpSubgroupAvcFmeInitializeINTEL = 5781,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeAdjustRefOffsetINTEL	spirv.h	/^    SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeConvertToMcePayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeConvertToMceResultINTEL	spirv.h	/^    SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetBorderReachedINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL	spirv.h	/^    SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeInitializeINTEL	spirv.h	/^    SpvOpSubgroupAvcImeInitializeINTEL = 5747,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeRefWindowSizeINTEL	spirv.h	/^    SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetDualReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetSingleReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeSetWeightedSadINTEL	spirv.h	/^    SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL	spirv.h	/^    SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToImePayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToImeResultINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToRefPayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToRefResultINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToSicPayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceConvertToSicResultINTEL	spirv.h	/^    SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterDirectionsINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterDistortionsINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterMajorShapeINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterMinorShapeINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceGetMotionVectorsINTEL	spirv.h	/^    SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL	spirv.h	/^    SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefConvertToMcePayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefConvertToMceResultINTEL	spirv.h	/^    SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL	spirv.h	/^    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL	spirv.h	/^    SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL	spirv.h	/^    SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL	spirv.h	/^    SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicConfigureIpeLumaINTEL	spirv.h	/^    SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicConfigureSkcINTEL	spirv.h	/^    SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicConvertToMcePayloadINTEL	spirv.h	/^    SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicConvertToMceResultINTEL	spirv.h	/^    SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicEvaluateIpeINTEL	spirv.h	/^    SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL	spirv.h	/^    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL	spirv.h	/^    SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetInterRawSadsINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetIpeChromaModeINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL	spirv.h	/^    SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicInitializeINTEL	spirv.h	/^    SpvOpSubgroupAvcSicInitializeINTEL = 5791,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,$/;"	e	enum:SpvOp_
SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL	spirv.h	/^    SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,$/;"	e	enum:SpvOp_
SpvOpSubgroupBallotKHR	spirv.h	/^    SpvOpSubgroupBallotKHR = 4421,$/;"	e	enum:SpvOp_
SpvOpSubgroupBlockReadINTEL	spirv.h	/^    SpvOpSubgroupBlockReadINTEL = 5575,$/;"	e	enum:SpvOp_
SpvOpSubgroupBlockWriteINTEL	spirv.h	/^    SpvOpSubgroupBlockWriteINTEL = 5576,$/;"	e	enum:SpvOp_
SpvOpSubgroupFirstInvocationKHR	spirv.h	/^    SpvOpSubgroupFirstInvocationKHR = 4422,$/;"	e	enum:SpvOp_
SpvOpSubgroupImageBlockReadINTEL	spirv.h	/^    SpvOpSubgroupImageBlockReadINTEL = 5577,$/;"	e	enum:SpvOp_
SpvOpSubgroupImageBlockWriteINTEL	spirv.h	/^    SpvOpSubgroupImageBlockWriteINTEL = 5578,$/;"	e	enum:SpvOp_
SpvOpSubgroupImageMediaBlockReadINTEL	spirv.h	/^    SpvOpSubgroupImageMediaBlockReadINTEL = 5580,$/;"	e	enum:SpvOp_
SpvOpSubgroupImageMediaBlockWriteINTEL	spirv.h	/^    SpvOpSubgroupImageMediaBlockWriteINTEL = 5581,$/;"	e	enum:SpvOp_
SpvOpSubgroupReadInvocationKHR	spirv.h	/^    SpvOpSubgroupReadInvocationKHR = 4432,$/;"	e	enum:SpvOp_
SpvOpSubgroupShuffleDownINTEL	spirv.h	/^    SpvOpSubgroupShuffleDownINTEL = 5572,$/;"	e	enum:SpvOp_
SpvOpSubgroupShuffleINTEL	spirv.h	/^    SpvOpSubgroupShuffleINTEL = 5571,$/;"	e	enum:SpvOp_
SpvOpSubgroupShuffleUpINTEL	spirv.h	/^    SpvOpSubgroupShuffleUpINTEL = 5573,$/;"	e	enum:SpvOp_
SpvOpSubgroupShuffleXorINTEL	spirv.h	/^    SpvOpSubgroupShuffleXorINTEL = 5574,$/;"	e	enum:SpvOp_
SpvOpSwitch	spirv.h	/^    SpvOpSwitch = 251,$/;"	e	enum:SpvOp_
SpvOpTerminateInvocation	spirv.h	/^    SpvOpTerminateInvocation = 4416,$/;"	e	enum:SpvOp_
SpvOpTerminateRayKHR	spirv.h	/^    SpvOpTerminateRayKHR = 4449,$/;"	e	enum:SpvOp_
SpvOpTerminateRayNV	spirv.h	/^    SpvOpTerminateRayNV = 5336,$/;"	e	enum:SpvOp_
SpvOpTraceMotionNV	spirv.h	/^    SpvOpTraceMotionNV = 5338,$/;"	e	enum:SpvOp_
SpvOpTraceNV	spirv.h	/^    SpvOpTraceNV = 5337,$/;"	e	enum:SpvOp_
SpvOpTraceRayKHR	spirv.h	/^    SpvOpTraceRayKHR = 4445,$/;"	e	enum:SpvOp_
SpvOpTraceRayMotionNV	spirv.h	/^    SpvOpTraceRayMotionNV = 5339,$/;"	e	enum:SpvOp_
SpvOpTranspose	spirv.h	/^    SpvOpTranspose = 84,$/;"	e	enum:SpvOp_
SpvOpTypeAccelerationStructureKHR	spirv.h	/^    SpvOpTypeAccelerationStructureKHR = 5341,$/;"	e	enum:SpvOp_
SpvOpTypeAccelerationStructureNV	spirv.h	/^    SpvOpTypeAccelerationStructureNV = 5341,$/;"	e	enum:SpvOp_
SpvOpTypeArray	spirv.h	/^    SpvOpTypeArray = 28,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImeDualReferenceStreaminINTEL	spirv.h	/^    SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImePayloadINTEL	spirv.h	/^    SpvOpTypeAvcImePayloadINTEL = 5701,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL	spirv.h	/^    SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImeResultINTEL	spirv.h	/^    SpvOpTypeAvcImeResultINTEL = 5706,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL	spirv.h	/^    SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,$/;"	e	enum:SpvOp_
SpvOpTypeAvcImeSingleReferenceStreaminINTEL	spirv.h	/^    SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,$/;"	e	enum:SpvOp_
SpvOpTypeAvcMcePayloadINTEL	spirv.h	/^    SpvOpTypeAvcMcePayloadINTEL = 5704,$/;"	e	enum:SpvOp_
SpvOpTypeAvcMceResultINTEL	spirv.h	/^    SpvOpTypeAvcMceResultINTEL = 5705,$/;"	e	enum:SpvOp_
SpvOpTypeAvcRefPayloadINTEL	spirv.h	/^    SpvOpTypeAvcRefPayloadINTEL = 5702,$/;"	e	enum:SpvOp_
SpvOpTypeAvcRefResultINTEL	spirv.h	/^    SpvOpTypeAvcRefResultINTEL = 5711,$/;"	e	enum:SpvOp_
SpvOpTypeAvcSicPayloadINTEL	spirv.h	/^    SpvOpTypeAvcSicPayloadINTEL = 5703,$/;"	e	enum:SpvOp_
SpvOpTypeAvcSicResultINTEL	spirv.h	/^    SpvOpTypeAvcSicResultINTEL = 5712,$/;"	e	enum:SpvOp_
SpvOpTypeBool	spirv.h	/^    SpvOpTypeBool = 20,$/;"	e	enum:SpvOp_
SpvOpTypeBufferSurfaceINTEL	spirv.h	/^    SpvOpTypeBufferSurfaceINTEL = 6086,$/;"	e	enum:SpvOp_
SpvOpTypeCooperativeMatrixNV	spirv.h	/^    SpvOpTypeCooperativeMatrixNV = 5358,$/;"	e	enum:SpvOp_
SpvOpTypeDeviceEvent	spirv.h	/^    SpvOpTypeDeviceEvent = 35,$/;"	e	enum:SpvOp_
SpvOpTypeEvent	spirv.h	/^    SpvOpTypeEvent = 34,$/;"	e	enum:SpvOp_
SpvOpTypeFloat	spirv.h	/^    SpvOpTypeFloat = 22,$/;"	e	enum:SpvOp_
SpvOpTypeForwardPointer	spirv.h	/^    SpvOpTypeForwardPointer = 39,$/;"	e	enum:SpvOp_
SpvOpTypeFunction	spirv.h	/^    SpvOpTypeFunction = 33,$/;"	e	enum:SpvOp_
SpvOpTypeImage	spirv.h	/^    SpvOpTypeImage = 25,$/;"	e	enum:SpvOp_
SpvOpTypeInt	spirv.h	/^    SpvOpTypeInt = 21,$/;"	e	enum:SpvOp_
SpvOpTypeMatrix	spirv.h	/^    SpvOpTypeMatrix = 24,$/;"	e	enum:SpvOp_
SpvOpTypeNamedBarrier	spirv.h	/^    SpvOpTypeNamedBarrier = 327,$/;"	e	enum:SpvOp_
SpvOpTypeOpaque	spirv.h	/^    SpvOpTypeOpaque = 31,$/;"	e	enum:SpvOp_
SpvOpTypePipe	spirv.h	/^    SpvOpTypePipe = 38,$/;"	e	enum:SpvOp_
SpvOpTypePipeStorage	spirv.h	/^    SpvOpTypePipeStorage = 322,$/;"	e	enum:SpvOp_
SpvOpTypePointer	spirv.h	/^    SpvOpTypePointer = 32,$/;"	e	enum:SpvOp_
SpvOpTypeQueue	spirv.h	/^    SpvOpTypeQueue = 37,$/;"	e	enum:SpvOp_
SpvOpTypeRayQueryKHR	spirv.h	/^    SpvOpTypeRayQueryKHR = 4472,$/;"	e	enum:SpvOp_
SpvOpTypeReserveId	spirv.h	/^    SpvOpTypeReserveId = 36,$/;"	e	enum:SpvOp_
SpvOpTypeRuntimeArray	spirv.h	/^    SpvOpTypeRuntimeArray = 29,$/;"	e	enum:SpvOp_
SpvOpTypeSampledImage	spirv.h	/^    SpvOpTypeSampledImage = 27,$/;"	e	enum:SpvOp_
SpvOpTypeSampler	spirv.h	/^    SpvOpTypeSampler = 26,$/;"	e	enum:SpvOp_
SpvOpTypeStruct	spirv.h	/^    SpvOpTypeStruct = 30,$/;"	e	enum:SpvOp_
SpvOpTypeStructContinuedINTEL	spirv.h	/^    SpvOpTypeStructContinuedINTEL = 6090,$/;"	e	enum:SpvOp_
SpvOpTypeVector	spirv.h	/^    SpvOpTypeVector = 23,$/;"	e	enum:SpvOp_
SpvOpTypeVmeImageINTEL	spirv.h	/^    SpvOpTypeVmeImageINTEL = 5700,$/;"	e	enum:SpvOp_
SpvOpTypeVoid	spirv.h	/^    SpvOpTypeVoid = 19,$/;"	e	enum:SpvOp_
SpvOpUAddSatINTEL	spirv.h	/^    SpvOpUAddSatINTEL = 5590,$/;"	e	enum:SpvOp_
SpvOpUAverageINTEL	spirv.h	/^    SpvOpUAverageINTEL = 5592,$/;"	e	enum:SpvOp_
SpvOpUAverageRoundedINTEL	spirv.h	/^    SpvOpUAverageRoundedINTEL = 5594,$/;"	e	enum:SpvOp_
SpvOpUConvert	spirv.h	/^    SpvOpUConvert = 113,$/;"	e	enum:SpvOp_
SpvOpUCountLeadingZerosINTEL	spirv.h	/^    SpvOpUCountLeadingZerosINTEL = 5585,$/;"	e	enum:SpvOp_
SpvOpUCountTrailingZerosINTEL	spirv.h	/^    SpvOpUCountTrailingZerosINTEL = 5586,$/;"	e	enum:SpvOp_
SpvOpUDiv	spirv.h	/^    SpvOpUDiv = 134,$/;"	e	enum:SpvOp_
SpvOpUDot	spirv.h	/^    SpvOpUDot = 4451,$/;"	e	enum:SpvOp_
SpvOpUDotAccSat	spirv.h	/^    SpvOpUDotAccSat = 4454,$/;"	e	enum:SpvOp_
SpvOpUDotAccSatKHR	spirv.h	/^    SpvOpUDotAccSatKHR = 4454,$/;"	e	enum:SpvOp_
SpvOpUDotKHR	spirv.h	/^    SpvOpUDotKHR = 4451,$/;"	e	enum:SpvOp_
SpvOpUGreaterThan	spirv.h	/^    SpvOpUGreaterThan = 172,$/;"	e	enum:SpvOp_
SpvOpUGreaterThanEqual	spirv.h	/^    SpvOpUGreaterThanEqual = 174,$/;"	e	enum:SpvOp_
SpvOpULessThan	spirv.h	/^    SpvOpULessThan = 176,$/;"	e	enum:SpvOp_
SpvOpULessThanEqual	spirv.h	/^    SpvOpULessThanEqual = 178,$/;"	e	enum:SpvOp_
SpvOpUMod	spirv.h	/^    SpvOpUMod = 137,$/;"	e	enum:SpvOp_
SpvOpUMul32x16INTEL	spirv.h	/^    SpvOpUMul32x16INTEL = 5598,$/;"	e	enum:SpvOp_
SpvOpUMulExtended	spirv.h	/^    SpvOpUMulExtended = 151,$/;"	e	enum:SpvOp_
SpvOpUSubSatINTEL	spirv.h	/^    SpvOpUSubSatINTEL = 5596,$/;"	e	enum:SpvOp_
SpvOpUndef	spirv.h	/^    SpvOpUndef = 1,$/;"	e	enum:SpvOp_
SpvOpUnordered	spirv.h	/^    SpvOpUnordered = 163,$/;"	e	enum:SpvOp_
SpvOpUnreachable	spirv.h	/^    SpvOpUnreachable = 255,$/;"	e	enum:SpvOp_
SpvOpVariable	spirv.h	/^    SpvOpVariable = 59,$/;"	e	enum:SpvOp_
SpvOpVariableLengthArrayINTEL	spirv.h	/^    SpvOpVariableLengthArrayINTEL = 5818,$/;"	e	enum:SpvOp_
SpvOpVectorExtractDynamic	spirv.h	/^    SpvOpVectorExtractDynamic = 77,$/;"	e	enum:SpvOp_
SpvOpVectorInsertDynamic	spirv.h	/^    SpvOpVectorInsertDynamic = 78,$/;"	e	enum:SpvOp_
SpvOpVectorShuffle	spirv.h	/^    SpvOpVectorShuffle = 79,$/;"	e	enum:SpvOp_
SpvOpVectorTimesMatrix	spirv.h	/^    SpvOpVectorTimesMatrix = 144,$/;"	e	enum:SpvOp_
SpvOpVectorTimesScalar	spirv.h	/^    SpvOpVectorTimesScalar = 142,$/;"	e	enum:SpvOp_
SpvOpVmeImageINTEL	spirv.h	/^    SpvOpVmeImageINTEL = 5699,$/;"	e	enum:SpvOp_
SpvOpWritePackedPrimitiveIndices4x8NV	spirv.h	/^    SpvOpWritePackedPrimitiveIndices4x8NV = 5299,$/;"	e	enum:SpvOp_
SpvOpWritePipe	spirv.h	/^    SpvOpWritePipe = 275,$/;"	e	enum:SpvOp_
SpvOpWritePipeBlockingINTEL	spirv.h	/^    SpvOpWritePipeBlockingINTEL = 5947,$/;"	e	enum:SpvOp_
SpvOp_	spirv.h	/^typedef enum SpvOp_ {$/;"	g
SpvOverflowModes	spirv.h	/^} SpvOverflowModes;$/;"	t	typeref:enum:SpvOverflowModes_
SpvOverflowModesMax	spirv.h	/^    SpvOverflowModesMax = 0x7fffffff,$/;"	e	enum:SpvOverflowModes_
SpvOverflowModesSAT	spirv.h	/^    SpvOverflowModesSAT = 1,$/;"	e	enum:SpvOverflowModes_
SpvOverflowModesSAT_SYM	spirv.h	/^    SpvOverflowModesSAT_SYM = 3,$/;"	e	enum:SpvOverflowModes_
SpvOverflowModesSAT_ZERO	spirv.h	/^    SpvOverflowModesSAT_ZERO = 2,$/;"	e	enum:SpvOverflowModes_
SpvOverflowModesWRAP	spirv.h	/^    SpvOverflowModesWRAP = 0,$/;"	e	enum:SpvOverflowModes_
SpvOverflowModes_	spirv.h	/^typedef enum SpvOverflowModes_ {$/;"	g
SpvPackedVectorFormat	spirv.h	/^} SpvPackedVectorFormat;$/;"	t	typeref:enum:SpvPackedVectorFormat_
SpvPackedVectorFormatMax	spirv.h	/^    SpvPackedVectorFormatMax = 0x7fffffff,$/;"	e	enum:SpvPackedVectorFormat_
SpvPackedVectorFormatPackedVectorFormat4x8Bit	spirv.h	/^    SpvPackedVectorFormatPackedVectorFormat4x8Bit = 0,$/;"	e	enum:SpvPackedVectorFormat_
SpvPackedVectorFormatPackedVectorFormat4x8BitKHR	spirv.h	/^    SpvPackedVectorFormatPackedVectorFormat4x8BitKHR = 0,$/;"	e	enum:SpvPackedVectorFormat_
SpvPackedVectorFormat_	spirv.h	/^typedef enum SpvPackedVectorFormat_ {$/;"	g
SpvQuantizationModes	spirv.h	/^} SpvQuantizationModes;$/;"	t	typeref:enum:SpvQuantizationModes_
SpvQuantizationModesMax	spirv.h	/^    SpvQuantizationModesMax = 0x7fffffff,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND	spirv.h	/^    SpvQuantizationModesRND = 2,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND_CONV	spirv.h	/^    SpvQuantizationModesRND_CONV = 6,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND_CONV_ODD	spirv.h	/^    SpvQuantizationModesRND_CONV_ODD = 7,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND_INF	spirv.h	/^    SpvQuantizationModesRND_INF = 4,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND_MIN_INF	spirv.h	/^    SpvQuantizationModesRND_MIN_INF = 5,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesRND_ZERO	spirv.h	/^    SpvQuantizationModesRND_ZERO = 3,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesTRN	spirv.h	/^    SpvQuantizationModesTRN = 0,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModesTRN_ZERO	spirv.h	/^    SpvQuantizationModesTRN_ZERO = 1,$/;"	e	enum:SpvQuantizationModes_
SpvQuantizationModes_	spirv.h	/^typedef enum SpvQuantizationModes_ {$/;"	g
SpvRayFlagsCullBackFacingTrianglesKHRMask	spirv.h	/^    SpvRayFlagsCullBackFacingTrianglesKHRMask = 0x00000010,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsCullBackFacingTrianglesKHRShift	spirv.h	/^    SpvRayFlagsCullBackFacingTrianglesKHRShift = 4,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsCullFrontFacingTrianglesKHRMask	spirv.h	/^    SpvRayFlagsCullFrontFacingTrianglesKHRMask = 0x00000020,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsCullFrontFacingTrianglesKHRShift	spirv.h	/^    SpvRayFlagsCullFrontFacingTrianglesKHRShift = 5,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsCullNoOpaqueKHRMask	spirv.h	/^    SpvRayFlagsCullNoOpaqueKHRMask = 0x00000080,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsCullNoOpaqueKHRShift	spirv.h	/^    SpvRayFlagsCullNoOpaqueKHRShift = 7,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsCullOpaqueKHRMask	spirv.h	/^    SpvRayFlagsCullOpaqueKHRMask = 0x00000040,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsCullOpaqueKHRShift	spirv.h	/^    SpvRayFlagsCullOpaqueKHRShift = 6,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsMask	spirv.h	/^} SpvRayFlagsMask;$/;"	t	typeref:enum:SpvRayFlagsMask_
SpvRayFlagsMaskNone	spirv.h	/^    SpvRayFlagsMaskNone = 0,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsMask_	spirv.h	/^typedef enum SpvRayFlagsMask_ {$/;"	g
SpvRayFlagsMax	spirv.h	/^    SpvRayFlagsMax = 0x7fffffff,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsNoOpaqueKHRMask	spirv.h	/^    SpvRayFlagsNoOpaqueKHRMask = 0x00000002,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsNoOpaqueKHRShift	spirv.h	/^    SpvRayFlagsNoOpaqueKHRShift = 1,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsOpaqueKHRMask	spirv.h	/^    SpvRayFlagsOpaqueKHRMask = 0x00000001,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsOpaqueKHRShift	spirv.h	/^    SpvRayFlagsOpaqueKHRShift = 0,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsShift	spirv.h	/^} SpvRayFlagsShift;$/;"	t	typeref:enum:SpvRayFlagsShift_
SpvRayFlagsShift_	spirv.h	/^typedef enum SpvRayFlagsShift_ {$/;"	g
SpvRayFlagsSkipAABBsKHRMask	spirv.h	/^    SpvRayFlagsSkipAABBsKHRMask = 0x00000200,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsSkipAABBsKHRShift	spirv.h	/^    SpvRayFlagsSkipAABBsKHRShift = 9,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsSkipClosestHitShaderKHRMask	spirv.h	/^    SpvRayFlagsSkipClosestHitShaderKHRMask = 0x00000008,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsSkipClosestHitShaderKHRShift	spirv.h	/^    SpvRayFlagsSkipClosestHitShaderKHRShift = 3,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsSkipTrianglesKHRMask	spirv.h	/^    SpvRayFlagsSkipTrianglesKHRMask = 0x00000100,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsSkipTrianglesKHRShift	spirv.h	/^    SpvRayFlagsSkipTrianglesKHRShift = 8,$/;"	e	enum:SpvRayFlagsShift_
SpvRayFlagsTerminateOnFirstHitKHRMask	spirv.h	/^    SpvRayFlagsTerminateOnFirstHitKHRMask = 0x00000004,$/;"	e	enum:SpvRayFlagsMask_
SpvRayFlagsTerminateOnFirstHitKHRShift	spirv.h	/^    SpvRayFlagsTerminateOnFirstHitKHRShift = 2,$/;"	e	enum:SpvRayFlagsShift_
SpvRayQueryCandidateIntersectionType	spirv.h	/^} SpvRayQueryCandidateIntersectionType;$/;"	t	typeref:enum:SpvRayQueryCandidateIntersectionType_
SpvRayQueryCandidateIntersectionTypeMax	spirv.h	/^    SpvRayQueryCandidateIntersectionTypeMax = 0x7fffffff,$/;"	e	enum:SpvRayQueryCandidateIntersectionType_
SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR	spirv.h	/^    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1,$/;"	e	enum:SpvRayQueryCandidateIntersectionType_
SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR	spirv.h	/^    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0,$/;"	e	enum:SpvRayQueryCandidateIntersectionType_
SpvRayQueryCandidateIntersectionType_	spirv.h	/^typedef enum SpvRayQueryCandidateIntersectionType_ {$/;"	g
SpvRayQueryCommittedIntersectionType	spirv.h	/^} SpvRayQueryCommittedIntersectionType;$/;"	t	typeref:enum:SpvRayQueryCommittedIntersectionType_
SpvRayQueryCommittedIntersectionTypeMax	spirv.h	/^    SpvRayQueryCommittedIntersectionTypeMax = 0x7fffffff,$/;"	e	enum:SpvRayQueryCommittedIntersectionType_
SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR	spirv.h	/^    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2,$/;"	e	enum:SpvRayQueryCommittedIntersectionType_
SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR	spirv.h	/^    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0,$/;"	e	enum:SpvRayQueryCommittedIntersectionType_
SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR	spirv.h	/^    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1,$/;"	e	enum:SpvRayQueryCommittedIntersectionType_
SpvRayQueryCommittedIntersectionType_	spirv.h	/^typedef enum SpvRayQueryCommittedIntersectionType_ {$/;"	g
SpvRayQueryIntersection	spirv.h	/^} SpvRayQueryIntersection;$/;"	t	typeref:enum:SpvRayQueryIntersection_
SpvRayQueryIntersectionMax	spirv.h	/^    SpvRayQueryIntersectionMax = 0x7fffffff,$/;"	e	enum:SpvRayQueryIntersection_
SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR	spirv.h	/^    SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR = 0,$/;"	e	enum:SpvRayQueryIntersection_
SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR	spirv.h	/^    SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR = 1,$/;"	e	enum:SpvRayQueryIntersection_
SpvRayQueryIntersection_	spirv.h	/^typedef enum SpvRayQueryIntersection_ {$/;"	g
SpvRevision	spirv.h	/^static const unsigned int SpvRevision = 1;$/;"	v
SpvSamplerAddressingMode	spirv.h	/^} SpvSamplerAddressingMode;$/;"	t	typeref:enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeClamp	spirv.h	/^    SpvSamplerAddressingModeClamp = 2,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeClampToEdge	spirv.h	/^    SpvSamplerAddressingModeClampToEdge = 1,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeMax	spirv.h	/^    SpvSamplerAddressingModeMax = 0x7fffffff,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeNone	spirv.h	/^    SpvSamplerAddressingModeNone = 0,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeRepeat	spirv.h	/^    SpvSamplerAddressingModeRepeat = 3,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingModeRepeatMirrored	spirv.h	/^    SpvSamplerAddressingModeRepeatMirrored = 4,$/;"	e	enum:SpvSamplerAddressingMode_
SpvSamplerAddressingMode_	spirv.h	/^typedef enum SpvSamplerAddressingMode_ {$/;"	g
SpvSamplerFilterMode	spirv.h	/^} SpvSamplerFilterMode;$/;"	t	typeref:enum:SpvSamplerFilterMode_
SpvSamplerFilterModeLinear	spirv.h	/^    SpvSamplerFilterModeLinear = 1,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterModeMax	spirv.h	/^    SpvSamplerFilterModeMax = 0x7fffffff,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterModeNearest	spirv.h	/^    SpvSamplerFilterModeNearest = 0,$/;"	e	enum:SpvSamplerFilterMode_
SpvSamplerFilterMode_	spirv.h	/^typedef enum SpvSamplerFilterMode_ {$/;"	g
SpvScope	spirv.h	/^} SpvScope;$/;"	t	typeref:enum:SpvScope_
SpvScopeCrossDevice	spirv.h	/^    SpvScopeCrossDevice = 0,$/;"	e	enum:SpvScope_
SpvScopeDevice	spirv.h	/^    SpvScopeDevice = 1,$/;"	e	enum:SpvScope_
SpvScopeInvocation	spirv.h	/^    SpvScopeInvocation = 4,$/;"	e	enum:SpvScope_
SpvScopeMax	spirv.h	/^    SpvScopeMax = 0x7fffffff,$/;"	e	enum:SpvScope_
SpvScopeQueueFamily	spirv.h	/^    SpvScopeQueueFamily = 5,$/;"	e	enum:SpvScope_
SpvScopeQueueFamilyKHR	spirv.h	/^    SpvScopeQueueFamilyKHR = 5,$/;"	e	enum:SpvScope_
SpvScopeShaderCallKHR	spirv.h	/^    SpvScopeShaderCallKHR = 6,$/;"	e	enum:SpvScope_
SpvScopeSubgroup	spirv.h	/^    SpvScopeSubgroup = 3,$/;"	e	enum:SpvScope_
SpvScopeWorkgroup	spirv.h	/^    SpvScopeWorkgroup = 2,$/;"	e	enum:SpvScope_
SpvScope_	spirv.h	/^typedef enum SpvScope_ {$/;"	g
SpvSelectionControlDontFlattenMask	spirv.h	/^    SpvSelectionControlDontFlattenMask = 0x00000002,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlDontFlattenShift	spirv.h	/^    SpvSelectionControlDontFlattenShift = 1,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlFlattenMask	spirv.h	/^    SpvSelectionControlFlattenMask = 0x00000001,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlFlattenShift	spirv.h	/^    SpvSelectionControlFlattenShift = 0,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlMask	spirv.h	/^} SpvSelectionControlMask;$/;"	t	typeref:enum:SpvSelectionControlMask_
SpvSelectionControlMaskNone	spirv.h	/^    SpvSelectionControlMaskNone = 0,$/;"	e	enum:SpvSelectionControlMask_
SpvSelectionControlMask_	spirv.h	/^typedef enum SpvSelectionControlMask_ {$/;"	g
SpvSelectionControlMax	spirv.h	/^    SpvSelectionControlMax = 0x7fffffff,$/;"	e	enum:SpvSelectionControlShift_
SpvSelectionControlShift	spirv.h	/^} SpvSelectionControlShift;$/;"	t	typeref:enum:SpvSelectionControlShift_
SpvSelectionControlShift_	spirv.h	/^typedef enum SpvSelectionControlShift_ {$/;"	g
SpvSourceLanguage	spirv.h	/^} SpvSourceLanguage;$/;"	t	typeref:enum:SpvSourceLanguage_
SpvSourceLanguageCPP_for_OpenCL	spirv.h	/^    SpvSourceLanguageCPP_for_OpenCL = 6,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageESSL	spirv.h	/^    SpvSourceLanguageESSL = 1,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageGLSL	spirv.h	/^    SpvSourceLanguageGLSL = 2,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageHLSL	spirv.h	/^    SpvSourceLanguageHLSL = 5,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageMax	spirv.h	/^    SpvSourceLanguageMax = 0x7fffffff,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageOpenCL_C	spirv.h	/^    SpvSourceLanguageOpenCL_C = 3,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageOpenCL_CPP	spirv.h	/^    SpvSourceLanguageOpenCL_CPP = 4,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguageUnknown	spirv.h	/^    SpvSourceLanguageUnknown = 0,$/;"	e	enum:SpvSourceLanguage_
SpvSourceLanguage_	spirv.h	/^typedef enum SpvSourceLanguage_ {$/;"	g
SpvStorageClass	spirv.h	/^} SpvStorageClass;$/;"	t	typeref:enum:SpvStorageClass_
SpvStorageClassAtomicCounter	spirv.h	/^    SpvStorageClassAtomicCounter = 10,$/;"	e	enum:SpvStorageClass_
SpvStorageClassCallableDataKHR	spirv.h	/^    SpvStorageClassCallableDataKHR = 5328,$/;"	e	enum:SpvStorageClass_
SpvStorageClassCallableDataNV	spirv.h	/^    SpvStorageClassCallableDataNV = 5328,$/;"	e	enum:SpvStorageClass_
SpvStorageClassCodeSectionINTEL	spirv.h	/^    SpvStorageClassCodeSectionINTEL = 5605,$/;"	e	enum:SpvStorageClass_
SpvStorageClassCrossWorkgroup	spirv.h	/^    SpvStorageClassCrossWorkgroup = 5,$/;"	e	enum:SpvStorageClass_
SpvStorageClassDeviceOnlyINTEL	spirv.h	/^    SpvStorageClassDeviceOnlyINTEL = 5936,$/;"	e	enum:SpvStorageClass_
SpvStorageClassFunction	spirv.h	/^    SpvStorageClassFunction = 7,$/;"	e	enum:SpvStorageClass_
SpvStorageClassGeneric	spirv.h	/^    SpvStorageClassGeneric = 8,$/;"	e	enum:SpvStorageClass_
SpvStorageClassHitAttributeKHR	spirv.h	/^    SpvStorageClassHitAttributeKHR = 5339,$/;"	e	enum:SpvStorageClass_
SpvStorageClassHitAttributeNV	spirv.h	/^    SpvStorageClassHitAttributeNV = 5339,$/;"	e	enum:SpvStorageClass_
SpvStorageClassHostOnlyINTEL	spirv.h	/^    SpvStorageClassHostOnlyINTEL = 5937,$/;"	e	enum:SpvStorageClass_
SpvStorageClassImage	spirv.h	/^    SpvStorageClassImage = 11,$/;"	e	enum:SpvStorageClass_
SpvStorageClassIncomingCallableDataKHR	spirv.h	/^    SpvStorageClassIncomingCallableDataKHR = 5329,$/;"	e	enum:SpvStorageClass_
SpvStorageClassIncomingCallableDataNV	spirv.h	/^    SpvStorageClassIncomingCallableDataNV = 5329,$/;"	e	enum:SpvStorageClass_
SpvStorageClassIncomingRayPayloadKHR	spirv.h	/^    SpvStorageClassIncomingRayPayloadKHR = 5342,$/;"	e	enum:SpvStorageClass_
SpvStorageClassIncomingRayPayloadNV	spirv.h	/^    SpvStorageClassIncomingRayPayloadNV = 5342,$/;"	e	enum:SpvStorageClass_
SpvStorageClassInput	spirv.h	/^    SpvStorageClassInput = 1,$/;"	e	enum:SpvStorageClass_
SpvStorageClassMax	spirv.h	/^    SpvStorageClassMax = 0x7fffffff,$/;"	e	enum:SpvStorageClass_
SpvStorageClassOutput	spirv.h	/^    SpvStorageClassOutput = 3,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPhysicalStorageBuffer	spirv.h	/^    SpvStorageClassPhysicalStorageBuffer = 5349,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPhysicalStorageBufferEXT	spirv.h	/^    SpvStorageClassPhysicalStorageBufferEXT = 5349,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPrivate	spirv.h	/^    SpvStorageClassPrivate = 6,$/;"	e	enum:SpvStorageClass_
SpvStorageClassPushConstant	spirv.h	/^    SpvStorageClassPushConstant = 9,$/;"	e	enum:SpvStorageClass_
SpvStorageClassRayPayloadKHR	spirv.h	/^    SpvStorageClassRayPayloadKHR = 5338,$/;"	e	enum:SpvStorageClass_
SpvStorageClassRayPayloadNV	spirv.h	/^    SpvStorageClassRayPayloadNV = 5338,$/;"	e	enum:SpvStorageClass_
SpvStorageClassShaderRecordBufferKHR	spirv.h	/^    SpvStorageClassShaderRecordBufferKHR = 5343,$/;"	e	enum:SpvStorageClass_
SpvStorageClassShaderRecordBufferNV	spirv.h	/^    SpvStorageClassShaderRecordBufferNV = 5343,$/;"	e	enum:SpvStorageClass_
SpvStorageClassStorageBuffer	spirv.h	/^    SpvStorageClassStorageBuffer = 12,$/;"	e	enum:SpvStorageClass_
SpvStorageClassUniform	spirv.h	/^    SpvStorageClassUniform = 2,$/;"	e	enum:SpvStorageClass_
SpvStorageClassUniformConstant	spirv.h	/^    SpvStorageClassUniformConstant = 0,$/;"	e	enum:SpvStorageClass_
SpvStorageClassWorkgroup	spirv.h	/^    SpvStorageClassWorkgroup = 4,$/;"	e	enum:SpvStorageClass_
SpvStorageClass_	spirv.h	/^typedef enum SpvStorageClass_ {$/;"	g
SpvVersion	spirv.h	/^static const unsigned int SpvVersion = 0x00010600;$/;"	v
SpvWordCountShift	spirv.h	/^static const unsigned int SpvWordCountShift = 16;$/;"	v
StageSetBinding	spirv_common.hpp	/^struct StageSetBinding$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
StaticExpressionAccessHandler	spirv_cross.cpp	/^Compiler::StaticExpressionAccessHandler::StaticExpressionAccessHandler(Compiler &compiler_, uint32_t variable_id_)$/;"	f	class:Compiler::StaticExpressionAccessHandler
StaticExpressionAccessHandler	spirv_cross.hpp	/^	struct StaticExpressionAccessHandler : OpcodeHandler$/;"	s	class:SPIRV_CROSS_NAMESPACE::Compiler
StorageClass	spirv.hpp	/^enum StorageClass {$/;"	g	namespace:spv
StorageClassAtomicCounter	spirv.hpp	/^    StorageClassAtomicCounter = 10,$/;"	e	enum:spv::StorageClass
StorageClassCallableDataKHR	spirv.hpp	/^    StorageClassCallableDataKHR = 5328,$/;"	e	enum:spv::StorageClass
StorageClassCallableDataNV	spirv.hpp	/^    StorageClassCallableDataNV = 5328,$/;"	e	enum:spv::StorageClass
StorageClassCodeSectionINTEL	spirv.hpp	/^    StorageClassCodeSectionINTEL = 5605,$/;"	e	enum:spv::StorageClass
StorageClassCrossWorkgroup	spirv.hpp	/^    StorageClassCrossWorkgroup = 5,$/;"	e	enum:spv::StorageClass
StorageClassDeviceOnlyINTEL	spirv.hpp	/^    StorageClassDeviceOnlyINTEL = 5936,$/;"	e	enum:spv::StorageClass
StorageClassFunction	spirv.hpp	/^    StorageClassFunction = 7,$/;"	e	enum:spv::StorageClass
StorageClassGeneric	spirv.hpp	/^    StorageClassGeneric = 8,$/;"	e	enum:spv::StorageClass
StorageClassHitAttributeKHR	spirv.hpp	/^    StorageClassHitAttributeKHR = 5339,$/;"	e	enum:spv::StorageClass
StorageClassHitAttributeNV	spirv.hpp	/^    StorageClassHitAttributeNV = 5339,$/;"	e	enum:spv::StorageClass
StorageClassHostOnlyINTEL	spirv.hpp	/^    StorageClassHostOnlyINTEL = 5937,$/;"	e	enum:spv::StorageClass
StorageClassImage	spirv.hpp	/^    StorageClassImage = 11,$/;"	e	enum:spv::StorageClass
StorageClassIncomingCallableDataKHR	spirv.hpp	/^    StorageClassIncomingCallableDataKHR = 5329,$/;"	e	enum:spv::StorageClass
StorageClassIncomingCallableDataNV	spirv.hpp	/^    StorageClassIncomingCallableDataNV = 5329,$/;"	e	enum:spv::StorageClass
StorageClassIncomingRayPayloadKHR	spirv.hpp	/^    StorageClassIncomingRayPayloadKHR = 5342,$/;"	e	enum:spv::StorageClass
StorageClassIncomingRayPayloadNV	spirv.hpp	/^    StorageClassIncomingRayPayloadNV = 5342,$/;"	e	enum:spv::StorageClass
StorageClassInput	spirv.hpp	/^    StorageClassInput = 1,$/;"	e	enum:spv::StorageClass
StorageClassMax	spirv.hpp	/^    StorageClassMax = 0x7fffffff,$/;"	e	enum:spv::StorageClass
StorageClassOutput	spirv.hpp	/^    StorageClassOutput = 3,$/;"	e	enum:spv::StorageClass
StorageClassPhysicalStorageBuffer	spirv.hpp	/^    StorageClassPhysicalStorageBuffer = 5349,$/;"	e	enum:spv::StorageClass
StorageClassPhysicalStorageBufferEXT	spirv.hpp	/^    StorageClassPhysicalStorageBufferEXT = 5349,$/;"	e	enum:spv::StorageClass
StorageClassPrivate	spirv.hpp	/^    StorageClassPrivate = 6,$/;"	e	enum:spv::StorageClass
StorageClassPushConstant	spirv.hpp	/^    StorageClassPushConstant = 9,$/;"	e	enum:spv::StorageClass
StorageClassRayPayloadKHR	spirv.hpp	/^    StorageClassRayPayloadKHR = 5338,$/;"	e	enum:spv::StorageClass
StorageClassRayPayloadNV	spirv.hpp	/^    StorageClassRayPayloadNV = 5338,$/;"	e	enum:spv::StorageClass
StorageClassShaderRecordBufferKHR	spirv.hpp	/^    StorageClassShaderRecordBufferKHR = 5343,$/;"	e	enum:spv::StorageClass
StorageClassShaderRecordBufferNV	spirv.hpp	/^    StorageClassShaderRecordBufferNV = 5343,$/;"	e	enum:spv::StorageClass
StorageClassStorageBuffer	spirv.hpp	/^    StorageClassStorageBuffer = 12,$/;"	e	enum:spv::StorageClass
StorageClassUniform	spirv.hpp	/^    StorageClassUniform = 2,$/;"	e	enum:spv::StorageClass
StorageClassUniformConstant	spirv.hpp	/^    StorageClassUniformConstant = 0,$/;"	e	enum:spv::StorageClass
StorageClassWorkgroup	spirv.hpp	/^    StorageClassWorkgroup = 4,$/;"	e	enum:spv::StorageClass
Stream	spirv_reflect.cpp	/^class Stream$/;"	c	namespace:simple_json	file:
StringAllocation	spirv_cross_c.cpp	/^	explicit StringAllocation(const char *name)$/;"	f	struct:StringAllocation
StringAllocation	spirv_cross_c.cpp	/^	explicit StringAllocation(std::string name)$/;"	f	struct:StringAllocation
StringAllocation	spirv_cross_c.cpp	/^struct StringAllocation : ScratchMemoryAllocation$/;"	s	file:
StringStream	spirv_cross_containers.hpp	/^	StringStream()$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
StringStream	spirv_cross_containers.hpp	/^class StringStream$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Struct	spirv_common.hpp	/^		Struct,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
SubgroupAllEqualT	spirv_glsl.hpp	/^			SubgroupAllEqualT = 8,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupAll_Any_AllEqualBool	spirv_glsl.hpp	/^			SubgroupAll_Any_AllEqualBool = 7,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBallot	spirv_glsl.hpp	/^			SubgroupBallot = 12,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBallotBitCount	spirv_glsl.hpp	/^			SubgroupBallotBitCount = 15,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBallotBitExtract	spirv_glsl.hpp	/^			SubgroupBallotBitExtract = 14,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBallotFindLSB_MSB	spirv_glsl.hpp	/^			SubgroupBallotFindLSB_MSB = 6,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBarrier	spirv_glsl.hpp	/^			SubgroupBarrier = 10,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupBroadcast_First	spirv_glsl.hpp	/^			SubgroupBroadcast_First = 5,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupElect	spirv_glsl.hpp	/^			SubgroupElect = 9,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupID	spirv_glsl.hpp	/^			SubgroupID = 3,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupInverseBallot_InclBitCount_ExclBitCout	spirv_glsl.hpp	/^			SubgroupInverseBallot_InclBitCount_ExclBitCout = 13,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupInvocationID	spirv_glsl.hpp	/^			SubgroupInvocationID = 2,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupMask	spirv_glsl.hpp	/^			SubgroupMask = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupMemBarrier	spirv_glsl.hpp	/^			SubgroupMemBarrier = 11,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
SubgroupSize	spirv_glsl.hpp	/^			SubgroupSize = 1,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Feature
TARGET	Makefile	/^TARGET := spirv-cross$/;"	m
THROW	main.cpp	/^static inline void THROW(const char *str)$/;"	f	file:
TemporaryBuffer	spirv_cross_c.cpp	/^struct TemporaryBuffer : ScratchMemoryAllocation$/;"	s	file:
TemporaryCopy	spirv_glsl.hpp	/^	struct TemporaryCopy$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
TerminateRay	spirv_common.hpp	/^		TerminateRay \/\/ Ray Tracing$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
Terminator	spirv_common.hpp	/^	enum Terminator$/;"	g	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
TextureFunctionArguments	spirv_glsl.hpp	/^	struct TextureFunctionArguments$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
TextureFunctionBaseArguments	spirv_glsl.hpp	/^	struct TextureFunctionBaseArguments$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
TextureFunctionNameArguments	spirv_glsl.hpp	/^	struct TextureFunctionNameArguments$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
TextureQueryVariantDim	spirv_hlsl.hpp	/^	enum TextureQueryVariantDim$/;"	g	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
TextureQueryVariantType	spirv_hlsl.hpp	/^	enum TextureQueryVariantType$/;"	g	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
TextureSizeVariants	spirv_hlsl.hpp	/^		TextureSizeVariants()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureSizeVariants
TextureSizeVariants	spirv_hlsl.hpp	/^	struct TextureSizeVariants$/;"	s	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
TriState	spirv_msl.hpp	/^	enum class TriState$/;"	c	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
Type	spirv_reflect.cpp	/^enum class Type$/;"	c	namespace:simple_json	file:
TypeAccessChain	spirv_common.hpp	/^	TypeAccessChain,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeBlock	spirv_common.hpp	/^	TypeBlock,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeCombinedImageSampler	spirv_common.hpp	/^	TypeCombinedImageSampler,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeConstant	spirv_common.hpp	/^	TypeConstant,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeConstantOp	spirv_common.hpp	/^	TypeConstantOp,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeCount	spirv_common.hpp	/^	TypeCount$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeExpression	spirv_common.hpp	/^	TypeExpression,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeExtension	spirv_common.hpp	/^	TypeExtension,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeFunction	spirv_common.hpp	/^	TypeFunction,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeFunctionPrototype	spirv_common.hpp	/^	TypeFunctionPrototype,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeNone	spirv_common.hpp	/^	TypeNone,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeNormal	spirv_hlsl.hpp	/^		TypeNormal,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::BitcastType
TypePackUint2x32	spirv_hlsl.hpp	/^		TypePackUint2x32,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::BitcastType
TypeString	spirv_common.hpp	/^	TypeString,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeType	spirv_common.hpp	/^	TypeType,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeUndef	spirv_common.hpp	/^	TypeUndef,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypeUnpackUint64	spirv_hlsl.hpp	/^		TypeUnpackUint64$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerHLSL::BitcastType
TypeVariable	spirv_common.hpp	/^	TypeVariable,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::Types
TypedID	spirv_common.hpp	/^	TypedID(const TypedID<U> &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
TypedID	spirv_common.hpp	/^	TypedID(uint32_t id_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
TypedID	spirv_common.hpp	/^	explicit TypedID(const TypedID<TypeNone> &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
TypedID	spirv_common.hpp	/^class TypedID$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
TypedID	spirv_common.hpp	/^class TypedID<TypeNone>$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Types	spirv_common.hpp	/^enum Types$/;"	g	namespace:SPIRV_CROSS_NAMESPACE
UByte	spirv_common.hpp	/^		UByte,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
UInt	spirv_common.hpp	/^		UInt,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
UInt16	spirv_msl.hpp	/^			UInt16 = 1,$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
UInt32	spirv_msl.hpp	/^			UInt32 = 2$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
UInt64	spirv_common.hpp	/^		UInt64,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
UShort	spirv_common.hpp	/^		UShort,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
Unknown	spirv_common.hpp	/^		Unknown,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
Unknown	spirv_common.hpp	/^		Unknown,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
Unorm	spirv_hlsl.cpp	/^	Unorm = 1,$/;"	m	class:ImageFormatNormalizedState	file:
Unreachable	spirv_common.hpp	/^		Unreachable, \/\/ Noop$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::Terminator
Unsupported	spirv_common.hpp	/^		Unsupported,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::Extension
ValueSaver	spirv_common.hpp	/^	explicit ValueSaver(T &current_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::ValueSaver
ValueSaver	spirv_common.hpp	/^struct ValueSaver$/;"	s	namespace:SPIRV_CROSS_NAMESPACE
VariableTypeRemap	main.cpp	/^struct VariableTypeRemap$/;"	s	file:
Variant	spirv_common.hpp	/^	explicit Variant(ObjectPoolGroup *group_)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
Variant	spirv_common.hpp	/^class Variant$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
VectorView	spirv_cross_containers.hpp	/^class VectorView$/;"	c	namespace:SPIRV_CROSS_NAMESPACE
Version	spirv.hpp	/^static const unsigned int Version = 0x00010600;$/;"	m	namespace:spv
VertexOptions	spirv_glsl.hpp	/^		struct VertexOptions$/;"	s	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
VisitOrder	spirv_cfg.hpp	/^	struct VisitOrder$/;"	s	class:SPIRV_CROSS_NAMESPACE::CFG
Void	spirv_common.hpp	/^		Void,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::BaseType
WhileLoop	spirv_common.hpp	/^		WhileLoop,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::ContinueBlockType
WordCountShift	spirv.hpp	/^static const unsigned int WordCountShift = 16;$/;"	m	namespace:spv
WorkgroupSize	spirv_common.hpp	/^	struct WorkgroupSize$/;"	s	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
acceleration_structures	spirv_cross.hpp	/^	SmallVector<Resource> acceleration_structures;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
acceleration_structures	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> acceleration_structures;$/;"	m	struct:spvc_resources_s	file:
access	spirv_common.hpp	/^		spv::AccessQualifier access;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
access_chain	spirv_common.hpp	/^	bool access_chain = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
access_chain	spirv_glsl.cpp	/^string CompilerGLSL::access_chain(uint32_t base, const uint32_t *indices, uint32_t count, const SPIRType &target_type,$/;"	f	class:CompilerGLSL
access_chain_children	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> access_chain_children;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
access_chain_expressions	spirv_cross.hpp	/^		std::unordered_set<uint32_t> access_chain_expressions;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
access_chain_internal	spirv_glsl.cpp	/^string CompilerGLSL::access_chain_internal(uint32_t base, const uint32_t *indices, uint32_t count,$/;"	f	class:CompilerGLSL
access_chain_internal_append_index	spirv_glsl.cpp	/^void CompilerGLSL::access_chain_internal_append_index(std::string &expr, uint32_t \/*base*\/, const SPIRType * \/*type*\/,$/;"	f	class:CompilerGLSL
access_chain_needs_stage_io_builtin_translation	spirv_glsl.cpp	/^bool CompilerGLSL::access_chain_needs_stage_io_builtin_translation(uint32_t)$/;"	f	class:CompilerGLSL
access_chain_needs_stage_io_builtin_translation	spirv_msl.cpp	/^bool CompilerMSL::access_chain_needs_stage_io_builtin_translation(uint32_t base)$/;"	f	class:CompilerMSL
access_chain_to_physical_block	spirv_cross.hpp	/^		std::unordered_map<uint32_t, PhysicalBlockMeta *> access_chain_to_physical_block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalStorageBufferPointerHandler
access_potential_resource	spirv_cross.cpp	/^void Compiler::InterlockedResourceAccessHandler::access_potential_resource(uint32_t id)$/;"	f	class:Compiler::InterlockedResourceAccessHandler
accessed_temporaries_to_block	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> accessed_temporaries_to_block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
accessed_variables_to_block	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> accessed_variables_to_block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
activate_argument_buffer_resources	spirv_msl.cpp	/^void CompilerMSL::activate_argument_buffer_resources()$/;"	f	class:CompilerMSL
active	spirv_common.hpp	/^	bool active = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
active_input_builtins	spirv_cross.hpp	/^	Bitset active_input_builtins;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
active_interface_variables	spirv_cross.hpp	/^	std::unordered_set<VariableID> active_interface_variables;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
active_output_builtins	spirv_cross.hpp	/^	Bitset active_output_builtins;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
add	main.cpp	/^	void add(const char *cli, const function<void(CLIParser &)> &func)$/;"	f	struct:CLICallbacks
add_argument_buffer_padding_buffer_type	spirv_msl.cpp	/^void CompilerMSL::add_argument_buffer_padding_buffer_type(SPIRType &struct_type, uint32_t &mbr_idx,$/;"	f	class:CompilerMSL
add_argument_buffer_padding_image_type	spirv_msl.cpp	/^void CompilerMSL::add_argument_buffer_padding_image_type(SPIRType &struct_type, uint32_t &mbr_idx,$/;"	f	class:CompilerMSL
add_argument_buffer_padding_sampler_type	spirv_msl.cpp	/^void CompilerMSL::add_argument_buffer_padding_sampler_type(SPIRType &struct_type, uint32_t &mbr_idx,$/;"	f	class:CompilerMSL
add_argument_buffer_padding_type	spirv_msl.cpp	/^void CompilerMSL::add_argument_buffer_padding_type(uint32_t mbr_type_id, SPIRType &struct_type, uint32_t &mbr_idx,$/;"	f	class:CompilerMSL
add_block	spirv_cfg.cpp	/^void DominatorBuilder::add_block(uint32_t block)$/;"	f	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
add_branch	spirv_cfg.cpp	/^void CFG::add_branch(uint32_t from, uint32_t to)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
add_component_variable_to_interface_block	spirv_msl.cpp	/^bool CompilerMSL::add_component_variable_to_interface_block(spv::StorageClass storage, const std::string &ib_var_ref,$/;"	f	class:CompilerMSL
add_composite_member_variable_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_composite_member_variable_to_interface_block(StorageClass storage,$/;"	f	class:CompilerMSL
add_composite_variable_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_composite_variable_to_interface_block(StorageClass storage, const string &ib_var_ref,$/;"	f	class:CompilerMSL
add_dependency	spirv_cross.cpp	/^void Compiler::CombinedImageSamplerUsageHandler::add_dependency(uint32_t dst, uint32_t src)$/;"	f	class:Compiler::CombinedImageSamplerUsageHandler
add_discrete_descriptor_set	spirv_msl.cpp	/^void CompilerMSL::add_discrete_descriptor_set(uint32_t desc_set)$/;"	f	class:CompilerMSL
add_dynamic_buffer	spirv_msl.cpp	/^void CompilerMSL::add_dynamic_buffer(uint32_t desc_set, uint32_t binding, uint32_t index)$/;"	f	class:CompilerMSL
add_function_overload	spirv_glsl.cpp	/^void CompilerGLSL::add_function_overload(const SPIRFunction &func)$/;"	f	class:CompilerGLSL
add_header_line	spirv_glsl.cpp	/^void CompilerGLSL::add_header_line(const std::string &line)$/;"	f	class:CompilerGLSL
add_hierarchy_to_comparison_ids	spirv_cross.cpp	/^void Compiler::CombinedImageSamplerUsageHandler::add_hierarchy_to_comparison_ids(uint32_t id)$/;"	f	class:Compiler::CombinedImageSamplerUsageHandler
add_hlsl_resource_binding	spirv_hlsl.cpp	/^void CompilerHLSL::add_hlsl_resource_binding(const HLSLResourceBinding &binding)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
add_if_builtin	spirv_cross.cpp	/^void Compiler::ActiveBuiltinHandler::add_if_builtin(uint32_t id)$/;"	f	class:Compiler::ActiveBuiltinHandler
add_if_builtin	spirv_cross.cpp	/^void Compiler::ActiveBuiltinHandler::add_if_builtin(uint32_t id, bool allow_blocks)$/;"	f	class:Compiler::ActiveBuiltinHandler
add_if_builtin_or_block	spirv_cross.cpp	/^void Compiler::ActiveBuiltinHandler::add_if_builtin_or_block(uint32_t id)$/;"	f	class:Compiler::ActiveBuiltinHandler
add_implied_read_expression	spirv_cross.cpp	/^void Compiler::add_implied_read_expression(SPIRAccessChain &e, uint32_t source)$/;"	f	class:Compiler
add_implied_read_expression	spirv_cross.cpp	/^void Compiler::add_implied_read_expression(SPIRExpression &e, uint32_t source)$/;"	f	class:Compiler
add_inline_uniform_block	spirv_msl.cpp	/^void CompilerMSL::add_inline_uniform_block(uint32_t desc_set, uint32_t binding)$/;"	f	class:CompilerMSL
add_interface_block	spirv_msl.cpp	/^uint32_t CompilerMSL::add_interface_block(StorageClass storage, bool patch)$/;"	f	class:CompilerMSL
add_interface_block_pointer	spirv_msl.cpp	/^uint32_t CompilerMSL::add_interface_block_pointer(uint32_t ib_var_id, StorageClass storage)$/;"	f	class:CompilerMSL
add_local_variable	spirv_common.hpp	/^	void add_local_variable(VariableID id)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
add_local_variable_name	spirv_glsl.cpp	/^void CompilerGLSL::add_local_variable_name(uint32_t id)$/;"	f	class:CompilerGLSL
add_loop_level	spirv_cross.cpp	/^void Compiler::add_loop_level()$/;"	f	class:Compiler
add_member_name	spirv_glsl.cpp	/^void CompilerGLSL::add_member_name(SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
add_msl_resource_binding	spirv_msl.cpp	/^void CompilerMSL::add_msl_resource_binding(const MSLResourceBinding &binding)$/;"	f	class:CompilerMSL
add_msl_shader_input	spirv_msl.cpp	/^void CompilerMSL::add_msl_shader_input(const MSLShaderInput &si)$/;"	f	class:CompilerMSL
add_parameter	spirv_common.hpp	/^	void add_parameter(TypeID parameter_type, ID id, bool alias_global_variable = false)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
add_plain_member_variable_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_plain_member_variable_to_interface_block(StorageClass storage,$/;"	f	class:CompilerMSL
add_plain_variable_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_plain_variable_to_interface_block(StorageClass storage, const string &ib_var_ref,$/;"	f	class:CompilerMSL
add_pragma_line	spirv_msl.cpp	/^void CompilerMSL::add_pragma_line(const string &line)$/;"	f	class:CompilerMSL
add_resource_name	spirv_glsl.cpp	/^void CompilerGLSL::add_resource_name(uint32_t id)$/;"	f	class:CompilerGLSL
add_spv_func_and_recompile	spirv_msl.cpp	/^void CompilerMSL::add_spv_func_and_recompile(SPVFuncImpl spv_func)$/;"	f	class:CompilerMSL
add_tess_level_input_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_tess_level_input_to_interface_block(const std::string &ib_var_ref, SPIRType &ib_type,$/;"	f	class:CompilerMSL
add_typed_id	spirv_cross_parsed_ir.cpp	/^void ParsedIR::add_typed_id(Types type, ID id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
add_typedef_line	spirv_msl.cpp	/^void CompilerMSL::add_typedef_line(const string &line)$/;"	f	class:CompilerMSL
add_variable	spirv_glsl.cpp	/^void CompilerGLSL::add_variable(unordered_set<string> &variables_primary,$/;"	f	class:CompilerGLSL
add_variable_to_interface_block	spirv_msl.cpp	/^void CompilerMSL::add_variable_to_interface_block(StorageClass storage, const string &ib_var_ref, SPIRType &ib_type,$/;"	f	class:CompilerMSL
add_vertex_attribute_remap	spirv_hlsl.cpp	/^void CompilerHLSL::add_vertex_attribute_remap(const HLSLVertexAttributeRemap &vertex_attributes)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
added_builtin_tess_level	spirv_msl.hpp	/^	bool added_builtin_tess_level = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
additional_fixed_sample_mask	spirv_msl.hpp	/^		uint32_t additional_fixed_sample_mask = 0xffffffff;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
additional_fixed_sample_mask_str	spirv_msl.cpp	/^string CompilerMSL::additional_fixed_sample_mask_str() const$/;"	f	class:CompilerMSL
address_of_expression	spirv_glsl.cpp	/^string CompilerGLSL::address_of_expression(const std::string &expr)$/;"	f	class:CompilerGLSL
addressing_model	spirv_cross_parsed_ir.hpp	/^	spv::AddressingModel addressing_model = spv::AddressingModelMax;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
alias	spirv_common.hpp	/^		std::string alias;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
alias_global_variable	spirv_common.hpp	/^		bool alias_global_variable;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::Parameter
aliased_variables	spirv_cross.hpp	/^	SmallVector<uint32_t> aliased_variables;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
align_struct	spirv_msl.cpp	/^void CompilerMSL::align_struct(SPIRType &ib_type, unordered_set<uint32_t> &aligned_structs)$/;"	f	class:CompilerMSL
aligned_char	spirv_cross_containers.hpp	/^		char aligned_char[sizeof(T) * N];$/;"	m	union:SPIRV_CROSS_NAMESPACE::AlignedBuffer::__anon14
aligned_char	spirv_cross_containers.hpp	/^	alignas(T) char aligned_char[sizeof(T) * N];$/;"	m	class:SPIRV_CROSS_NAMESPACE::AlignedBuffer
alignment	spirv_cross.hpp	/^		uint32_t alignment = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalBlockMeta
allocate	spirv_cross_containers.hpp	/^	T *allocate(P &&... p)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ObjectPool
allocate_and_set	spirv_common.hpp	/^	T *allocate_and_set(Types new_type, Ts &&... ts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
allocate_name	spirv_cross_c.cpp	/^const char *spvc_context_s::allocate_name(const std::string &name)$/;"	f	class:spvc_context_s
allocate_temporary_copy	spirv_common.hpp	/^	bool allocate_temporary_copy = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
allocations	spirv_cross_c.cpp	/^	SmallVector<unique_ptr<ScratchMemoryAllocation>> allocations;$/;"	m	struct:spvc_context_s	file:
allow_local_declaration	spirv_msl.hpp	/^		bool allow_local_declaration = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta
allow_precision_qualifiers	spirv_glsl.hpp	/^		bool allow_precision_qualifiers = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
allow_truncated_access_chain	spirv_glsl.hpp	/^		bool allow_truncated_access_chain = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
allow_type_rewrite	spirv_common.hpp	/^	bool allow_type_rewrite = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Variant
analyze_argument_buffers	spirv_msl.cpp	/^void CompilerMSL::analyze_argument_buffers()$/;"	f	class:CompilerMSL
analyze_expression_precision	spirv_glsl.cpp	/^CompilerGLSL::Options::Precision CompilerGLSL::analyze_expression_precision(const uint32_t *args, uint32_t length) const$/;"	f	class:CompilerGLSL
analyze_image_and_sampler_usage	spirv_cross.cpp	/^void Compiler::analyze_image_and_sampler_usage()$/;"	f	class:Compiler
analyze_interlocked_resource_usage	spirv_cross.cpp	/^void Compiler::analyze_interlocked_resource_usage()$/;"	f	class:Compiler
analyze_non_block_pointer_types	spirv_cross.cpp	/^void Compiler::analyze_non_block_pointer_types()$/;"	f	class:Compiler
analyze_non_block_types_from_block	spirv_cross.cpp	/^void Compiler::PhysicalStorageBufferPointerHandler::analyze_non_block_types_from_block(const SPIRType &type)$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
analyze_parameter_preservation	spirv_cross.cpp	/^void Compiler::analyze_parameter_preservation($/;"	f	class:Compiler
analyze_precision_requirements	spirv_glsl.cpp	/^void CompilerGLSL::analyze_precision_requirements(uint32_t type_id, uint32_t dst_id, uint32_t *args, uint32_t length)$/;"	f	class:CompilerGLSL
analyze_sampled_image_usage	spirv_msl.cpp	/^void CompilerMSL::analyze_sampled_image_usage()$/;"	f	class:CompilerMSL
analyze_variable_scope	spirv_cross.cpp	/^void Compiler::analyze_variable_scope(SPIRFunction &entry, AnalyzeVariableScopeAccessHandler &handler)$/;"	f	class:Compiler
anisotropy_enable	spirv_cross_c.h	/^	spvc_bool anisotropy_enable;$/;"	m	struct:spvc_msl_constexpr_sampler
anisotropy_enable	spirv_msl.hpp	/^	bool anisotropy_enable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
append	spirv_cross_containers.hpp	/^	void append(const char *s, size_t len)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
append_global_func_args	spirv_glsl.cpp	/^void CompilerGLSL::append_global_func_args(const SPIRFunction &func, uint32_t index, SmallVector<string> &arglist)$/;"	f	class:CompilerGLSL
append_member_name	spirv_msl.cpp	/^string CompilerMSL::append_member_name(const string &qualifier, const SPIRType &type, uint32_t index)$/;"	f	class:CompilerMSL
argc	main.cpp	/^	int argc;$/;"	m	struct:CLIParser	file:
args_will_forward	spirv_glsl.cpp	/^bool CompilerGLSL::args_will_forward(uint32_t id, const uint32_t *args, uint32_t num_args, bool pure)$/;"	f	class:CompilerGLSL
argument_buffer_device_storage_mask	spirv_msl.hpp	/^	uint32_t argument_buffer_device_storage_mask = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffer_discrete_mask	spirv_msl.hpp	/^	uint32_t argument_buffer_discrete_mask = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffer_ids	spirv_msl.hpp	/^	uint32_t argument_buffer_ids[kMaxArgumentBuffers];$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffer_padding_buffer_type_id	spirv_msl.hpp	/^	uint32_t argument_buffer_padding_buffer_type_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffer_padding_image_type_id	spirv_msl.hpp	/^	uint32_t argument_buffer_padding_image_type_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffer_padding_sampler_type_id	spirv_msl.hpp	/^	uint32_t argument_buffer_padding_sampler_type_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
argument_buffers	spirv_msl.hpp	/^		bool argument_buffers = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
argument_decl	spirv_cpp.cpp	/^string CompilerCPP::argument_decl(const SPIRFunction::Parameter &arg)$/;"	f	class:CompilerCPP
argument_decl	spirv_glsl.cpp	/^string CompilerGLSL::argument_decl(const SPIRFunction::Parameter &arg)$/;"	f	class:CompilerGLSL
argument_decl	spirv_msl.cpp	/^string CompilerMSL::argument_decl(const SPIRFunction::Parameter &arg)$/;"	f	class:CompilerMSL
arguments	spirv_common.hpp	/^	SmallVector<Parameter> arguments;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
arguments	spirv_common.hpp	/^	SmallVector<uint32_t> arguments;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstantOp
argv	main.cpp	/^	char **argv;$/;"	m	struct:CLIParser	file:
array	spirv_common.hpp	/^	SmallVector<uint32_t> array;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
array_is_value_type	spirv_glsl.hpp	/^		bool array_is_value_type = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
array_is_value_type_in_buffer_blocks	spirv_glsl.hpp	/^		bool array_is_value_type_in_buffer_blocks = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
array_size_literal	spirv_common.hpp	/^	SmallVector<bool> array_size_literal;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
array_stride	spirv_common.hpp	/^		uint32_t array_stride = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
array_stride	spirv_common.hpp	/^	uint32_t array_stride = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
arrayed	spirv_common.hpp	/^		bool arrayed;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
arrayed_subpass_input	spirv_msl.hpp	/^		bool arrayed_subpass_input = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
atomic_counters	spirv_cross.hpp	/^	SmallVector<Resource> atomic_counters;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
atomic_counters	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> atomic_counters;$/;"	m	struct:spvc_resources_s	file:
atomic_image_vars	spirv_msl.hpp	/^	std::unordered_set<uint32_t> atomic_image_vars; \/\/ Emulate texture2D atomic operations$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
attempt_emit_loop_header	spirv_glsl.cpp	/^bool CompilerGLSL::attempt_emit_loop_header(SPIRBlock &block, SPIRBlock::Method method)$/;"	f	class:CompilerGLSL
backend	spirv_cross_c.cpp	/^	spvc_backend backend = SPVC_BACKEND_NONE;$/;"	m	struct:spvc_compiler_s	file:
backend	spirv_glsl.hpp	/^	} backend;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL	typeref:struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
backend_flags	spirv_cross_c.cpp	/^	uint32_t backend_flags = 0;$/;"	m	struct:spvc_compiler_options_s	file:
base	spirv_common.hpp	/^	std::string base;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
base	spirv_glsl.hpp	/^		TextureFunctionBaseArguments base;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
base	spirv_glsl.hpp	/^		TextureFunctionBaseArguments base;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
base_expression	spirv_common.hpp	/^	ID base_expression = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
base_type_id	spirv_cross.hpp	/^	TypeID base_type_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Resource
base_type_id	spirv_cross_c.h	/^	spvc_type_id base_type_id;$/;"	m	struct:spvc_reflected_resource
base_type_id	spirv_msl.hpp	/^			uint32_t base_type_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
basetype	spirv_common.hpp	/^	BaseType basetype = Unknown;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
basetype	spirv_common.hpp	/^	TypeID basetype = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
basetype	spirv_common.hpp	/^	TypeID basetype;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
basetype	spirv_common.hpp	/^	TypeID basetype;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstantOp
basetype	spirv_common.hpp	/^	TypeID basetype;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRUndef
basetype	spirv_msl.hpp	/^	SPIRType::BaseType basetype = SPIRType::Unknown;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
basevariable	spirv_common.hpp	/^	VariableID basevariable = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
basic_int16_type	spirv_glsl.hpp	/^		const char *basic_int16_type = "int16_t";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
basic_int8_type	spirv_glsl.hpp	/^		const char *basic_int8_type = "int8_t";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
basic_int_type	spirv_glsl.hpp	/^		const char *basic_int_type = "int";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
basic_uint16_type	spirv_glsl.hpp	/^		const char *basic_uint16_type = "uint16_t";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
basic_uint8_type	spirv_glsl.hpp	/^		const char *basic_uint8_type = "uint8_t";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
basic_uint_type	spirv_glsl.hpp	/^		const char *basic_uint_type = "uint";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
begin_function_scope	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerHandler::begin_function_scope(const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::CombinedImageSamplerHandler
begin_function_scope	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerUsageHandler::begin_function_scope(const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::CombinedImageSamplerUsageHandler
begin_function_scope	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessHandler::begin_function_scope(const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::InterlockedResourceAccessHandler
begin_function_scope	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessPrepassHandler::begin_function_scope(const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::InterlockedResourceAccessPrepassHandler
begin_function_scope	spirv_cross.hpp	/^		virtual bool begin_function_scope(const uint32_t *, uint32_t)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
begin_json_array	spirv_reflect.cpp	/^void Stream::begin_json_array()$/;"	f	class:Stream
begin_json_object	spirv_reflect.cpp	/^void Stream::begin_json_object()$/;"	f	class:Stream
begin_scope	spirv_glsl.cpp	/^void CompilerGLSL::begin_scope()$/;"	f	class:CompilerGLSL
bias	spirv_glsl.hpp	/^		uint32_t bias = 0, component = 0, sample = 0, sparse_texel = 0, min_lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
binary_op_bitcast_helper	spirv_glsl.cpp	/^SPIRType CompilerGLSL::binary_op_bitcast_helper(string &cast_op0, string &cast_op1, SPIRType::BaseType &input_type,$/;"	f	class:CompilerGLSL
binary_spec_op	spirv_cross.cpp	1867;"	d	file:
binary_spec_op	spirv_cross.cpp	1902;"	d	file:
binary_spec_op_cast	spirv_cross.cpp	1871;"	d	file:
binary_spec_op_cast	spirv_cross.cpp	1903;"	d	file:
binding	spirv_common.hpp	/^		uint32_t binding = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
binding	spirv_common.hpp	/^	uint32_t binding;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SetBindingPair
binding	spirv_common.hpp	/^	uint32_t binding;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StageSetBinding
binding	spirv_cross_c.h	/^	unsigned binding;$/;"	m	struct:spvc_hlsl_resource_binding
binding	spirv_cross_c.h	/^	unsigned binding;$/;"	m	struct:spvc_hlsl_root_constants
binding	spirv_cross_c.h	/^	unsigned binding;$/;"	m	struct:spvc_msl_resource_binding
binding	spirv_hlsl.hpp	/^	uint32_t binding = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding
binding	spirv_hlsl.hpp	/^	uint32_t binding;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::RootConstants
binding	spirv_msl.hpp	/^	uint32_t binding = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
bitcast_expression	spirv_glsl.cpp	/^std::string CompilerGLSL::bitcast_expression(SPIRType::BaseType target_type, uint32_t arg)$/;"	f	class:CompilerGLSL
bitcast_expression	spirv_glsl.cpp	/^std::string CompilerGLSL::bitcast_expression(const SPIRType &target_type, SPIRType::BaseType expr_type,$/;"	f	class:CompilerGLSL
bitcast_glsl	spirv_glsl.cpp	/^string CompilerGLSL::bitcast_glsl(const SPIRType &result_type, uint32_t argument)$/;"	f	class:CompilerGLSL
bitcast_glsl_op	spirv_glsl.cpp	/^string CompilerGLSL::bitcast_glsl_op(const SPIRType &out_type, const SPIRType &in_type)$/;"	f	class:CompilerGLSL
bitcast_glsl_op	spirv_hlsl.cpp	/^string CompilerHLSL::bitcast_glsl_op(const SPIRType &out_type, const SPIRType &in_type)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
bitcast_glsl_op	spirv_msl.cpp	/^string CompilerMSL::bitcast_glsl_op(const SPIRType &out_type, const SPIRType &in_type)$/;"	f	class:CompilerMSL
block	spirv_common.hpp	/^		BlockID block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock::Case
block_input_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> block_input_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
block_is_loop_candidate	spirv_cross.cpp	/^bool Compiler::block_is_loop_candidate(const SPIRBlock &block, SPIRBlock::Method method) const$/;"	f	class:Compiler
block_is_pure	spirv_cross.cpp	/^bool Compiler::block_is_pure(const SPIRBlock &block)$/;"	f	class:Compiler
block_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> block_names; \/\/ A union of all block_*_names.$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
block_output_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> block_output_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
block_ssbo_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> block_ssbo_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
block_temporary_hoisting	spirv_glsl.hpp	/^	bool block_temporary_hoisting = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
block_ubo_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> block_ubo_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
blocks	spirv_common.hpp	/^	SmallVector<BlockID> blocks;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
boolean_mix_function	spirv_glsl.hpp	/^		const char *boolean_mix_function = "mix";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
border_color	spirv_cross_c.h	/^	spvc_msl_sampler_border_color border_color;$/;"	m	struct:spvc_msl_constexpr_sampler
border_color	spirv_msl.hpp	/^	MSLSamplerBorderColor border_color = MSL_SAMPLER_BORDER_COLOR_TRANSPARENT_BLACK;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
bpc	spirv_cross_c.h	/^	unsigned bpc;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
bpc	spirv_msl.hpp	/^	uint32_t bpc = 8;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
branch	spirv_glsl.cpp	/^void CompilerGLSL::branch(BlockID from, BlockID to)$/;"	f	class:CompilerGLSL
branch	spirv_glsl.cpp	/^void CompilerGLSL::branch(BlockID from, uint32_t cond, BlockID true_block, BlockID false_block)$/;"	f	class:CompilerGLSL
branch_to_continue	spirv_glsl.cpp	/^void CompilerGLSL::branch_to_continue(BlockID from, BlockID to)$/;"	f	class:CompilerGLSL
buffer	spirv_cross_c.cpp	/^	SmallVector<T> buffer;$/;"	m	struct:TemporaryBuffer	file:
buffer	spirv_cross_containers.hpp	/^		char *buffer = nullptr;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StringStream::Buffer
buffer	spirv_glsl.hpp	/^	StringStream<> buffer;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
buffer	spirv_reflect.cpp	/^	StringStream<> buffer;$/;"	m	class:simple_json::Stream	file:
buffer_arrays	spirv_msl.hpp	/^	SmallVector<uint32_t> buffer_arrays;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
buffer_capacity	spirv_cross_containers.hpp	/^	size_t buffer_capacity = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::SmallVector
buffer_get_hlsl_counter_buffer	spirv_cross.cpp	/^bool Compiler::buffer_get_hlsl_counter_buffer(VariableID id, uint32_t &counter_id) const$/;"	f	class:Compiler
buffer_is_hlsl_counter_buffer	spirv_cross.cpp	/^bool Compiler::buffer_is_hlsl_counter_buffer(VariableID id) const$/;"	f	class:Compiler
buffer_is_packing_standard	spirv_glsl.cpp	/^bool CompilerGLSL::buffer_is_packing_standard(const SPIRType &type, BufferPackingStandard packing,$/;"	f	class:CompilerGLSL
buffer_size	spirv_cross_containers.hpp	/^	size_t buffer_size = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::VectorView
buffer_size_buffer_id	spirv_msl.hpp	/^	uint32_t buffer_size_buffer_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
buffer_size_buffer_index	spirv_msl.hpp	/^		uint32_t buffer_size_buffer_index = 25;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
buffer_size_name_suffix	spirv_msl.hpp	/^	std::string buffer_size_name_suffix = "BufferSize";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
buffer_to_packing_standard	spirv_glsl.cpp	/^string CompilerGLSL::buffer_to_packing_standard(const SPIRType &type, bool support_std430_without_scalar_layout)$/;"	f	class:CompilerGLSL
buffers_requiring_array_length	spirv_msl.hpp	/^	std::unordered_set<uint32_t> buffers_requiring_array_length;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
buffers_requiring_dynamic_offset	spirv_msl.hpp	/^	std::map<SetBindingPair, std::pair<uint32_t, uint32_t>> buffers_requiring_dynamic_offset;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
build_combined_image_samplers	spirv_cross.cpp	/^void Compiler::build_combined_image_samplers()$/;"	f	class:Compiler
build_composite_combiner	spirv_glsl.cpp	/^string CompilerGLSL::build_composite_combiner(uint32_t return_type, const uint32_t *elems, uint32_t length)$/;"	f	class:CompilerGLSL
build_constant_uint_array_pointer	spirv_msl.cpp	/^uint32_t CompilerMSL::build_constant_uint_array_pointer()$/;"	f	class:CompilerMSL
build_dummy_sampler_for_combined_images	spirv_cross.cpp	/^VariableID Compiler::build_dummy_sampler_for_combined_images()$/;"	f	class:Compiler
build_extended_vector_type	spirv_msl.cpp	/^uint32_t CompilerMSL::build_extended_vector_type(uint32_t type_id, uint32_t components, SPIRType::BaseType basetype)$/;"	f	class:CompilerMSL
build_function_control_flow_graphs_and_analyze	spirv_cross.cpp	/^void Compiler::build_function_control_flow_graphs_and_analyze()$/;"	f	class:Compiler
build_immediate_dominators	spirv_cfg.cpp	/^void CFG::build_immediate_dominators()$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
build_implicit_builtins	spirv_msl.cpp	/^void CompilerMSL::build_implicit_builtins()$/;"	f	class:CompilerMSL
build_mask	spirv_glsl.cpp	/^CompilerGLSL::ShaderSubgroupSupportHelper::FeatureMask CompilerGLSL::ShaderSubgroupSupportHelper::build_mask($/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
build_msl_interpolant_type	spirv_msl.cpp	/^uint32_t CompilerMSL::build_msl_interpolant_type(uint32_t type_id, bool is_noperspective)$/;"	f	class:CompilerMSL
build_post_order_visit_order	spirv_cfg.cpp	/^void CFG::build_post_order_visit_order()$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
build_workgroup_size	spirv_glsl.cpp	/^void CompilerGLSL::build_workgroup_size(SmallVector<string> &arguments, const SpecializationConstant &wg_x,$/;"	f	class:CompilerGLSL
built_in_func_arg	spirv_msl.cpp	/^string CompilerMSL::built_in_func_arg(BuiltIn builtin, bool prefix_comma)$/;"	f	class:CompilerMSL
builtin	spirv_common.hpp	/^		bool builtin = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
builtin	spirv_cross.hpp	/^	spv::BuiltIn builtin;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BuiltInResource
builtin	spirv_cross_c.h	/^	SpvBuiltIn builtin;$/;"	m	struct:spvc_msl_shader_input
builtin	spirv_cross_c.h	/^	SpvBuiltIn builtin;$/;"	m	struct:spvc_msl_vertex_attribute
builtin	spirv_cross_c.h	/^	SpvBuiltIn builtin;$/;"	m	struct:spvc_reflected_builtin_resource
builtin	spirv_msl.hpp	/^	spv::BuiltIn builtin = spv::BuiltInMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLShaderInput
builtin_base_instance_id	spirv_msl.hpp	/^	uint32_t builtin_base_instance_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_base_vertex_id	spirv_msl.hpp	/^	uint32_t builtin_base_vertex_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_declaration	spirv_msl.hpp	/^	bool builtin_declaration = false; \/\/ Handle HLSL-style 0-based vertex\/instance index.$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_dispatch_base_id	spirv_msl.hpp	/^	uint32_t builtin_dispatch_base_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_frag_coord_id	spirv_msl.hpp	/^	uint32_t builtin_frag_coord_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_inputs	spirv_cross.hpp	/^	SmallVector<BuiltInResource> builtin_inputs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
builtin_inputs	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_builtin_resource> builtin_inputs;$/;"	m	struct:spvc_resources_s	file:
builtin_instance_idx_id	spirv_msl.hpp	/^	uint32_t builtin_instance_idx_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_invocation_id_id	spirv_msl.hpp	/^	uint32_t builtin_invocation_id_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_layer_id	spirv_msl.hpp	/^	uint32_t builtin_layer_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_local_invocation_index_id	spirv_msl.hpp	/^	uint32_t builtin_local_invocation_index_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_outputs	spirv_cross.hpp	/^	SmallVector<BuiltInResource> builtin_outputs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
builtin_outputs	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_builtin_resource> builtin_outputs;$/;"	m	struct:spvc_resources_s	file:
builtin_primitive_id_id	spirv_msl.hpp	/^	uint32_t builtin_primitive_id_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_qualifier	spirv_msl.cpp	/^string CompilerMSL::builtin_qualifier(BuiltIn builtin)$/;"	f	class:CompilerMSL
builtin_sample_id_id	spirv_msl.hpp	/^	uint32_t builtin_sample_id_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_sample_mask_id	spirv_msl.hpp	/^	uint32_t builtin_sample_mask_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_stage_input_size_id	spirv_msl.hpp	/^	uint32_t builtin_stage_input_size_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_subgroup_invocation_id_id	spirv_msl.hpp	/^	uint32_t builtin_subgroup_invocation_id_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_subgroup_size_id	spirv_msl.hpp	/^	uint32_t builtin_subgroup_size_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_to_automatic_input_location	spirv_msl.hpp	/^	std::unordered_map<uint32_t, uint32_t> builtin_to_automatic_input_location;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_to_glsl	spirv_glsl.cpp	/^string CompilerGLSL::builtin_to_glsl(BuiltIn builtin, StorageClass storage)$/;"	f	class:CompilerGLSL
builtin_to_glsl	spirv_hlsl.cpp	/^std::string CompilerHLSL::builtin_to_glsl(spv::BuiltIn builtin, spv::StorageClass storage)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
builtin_to_glsl	spirv_msl.cpp	/^string CompilerMSL::builtin_to_glsl(BuiltIn builtin, StorageClass storage)$/;"	f	class:CompilerMSL
builtin_translates_to_nonarray	spirv_glsl.cpp	/^bool CompilerGLSL::builtin_translates_to_nonarray(spv::BuiltIn \/*builtin*\/) const$/;"	f	class:CompilerGLSL
builtin_translates_to_nonarray	spirv_hlsl.cpp	/^bool CompilerHLSL::builtin_translates_to_nonarray(spv::BuiltIn builtin) const$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
builtin_translates_to_nonarray	spirv_msl.cpp	/^bool CompilerMSL::builtin_translates_to_nonarray(spv::BuiltIn builtin) const$/;"	f	class:CompilerMSL
builtin_type	spirv_common.hpp	/^		spv::BuiltIn builtin_type = spv::BuiltInMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
builtin_type_decl	spirv_msl.cpp	/^string CompilerMSL::builtin_type_decl(BuiltIn builtin, uint32_t id)$/;"	f	class:CompilerMSL
builtin_vertex_idx_id	spirv_msl.hpp	/^	uint32_t builtin_vertex_idx_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_view_idx_id	spirv_msl.hpp	/^	uint32_t builtin_view_idx_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
builtin_workgroup_size_id	spirv_msl.hpp	/^	uint32_t builtin_workgroup_size_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
c	spirv_common.hpp	/^		ConstantVector c[4];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantMatrix
call_stack	spirv_cross.hpp	/^		SmallVector<uint32_t> call_stack;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
call_stack	spirv_cross.hpp	/^		SmallVector<uint32_t> call_stack;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
call_stack_is_interlocked	spirv_cross.hpp	/^		bool call_stack_is_interlocked = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
callback	spirv_cross_c.cpp	/^	spvc_error_callback callback = nullptr;$/;"	m	struct:spvc_context_s	file:
callback_userdata	spirv_cross_c.cpp	/^	void *callback_userdata = nullptr;$/;"	m	struct:spvc_context_s	file:
callbacks	main.cpp	/^	unordered_map<string, function<void(CLIParser &)>> callbacks;$/;"	m	struct:CLICallbacks	file:
can_declare_arrays_inline	spirv_glsl.hpp	/^		bool can_declare_arrays_inline = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
can_declare_struct_inline	spirv_glsl.hpp	/^		bool can_declare_struct_inline = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
can_feature_be_implemented_without_extensions	spirv_glsl.cpp	/^bool CompilerGLSL::ShaderSubgroupSupportHelper::can_feature_be_implemented_without_extensions(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
can_return_array	spirv_glsl.hpp	/^		bool can_return_array = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
can_swizzle_scalar	spirv_glsl.hpp	/^		bool can_swizzle_scalar = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
can_use_io_location	spirv_glsl.cpp	/^bool CompilerGLSL::can_use_io_location(StorageClass storage, bool block)$/;"	f	class:CompilerGLSL
capture_output_to_buffer	spirv_msl.hpp	/^		bool capture_output_to_buffer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
capture_output_to_buffer	spirv_msl.hpp	/^	bool capture_output_to_buffer = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
cases_32bit	spirv_common.hpp	/^	SmallVector<Case> cases_32bit;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
cases_64bit	spirv_common.hpp	/^	SmallVector<Case> cases_64bit;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
cast_from_variable_load	spirv_glsl.cpp	/^void CompilerGLSL::cast_from_variable_load(uint32_t source_id, std::string &expr, const SPIRType &expr_type)$/;"	f	class:CompilerGLSL
cast_from_variable_load	spirv_msl.cpp	/^void CompilerMSL::cast_from_variable_load(uint32_t source_id, std::string &expr, const SPIRType &expr_type)$/;"	f	class:CompilerMSL
cast_to_variable_store	spirv_glsl.cpp	/^void CompilerGLSL::cast_to_variable_store(uint32_t target_id, std::string &expr, const SPIRType &expr_type)$/;"	f	class:CompilerGLSL
cast_to_variable_store	spirv_msl.cpp	/^void CompilerMSL::cast_to_variable_store(uint32_t target_id, std::string &expr, const SPIRType &expr_type)$/;"	f	class:CompilerMSL
cbs	main.cpp	/^	CLICallbacks cbs;$/;"	m	struct:CLIParser	file:
cbv	spirv_cross_c.h	/^	spvc_hlsl_resource_binding_mapping cbv, uav, srv, sampler;$/;"	m	struct:spvc_hlsl_resource_binding
cbv	spirv_hlsl.hpp	/^	} cbv, uav, srv, sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding	typeref:struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
centroid	spirv_msl.hpp	/^			bool centroid = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
cfg	spirv_cfg.hpp	/^	const CFG &cfg;$/;"	m	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
check_active_interface_variables	spirv_cross.hpp	/^	bool check_active_interface_variables = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
check_atomic_image	spirv_glsl.cpp	/^bool CompilerGLSL::check_atomic_image(uint32_t id)$/;"	f	class:CompilerGLSL
check_function_call_constraints	spirv_glsl.cpp	/^void CompilerGLSL::check_function_call_constraints(const uint32_t *args, uint32_t length)$/;"	f	class:CompilerGLSL
check_resource_write	spirv_msl.cpp	/^void CompilerMSL::OpCodePreprocessor::check_resource_write(uint32_t var_id)$/;"	f	class:CompilerMSL::OpCodePreprocessor
chroma_filter	spirv_cross_c.h	/^	spvc_msl_sampler_filter chroma_filter;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
chroma_filter	spirv_msl.hpp	/^	MSLSamplerFilter chroma_filter = MSL_SAMPLER_FILTER_NEAREST;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
clear	spirv_common.hpp	/^	inline void clear(uint32_t bit)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
clear	spirv_cross_containers.hpp	/^	void clear()$/;"	f	class:SPIRV_CROSS_NAMESPACE::ObjectPool
clear_force_recompile	spirv_cross.cpp	/^void Compiler::clear_force_recompile()$/;"	f	class:Compiler
cleared_bitset	spirv_cross_parsed_ir.hpp	/^	Bitset cleared_bitset;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
clip_distance_count	spirv_cross.hpp	/^	uint32_t clip_distance_count = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
coffset	spirv_glsl.hpp	/^		uint32_t grad_x = 0, grad_y = 0, lod = 0, coffset = 0, offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
columns	spirv_common.hpp	/^		uint32_t columns = 1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantMatrix
columns	spirv_common.hpp	/^	inline uint32_t columns() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
columns	spirv_common.hpp	/^	uint32_t columns = 1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
combined_decoration_for_member	spirv_cross.cpp	/^Bitset Compiler::combined_decoration_for_member(const SPIRType &type, uint32_t index) const$/;"	f	class:Compiler
combined_id	spirv_cross.hpp	/^	VariableID combined_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CombinedImageSampler
combined_id	spirv_cross_c.h	/^	spvc_variable_id combined_id;$/;"	m	struct:spvc_combined_image_sampler
combined_image_samplers	spirv_cross.hpp	/^	SmallVector<CombinedImageSampler> combined_image_samplers;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
combined_parameters	spirv_common.hpp	/^	SmallVector<CombinedImageSamplerParameter> combined_parameters;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
combined_samplers_inherit_bindings	main.cpp	/^	bool combined_samplers_inherit_bindings = false;$/;"	m	struct:CLIArguments	file:
combined_type	spirv_common.hpp	/^	TypeID combined_type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRCombinedImageSampler
compare_enable	spirv_cross_c.h	/^	spvc_bool compare_enable;$/;"	m	struct:spvc_msl_constexpr_sampler
compare_enable	spirv_msl.hpp	/^	bool compare_enable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
compare_func	spirv_cross_c.h	/^	spvc_msl_sampler_compare_func compare_func;$/;"	m	struct:spvc_msl_constexpr_sampler
compare_func	spirv_msl.hpp	/^	MSLSamplerCompareFunc compare_func = MSL_SAMPLER_COMPARE_FUNC_NEVER;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
comparison_ids	spirv_cross.hpp	/^		std::unordered_set<uint32_t> comparison_ids;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
comparison_ids	spirv_cross.hpp	/^	std::unordered_set<uint32_t> comparison_ids;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
comparison_image_samples_scalar	spirv_glsl.hpp	/^		bool comparison_image_samples_scalar = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
compat_builtin	spirv_common.hpp	/^	bool compat_builtin = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
compile	spirv_cpp.cpp	/^string CompilerCPP::compile()$/;"	f	class:CompilerCPP
compile	spirv_cross.cpp	/^string Compiler::compile()$/;"	f	class:Compiler
compile	spirv_glsl.cpp	/^string CompilerGLSL::compile()$/;"	f	class:CompilerGLSL
compile	spirv_hlsl.cpp	/^string CompilerHLSL::compile()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
compile	spirv_msl.cpp	/^string CompilerMSL::compile()$/;"	f	class:CompilerMSL
compile	spirv_reflect.cpp	/^string CompilerReflection::compile()$/;"	f	class:CompilerReflection
compile_iteration	main.cpp	/^static string compile_iteration(const CLIArguments &args, std::vector<uint32_t> spirv_file)$/;"	f	file:
compiler	spirv_cfg.hpp	/^	Compiler &compiler;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::ActiveBuiltinHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CFGBuilder
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerDrefHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::DummySamplerForCombinedImageHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalStorageBufferPointerHandler
compiler	spirv_cross.hpp	/^		Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
compiler	spirv_cross.hpp	/^		const Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
compiler	spirv_cross.hpp	/^		const Compiler &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterfaceVariableAccessHandler
compiler	spirv_cross_c.cpp	/^	unique_ptr<Compiler> compiler;$/;"	m	struct:spvc_compiler_s	file:
compiler	spirv_msl.hpp	/^		CompilerMSL &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
compiler	spirv_msl.hpp	/^		CompilerMSL &compiler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::SampledImageScanner
complete_write_variables_to_block	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> complete_write_variables_to_block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
complex_continue	spirv_common.hpp	/^	bool complex_continue = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
component	spirv_common.hpp	/^		uint32_t component = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
component	spirv_common.hpp	/^	uint32_t component;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::LocationComponentPair
component	spirv_glsl.hpp	/^		uint32_t bias = 0, component = 0, sample = 0, sparse_texel = 0, min_lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
component	spirv_msl.hpp	/^	uint32_t component = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLShaderInput
components	main.cpp	/^	unsigned components;$/;"	m	struct:Remap	file:
composite_selection_workaround_types	spirv_hlsl.hpp	/^	std::vector<TypeID> composite_selection_workaround_types;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
condition	spirv_common.hpp	/^	ID condition = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
constant	spirv_common.hpp	/^		uint32_t constant = 0; \/\/ Workgroup size can be expressed as a constant\/spec-constant instead.$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
constant_arrays_needed_on_stack	spirv_common.hpp	/^	SmallVector<ID> constant_arrays_needed_on_stack;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
constant_expression	spirv_glsl.cpp	/^string CompilerGLSL::constant_expression(const SPIRConstant &c, bool inside_block_like_struct_scope)$/;"	f	class:CompilerGLSL
constant_expression_vector	spirv_glsl.cpp	/^string CompilerGLSL::constant_expression_vector(const SPIRConstant &c, uint32_t vector)$/;"	f	class:CompilerGLSL
constant_id	spirv_cross.hpp	/^	uint32_t constant_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SpecializationConstant
constant_id	spirv_cross_c.h	/^	unsigned constant_id;$/;"	m	struct:spvc_specialization_constant
constant_is_null	spirv_common.hpp	/^	inline bool constant_is_null() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
constant_op_expression	spirv_glsl.cpp	/^string CompilerGLSL::constant_op_expression(const SPIRConstantOp &cop)$/;"	f	class:CompilerGLSL
constant_op_expression	spirv_msl.cpp	/^string CompilerMSL::constant_op_expression(const SPIRConstantOp &cop)$/;"	f	class:CompilerMSL
constant_type	spirv_common.hpp	/^	TypeID constant_type = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
constant_value_macro_name	spirv_glsl.cpp	/^string CompilerGLSL::constant_value_macro_name(uint32_t id)$/;"	f	class:CompilerGLSL
constexpr_samplers_by_binding	spirv_msl.hpp	/^	std::unordered_map<SetBindingPair, MSLConstexprSampler, InternalHasher> constexpr_samplers_by_binding;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
constexpr_samplers_by_id	spirv_msl.hpp	/^	std::map<uint32_t, MSLConstexprSampler> constexpr_samplers_by_id;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
consume_temporary_in_precision_context	spirv_glsl.cpp	/^uint32_t CompilerGLSL::consume_temporary_in_precision_context(uint32_t type_id, uint32_t id, Options::Precision precision)$/;"	f	class:CompilerGLSL
context	spirv_cross_c.cpp	/^	spvc_context context = nullptr;$/;"	m	struct:spvc_compiler_options_s	file:
context	spirv_cross_c.cpp	/^	spvc_context context = nullptr;$/;"	m	struct:spvc_compiler_s	file:
context	spirv_cross_c.cpp	/^	spvc_context context = nullptr;$/;"	m	struct:spvc_parsed_ir_s	file:
context	spirv_cross_c.cpp	/^	spvc_context context = nullptr;$/;"	m	struct:spvc_resources_s	file:
continue_block	spirv_common.hpp	/^	BlockID continue_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
continue_block_to_loop_header	spirv_cross_parsed_ir.hpp	/^	std::unordered_map<BlockID, BlockID> continue_block_to_loop_header;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
continue_block_type	spirv_cross.cpp	/^SPIRBlock::ContinueBlockType Compiler::continue_block_type(const SPIRBlock &block) const$/;"	f	class:Compiler
control_flow_interlock	spirv_cross.hpp	/^		bool control_flow_interlock = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
control_flow_interlock	spirv_cross.hpp	/^		bool control_flow_interlock = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
convert_basetype	spirv_cross_c.cpp	/^static spvc_basetype convert_basetype(SPIRType::BaseType type)$/;"	f	file:
convert_double_to_string	spirv_glsl.cpp	/^std::string CompilerGLSL::convert_double_to_string(const SPIRConstant &c, uint32_t col, uint32_t row)$/;"	f	class:CompilerGLSL
convert_float_to_string	spirv_glsl.cpp	/^string CompilerGLSL::convert_float_to_string(const SPIRConstant &c, uint32_t col, uint32_t row)$/;"	f	class:CompilerGLSL
convert_half_to_string	spirv_glsl.cpp	/^string CompilerGLSL::convert_half_to_string(const SPIRConstant &c, uint32_t col, uint32_t row)$/;"	f	class:CompilerGLSL
convert_non_uniform_expression	spirv_glsl.cpp	/^void CompilerGLSL::convert_non_uniform_expression(string &expr, uint32_t ptr_id)$/;"	f	class:CompilerGLSL
convert_row_major_matrix	spirv_glsl.cpp	/^string CompilerGLSL::convert_row_major_matrix(string exp_str, const SPIRType &exp_type, uint32_t \/* physical_type_id *\/,$/;"	f	class:CompilerGLSL
convert_row_major_matrix	spirv_msl.cpp	/^string CompilerMSL::convert_row_major_matrix(string exp_str, const SPIRType &exp_type, uint32_t physical_type_id,$/;"	f	class:CompilerMSL
convert_separate_image_to_expression	spirv_glsl.cpp	/^std::string CompilerGLSL::convert_separate_image_to_expression(uint32_t id)$/;"	f	class:CompilerGLSL
convert_to_f32	spirv_msl.cpp	/^string CompilerMSL::convert_to_f32(const string &expr, uint32_t components)$/;"	f	class:CompilerMSL
convert_to_string	spirv_common.hpp	/^inline std::string convert_to_string(const T &t)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
convert_to_string	spirv_common.hpp	/^inline std::string convert_to_string(double t, char locale_radix_point)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
convert_to_string	spirv_common.hpp	/^inline std::string convert_to_string(float t, char locale_radix_point)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
convert_to_string	spirv_common.hpp	/^static inline std::string convert_to_string(int32_t value)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
convert_to_string	spirv_common.hpp	/^static inline std::string convert_to_string(int64_t value, const std::string &int64_type, bool long_long_literal_suffix)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
coord	spirv_cross_c.h	/^	spvc_msl_sampler_coord coord;$/;"	m	struct:spvc_msl_constexpr_sampler
coord	spirv_glsl.hpp	/^		uint32_t coord = 0, coord_components = 0, dref = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
coord	spirv_msl.hpp	/^	MSLSamplerCoord coord = MSL_SAMPLER_COORD_NORMALIZED;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
coord_components	spirv_glsl.hpp	/^		uint32_t coord = 0, coord_components = 0, dref = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
copy_resources	spirv_cross_c.cpp	/^bool spvc_resources_s::copy_resources(SmallVector<spvc_reflected_builtin_resource> &outputs,$/;"	f	class:spvc_resources_s
copy_resources	spirv_cross_c.cpp	/^bool spvc_resources_s::copy_resources(SmallVector<spvc_reflected_resource> &outputs,$/;"	f	class:spvc_resources_s
copy_resources	spirv_cross_c.cpp	/^bool spvc_resources_s::copy_resources(const ShaderResources &resources)$/;"	f	class:spvc_resources_s
count	spirv_common.hpp	/^	uint16_t count = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Instruction
count	spirv_msl.hpp	/^	uint32_t count = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
cpp	main.cpp	/^	bool cpp = false;$/;"	m	struct:CLIArguments	file:
cpp_interface_name	main.cpp	/^	const char *cpp_interface_name = nullptr;$/;"	m	struct:CLIArguments	file:
create_loop_hard_lock	spirv_cross_parsed_ir.cpp	/^ParsedIR::LoopLock ParsedIR::create_loop_hard_lock() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
create_loop_soft_lock	spirv_cross_parsed_ir.cpp	/^ParsedIR::LoopLock ParsedIR::create_loop_soft_lock() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
create_sampler_address	spirv_msl.cpp	/^static string create_sampler_address(const char *prefix, MSLSamplerAddress addr)$/;"	f	file:
create_swizzle	spirv_msl.cpp	/^static string create_swizzle(MSLComponentSwizzle swizzle)$/;"	f	file:
cull_distance_count	spirv_cross.hpp	/^	uint32_t cull_distance_count = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
current	spirv_common.hpp	/^	T &current;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ValueSaver
current_block	spirv_cross.hpp	/^		const SPIRBlock *current_block = nullptr;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
current_block	spirv_cross.hpp	/^	SPIRBlock *current_block = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
current_block	spirv_parser.hpp	/^	SPIRBlock *current_block = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Parser
current_block_id	spirv_cross.hpp	/^		uint32_t current_block_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
current_buffer	spirv_cross_containers.hpp	/^	Buffer current_buffer;$/;"	m	class:SPIRV_CROSS_NAMESPACE::StringStream
current_continue_block	spirv_glsl.hpp	/^	const SPIRBlock *current_continue_block = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
current_emitting_block	spirv_glsl.hpp	/^	SPIRBlock *current_emitting_block = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
current_emitting_switch	spirv_glsl.hpp	/^	SPIRBlock *current_emitting_switch = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
current_emitting_switch_fallthrough	spirv_glsl.hpp	/^	bool current_emitting_switch_fallthrough = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
current_function	spirv_cross.hpp	/^	SPIRFunction *current_function = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
current_function	spirv_parser.hpp	/^	SPIRFunction *current_function = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Parser
current_locale_radix_character	spirv_glsl.hpp	/^	char current_locale_radix_character = '.';$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
current_locale_radix_character	spirv_reflect.cpp	/^	char current_locale_radix_character = '.';$/;"	m	class:simple_json::Stream	file:
current_loop_level	spirv_cross.hpp	/^	uint32_t current_loop_level = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
data	spirv_cross_containers.hpp	/^	T *data()$/;"	f	class:SPIRV_CROSS_NAMESPACE::AlignedBuffer
deallocate	spirv_cross_containers.hpp	/^	void deallocate(T *ptr)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ObjectPool
declare_complex_constant_arrays	spirv_msl.cpp	/^void CompilerMSL::declare_complex_constant_arrays()$/;"	f	class:CompilerMSL
declare_constant_arrays	spirv_msl.cpp	/^void CompilerMSL::declare_constant_arrays()$/;"	f	class:CompilerMSL
declare_temporary	spirv_common.hpp	/^	SmallVector<std::pair<TypeID, ID>> declare_temporary;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
declare_temporary	spirv_glsl.cpp	/^string CompilerGLSL::declare_temporary(uint32_t result_type, uint32_t result_id)$/;"	f	class:CompilerGLSL
declare_undefined_values	spirv_glsl.cpp	/^void CompilerGLSL::declare_undefined_values()$/;"	f	class:CompilerGLSL
declare_undefined_values	spirv_hlsl.cpp	/^void CompilerHLSL::declare_undefined_values()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
declare_undefined_values	spirv_msl.cpp	/^void CompilerMSL::declare_undefined_values()$/;"	f	class:CompilerMSL
declared_block_names	spirv_cross.hpp	/^	std::unordered_map<uint32_t, std::string> declared_block_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
declared_capabilities	spirv_cross_parsed_ir.hpp	/^	SmallVector<spv::Capability> declared_capabilities;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
declared_extensions	spirv_cross_parsed_ir.hpp	/^	SmallVector<std::string> declared_extensions;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
decoration	spirv_common.hpp	/^	Decoration decoration;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta
decoration	spirv_common.hpp	/^	uint32_t decoration = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
decoration_flags	spirv_common.hpp	/^		Bitset decoration_flags;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
decoration_is_string	spirv_parser.cpp	/^static bool decoration_is_string(Decoration decoration)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
decoration_word_offset	spirv_common.hpp	/^	std::unordered_map<uint32_t, uint32_t> decoration_word_offset;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta
default_block	spirv_common.hpp	/^	BlockID default_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
default_entry_point	spirv_cross_parsed_ir.hpp	/^	FunctionID default_entry_point = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
default_float_precision	spirv_glsl.hpp	/^			Precision default_float_precision = Mediump;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::FragmentOptions
default_handler	main.cpp	/^	function<void(const char *)> default_handler;$/;"	m	struct:CLICallbacks	file:
default_int_precision	spirv_glsl.hpp	/^			Precision default_int_precision = Highp;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::FragmentOptions
deferred_declaration	spirv_common.hpp	/^	bool deferred_declaration = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
demote_literal	spirv_glsl.hpp	/^		std::string demote_literal = "demote";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
dependees	spirv_common.hpp	/^	SmallVector<ID> dependees;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
dependency_hierarchy	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> dependency_hierarchy;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
depth	spirv_common.hpp	/^		bool depth;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
depth	spirv_common.hpp	/^		bool depth;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
dereference_chain	spirv_common.hpp	/^	SmallVector<uint32_t> dereference_chain;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
dereference_expression	spirv_glsl.cpp	/^string CompilerGLSL::dereference_expression(const SPIRType &expr_type, const std::string &expr)$/;"	f	class:CompilerGLSL
desc_set	spirv_common.hpp	/^	uint32_t desc_set;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SetBindingPair
desc_set	spirv_common.hpp	/^	uint32_t desc_set;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StageSetBinding
desc_set	spirv_cross_c.h	/^	unsigned desc_set;$/;"	m	struct:spvc_hlsl_resource_binding
desc_set	spirv_cross_c.h	/^	unsigned desc_set;$/;"	m	struct:spvc_msl_resource_binding
desc_set	spirv_hlsl.hpp	/^	uint32_t desc_set = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding
desc_set	spirv_msl.hpp	/^	uint32_t desc_set = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
descriptor_address_space	spirv_msl.cpp	/^const char *CompilerMSL::descriptor_address_space(uint32_t id, StorageClass storage, const char *plain_address_space) const$/;"	f	class:CompilerMSL
descriptor_set_is_argument_buffer	spirv_msl.cpp	/^bool CompilerMSL::descriptor_set_is_argument_buffer(uint32_t desc_set) const$/;"	f	class:CompilerMSL
device_index	spirv_msl.hpp	/^		uint32_t device_index = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
dim	spirv_common.hpp	/^		spv::Dim dim;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
disable_block_optimization	spirv_common.hpp	/^	bool disable_block_optimization = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
disable_rasterization	spirv_msl.hpp	/^		bool disable_rasterization = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
disabled_frag_outputs	spirv_msl.hpp	/^	SmallVector<uint32_t> disabled_frag_outputs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
disallow_forwarding_in_expression_chain	spirv_glsl.cpp	/^void CompilerGLSL::disallow_forwarding_in_expression_chain(const SPIRExpression &expr)$/;"	f	class:CompilerGLSL
discard_literal	spirv_glsl.hpp	/^		std::string discard_literal = "discard";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
dispatch_base	spirv_msl.hpp	/^		bool dispatch_base = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
do_combined_parameters	spirv_common.hpp	/^	bool do_combined_parameters = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
does_shader_write_sample_mask	spirv_msl.hpp	/^	bool does_shader_write_sample_mask = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
dominated_variables	spirv_common.hpp	/^	SmallVector<VariableID> dominated_variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
dominator	spirv_cfg.hpp	/^	uint32_t dominator = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
dominator	spirv_common.hpp	/^	BlockID dominator = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
double_literal_suffix	spirv_glsl.hpp	/^		bool double_literal_suffix = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
dref	spirv_glsl.hpp	/^		uint32_t coord = 0, coord_components = 0, dref = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
dref_combined_samplers	spirv_cross.hpp	/^		const std::unordered_set<uint32_t> &dref_combined_samplers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
dref_combined_samplers	spirv_cross.hpp	/^		std::unordered_set<uint32_t> dref_combined_samplers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerDrefHandler
dst_id	spirv_glsl.hpp	/^		uint32_t dst_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TemporaryCopy
dst_name	main.cpp	/^	string dst_name;$/;"	m	struct:Remap	file:
dummy_aligner	spirv_cross_containers.hpp	/^		double dummy_aligner;$/;"	m	union:SPIRV_CROSS_NAMESPACE::AlignedBuffer::__anon14
dummy_sampler_id	spirv_cross.hpp	/^	uint32_t dummy_sampler_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
dump_resources	main.cpp	/^	bool dump_resources = false;$/;"	m	struct:CLIArguments	file:
dynamic_index	spirv_common.hpp	/^	std::string dynamic_index;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
dynamic_offsets_buffer_id	spirv_msl.hpp	/^	uint32_t dynamic_offsets_buffer_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
dynamic_offsets_buffer_index	spirv_msl.hpp	/^		uint32_t dynamic_offsets_buffer_index = 23;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
emit_access_chain	spirv_hlsl.cpp	/^void CompilerHLSL::emit_access_chain(const Instruction &instruction)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_array_copy	spirv_glsl.cpp	/^void CompilerGLSL::emit_array_copy(const string &lhs, uint32_t, uint32_t rhs_id, StorageClass, StorageClass)$/;"	f	class:CompilerGLSL
emit_array_copy	spirv_msl.cpp	/^void CompilerMSL::emit_array_copy(const string &lhs, uint32_t lhs_id, uint32_t rhs_id,$/;"	f	class:CompilerMSL
emit_atomic	spirv_hlsl.cpp	/^void CompilerHLSL::emit_atomic(const uint32_t *ops, uint32_t length, spv::Op op)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_atomic_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_atomic_func_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_atomic_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_atomic_func_op(uint32_t result_type, uint32_t result_id,$/;"	f	class:CompilerGLSL
emit_atomic_func_op	spirv_msl.cpp	/^void CompilerMSL::emit_atomic_func_op(uint32_t result_type, uint32_t result_id, const char *op, Op opcode,$/;"	f	class:CompilerMSL
emit_barrier	spirv_msl.cpp	/^void CompilerMSL::emit_barrier(uint32_t id_exe_scope, uint32_t id_mem_scope, uint32_t id_mem_sem)$/;"	f	class:CompilerMSL
emit_binary_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_binary_func_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_binary_func_op_cast	spirv_glsl.cpp	/^void CompilerGLSL::emit_binary_func_op_cast(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_binary_func_op_cast_clustered	spirv_glsl.cpp	/^void CompilerGLSL::emit_binary_func_op_cast_clustered(uint32_t result_type, uint32_t result_id, uint32_t op0,$/;"	f	class:CompilerGLSL
emit_binary_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_binary_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1, const char *op)$/;"	f	class:CompilerGLSL
emit_binary_op_cast	spirv_glsl.cpp	/^void CompilerGLSL::emit_binary_op_cast(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_binary_unord_op	spirv_msl.cpp	/^void CompilerMSL::emit_binary_unord_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerMSL
emit_bitfield_insert_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_bitfield_insert_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_block_chain	spirv_glsl.cpp	/^void CompilerGLSL::emit_block_chain(SPIRBlock &block)$/;"	f	class:CompilerGLSL
emit_block_hints	spirv_glsl.cpp	/^void CompilerGLSL::emit_block_hints(const SPIRBlock &block)$/;"	f	class:CompilerGLSL
emit_block_hints	spirv_hlsl.cpp	/^void CompilerHLSL::emit_block_hints(const SPIRBlock &block)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_block_hints	spirv_msl.cpp	/^void CompilerMSL::emit_block_hints(const SPIRBlock &)$/;"	f	class:CompilerMSL
emit_block_instructions	spirv_glsl.cpp	/^void CompilerGLSL::emit_block_instructions(SPIRBlock &block)$/;"	f	class:CompilerGLSL
emit_block_struct	spirv_cpp.cpp	/^void CompilerCPP::emit_block_struct(SPIRType &type)$/;"	f	class:CompilerCPP
emit_buffer_block	spirv_cpp.cpp	/^void CompilerCPP::emit_buffer_block(const SPIRVariable &var)$/;"	f	class:CompilerCPP
emit_buffer_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_buffer_block(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_buffer_block	spirv_hlsl.cpp	/^void CompilerHLSL::emit_buffer_block(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_buffer_block_flattened	spirv_glsl.cpp	/^void CompilerGLSL::emit_buffer_block_flattened(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_buffer_block_legacy	spirv_glsl.cpp	/^void CompilerGLSL::emit_buffer_block_legacy(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_buffer_block_native	spirv_glsl.cpp	/^void CompilerGLSL::emit_buffer_block_native(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_buffer_reference_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_buffer_reference_block(uint32_t type_id, bool forward_declaration)$/;"	f	class:CompilerGLSL
emit_builtin_inputs_in_struct	spirv_hlsl.cpp	/^void CompilerHLSL::emit_builtin_inputs_in_struct()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_builtin_outputs_in_struct	spirv_hlsl.cpp	/^void CompilerHLSL::emit_builtin_outputs_in_struct()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_builtin_variables	spirv_hlsl.cpp	/^void CompilerHLSL::emit_builtin_variables()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_c_linkage	spirv_cpp.cpp	/^void CompilerCPP::emit_c_linkage()$/;"	f	class:CompilerCPP
emit_complex_bitcast	spirv_glsl.cpp	/^bool CompilerGLSL::emit_complex_bitcast(uint32_t result_type, uint32_t id, uint32_t op0)$/;"	f	class:CompilerGLSL
emit_complex_bitcast	spirv_hlsl.cpp	/^bool CompilerHLSL::emit_complex_bitcast(uint32_t, uint32_t, uint32_t)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_complex_bitcast	spirv_msl.cpp	/^bool CompilerMSL::emit_complex_bitcast(uint32_t, uint32_t, uint32_t)$/;"	f	class:CompilerMSL
emit_composite_constants	spirv_hlsl.cpp	/^void CompilerHLSL::emit_composite_constants()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_constant	spirv_glsl.cpp	/^void CompilerGLSL::emit_constant(const SPIRConstant &constant)$/;"	f	class:CompilerGLSL
emit_continue_block	spirv_glsl.cpp	/^string CompilerGLSL::emit_continue_block(uint32_t continue_block, bool follow_true_block, bool follow_false_block)$/;"	f	class:CompilerGLSL
emit_copy_logical_type	spirv_glsl.cpp	/^void CompilerGLSL::emit_copy_logical_type(uint32_t lhs_id, uint32_t lhs_type_id, uint32_t rhs_id, uint32_t rhs_type_id,$/;"	f	class:CompilerGLSL
emit_custom_functions	spirv_msl.cpp	/^void CompilerMSL::emit_custom_functions()$/;"	f	class:CompilerMSL
emit_custom_templates	spirv_msl.cpp	/^void CompilerMSL::emit_custom_templates()$/;"	f	class:CompilerMSL
emit_declared_builtin_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_declared_builtin_block(StorageClass storage, ExecutionModel model)$/;"	f	class:CompilerGLSL
emit_entry_point_declarations	spirv_glsl.cpp	/^void CompilerGLSL::emit_entry_point_declarations()$/;"	f	class:CompilerGLSL
emit_entry_point_declarations	spirv_msl.cpp	/^void CompilerMSL::emit_entry_point_declarations()$/;"	f	class:CompilerMSL
emit_entry_points	spirv_reflect.cpp	/^void CompilerReflection::emit_entry_points()$/;"	f	class:CompilerReflection
emit_extension_workarounds	spirv_glsl.cpp	/^void CompilerGLSL::emit_extension_workarounds(spv::ExecutionModel model)$/;"	f	class:CompilerGLSL
emit_fixup	spirv_glsl.cpp	/^void CompilerGLSL::emit_fixup()$/;"	f	class:CompilerGLSL
emit_fixup	spirv_hlsl.cpp	/^void CompilerHLSL::emit_fixup()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_fixup	spirv_msl.cpp	/^void CompilerMSL::emit_fixup()$/;"	f	class:CompilerMSL
emit_flattened_io_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_flattened_io_block(const SPIRVariable &var, const char *qual)$/;"	f	class:CompilerGLSL
emit_flattened_io_block_member	spirv_glsl.cpp	/^void CompilerGLSL::emit_flattened_io_block_member(const std::string &basename, const SPIRType &type, const char *qual,$/;"	f	class:CompilerGLSL
emit_flattened_io_block_struct	spirv_glsl.cpp	/^void CompilerGLSL::emit_flattened_io_block_struct(const std::string &basename, const SPIRType &type, const char *qual,$/;"	f	class:CompilerGLSL
emit_for_loop_initializers	spirv_glsl.cpp	/^string CompilerGLSL::emit_for_loop_initializers(const SPIRBlock &block)$/;"	f	class:CompilerGLSL
emit_function	spirv_glsl.cpp	/^void CompilerGLSL::emit_function(SPIRFunction &func, const Bitset &return_flags)$/;"	f	class:CompilerGLSL
emit_function_prototype	spirv_cpp.cpp	/^void CompilerCPP::emit_function_prototype(SPIRFunction &func, const Bitset &)$/;"	f	class:CompilerCPP
emit_function_prototype	spirv_glsl.cpp	/^void CompilerGLSL::emit_function_prototype(SPIRFunction &func, const Bitset &return_flags)$/;"	f	class:CompilerGLSL
emit_function_prototype	spirv_hlsl.cpp	/^void CompilerHLSL::emit_function_prototype(SPIRFunction &func, const Bitset &return_flags)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_function_prototype	spirv_msl.cpp	/^void CompilerMSL::emit_function_prototype(SPIRFunction &func, const Bitset &)$/;"	f	class:CompilerMSL
emit_glsl_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_glsl_op(uint32_t result_type, uint32_t id, uint32_t eop, const uint32_t *args, uint32_t length)$/;"	f	class:CompilerGLSL
emit_glsl_op	spirv_hlsl.cpp	/^void CompilerHLSL::emit_glsl_op(uint32_t result_type, uint32_t id, uint32_t eop, const uint32_t *args, uint32_t count)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_glsl_op	spirv_msl.cpp	/^void CompilerMSL::emit_glsl_op(uint32_t result_type, uint32_t id, uint32_t eop, const uint32_t *args, uint32_t count)$/;"	f	class:CompilerMSL
emit_header	spirv_cpp.cpp	/^void CompilerCPP::emit_header()$/;"	f	class:CompilerCPP
emit_header	spirv_glsl.cpp	/^void CompilerGLSL::emit_header()$/;"	f	class:CompilerGLSL
emit_header	spirv_hlsl.cpp	/^void CompilerHLSL::emit_header()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_header	spirv_msl.cpp	/^void CompilerMSL::emit_header()$/;"	f	class:CompilerMSL
emit_hlsl_entry_point	spirv_hlsl.cpp	/^void CompilerHLSL::emit_hlsl_entry_point()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_hoisted_temporaries	spirv_glsl.cpp	/^void CompilerGLSL::emit_hoisted_temporaries(SmallVector<pair<TypeID, ID>> &temporaries)$/;"	f	class:CompilerGLSL
emit_inout_fragment_outputs_copy_to_subpass_inputs	spirv_glsl.cpp	/^void CompilerGLSL::emit_inout_fragment_outputs_copy_to_subpass_inputs()$/;"	f	class:CompilerGLSL
emit_instruction	spirv_glsl.cpp	/^void CompilerGLSL::emit_instruction(const Instruction &instruction)$/;"	f	class:CompilerGLSL
emit_instruction	spirv_hlsl.cpp	/^void CompilerHLSL::emit_instruction(const Instruction &instruction)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_instruction	spirv_msl.cpp	/^void CompilerMSL::emit_instruction(const Instruction &instruction)$/;"	f	class:CompilerMSL
emit_interface_block	spirv_cpp.cpp	/^void CompilerCPP::emit_interface_block(const SPIRVariable &var)$/;"	f	class:CompilerCPP
emit_interface_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_interface_block(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_interface_block	spirv_msl.cpp	/^void CompilerMSL::emit_interface_block(uint32_t ib_var_id)$/;"	f	class:CompilerMSL
emit_interface_block_globally	spirv_hlsl.cpp	/^void CompilerHLSL::emit_interface_block_globally(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_interface_block_in_struct	spirv_hlsl.cpp	/^void CompilerHLSL::emit_interface_block_in_struct(const SPIRVariable &var, unordered_set<uint32_t> &active_locations)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_interface_block_member_in_struct	spirv_hlsl.cpp	/^void CompilerHLSL::emit_interface_block_member_in_struct(const SPIRVariable &var, uint32_t member_index,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_json_array_value	spirv_reflect.cpp	/^void Stream::emit_json_array_value(bool value)$/;"	f	class:Stream
emit_json_array_value	spirv_reflect.cpp	/^void Stream::emit_json_array_value(const std::string &value)$/;"	f	class:Stream
emit_json_array_value	spirv_reflect.cpp	/^void Stream::emit_json_array_value(uint32_t value)$/;"	f	class:Stream
emit_json_key	spirv_reflect.cpp	/^void Stream::emit_json_key(const std::string &key)$/;"	f	class:Stream
emit_json_key_array	spirv_reflect.cpp	/^void Stream::emit_json_key_array(const std::string &key)$/;"	f	class:Stream
emit_json_key_object	spirv_reflect.cpp	/^void Stream::emit_json_key_object(const std::string &key)$/;"	f	class:Stream
emit_json_key_value	spirv_reflect.cpp	/^void Stream::emit_json_key_value(const std::string &key, bool value)$/;"	f	class:Stream
emit_json_key_value	spirv_reflect.cpp	/^void Stream::emit_json_key_value(const std::string &key, const std::string &value)$/;"	f	class:Stream
emit_json_key_value	spirv_reflect.cpp	/^void Stream::emit_json_key_value(const std::string &key, float value)$/;"	f	class:Stream
emit_json_key_value	spirv_reflect.cpp	/^void Stream::emit_json_key_value(const std::string &key, int32_t value)$/;"	f	class:Stream
emit_json_key_value	spirv_reflect.cpp	/^void Stream::emit_json_key_value(const std::string &key, uint32_t value)$/;"	f	class:Stream
emit_legacy_uniform	spirv_hlsl.cpp	/^void CompilerHLSL::emit_legacy_uniform(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_line_directive	spirv_glsl.cpp	/^void CompilerGLSL::emit_line_directive(uint32_t file_id, uint32_t line_literal)$/;"	f	class:CompilerGLSL
emit_line_directives	main.cpp	/^	bool emit_line_directives = false;$/;"	m	struct:CLIArguments	file:
emit_line_directives	spirv_glsl.hpp	/^		bool emit_line_directives = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
emit_load	spirv_hlsl.cpp	/^void CompilerHLSL::emit_load(const Instruction &instruction)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_local_masked_variable	spirv_msl.cpp	/^void CompilerMSL::emit_local_masked_variable(const SPIRVariable &masked_var, bool strip_array)$/;"	f	class:CompilerMSL
emit_mix_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_mix_op(uint32_t result_type, uint32_t id, uint32_t left, uint32_t right, uint32_t lerp)$/;"	f	class:CompilerGLSL
emit_modern_uniform	spirv_hlsl.cpp	/^void CompilerHLSL::emit_modern_uniform(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_nminmax_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_nminmax_op(uint32_t result_type, uint32_t id, uint32_t op0, uint32_t op1, GLSLstd450 op)$/;"	f	class:CompilerGLSL
emit_op	spirv_glsl.cpp	/^SPIRExpression &CompilerGLSL::emit_op(uint32_t result_type, uint32_t result_id, const string &rhs, bool forwarding,$/;"	f	class:CompilerGLSL
emit_output_variable_initializer	spirv_glsl.cpp	/^void CompilerGLSL::emit_output_variable_initializer(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_pls	spirv_glsl.cpp	/^void CompilerGLSL::emit_pls()$/;"	f	class:CompilerGLSL
emit_push_constant_as_uniform_buffer	spirv_glsl.hpp	/^		bool emit_push_constant_as_uniform_buffer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
emit_push_constant_block	spirv_cpp.cpp	/^void CompilerCPP::emit_push_constant_block(const SPIRVariable &var)$/;"	f	class:CompilerCPP
emit_push_constant_block	spirv_glsl.cpp	/^void CompilerGLSL::emit_push_constant_block(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_push_constant_block	spirv_hlsl.cpp	/^void CompilerHLSL::emit_push_constant_block(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_push_constant_block_glsl	spirv_glsl.cpp	/^void CompilerGLSL::emit_push_constant_block_glsl(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_push_constant_block_vulkan	spirv_glsl.cpp	/^void CompilerGLSL::emit_push_constant_block_vulkan(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_quaternary_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_quaternary_func_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_rayquery_function	spirv_hlsl.cpp	/^void CompilerHLSL::emit_rayquery_function(const char *commited, const char *candidate, const uint32_t *ops)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_resources	spirv_cpp.cpp	/^void CompilerCPP::emit_resources()$/;"	f	class:CompilerCPP
emit_resources	spirv_glsl.cpp	/^void CompilerGLSL::emit_resources()$/;"	f	class:CompilerGLSL
emit_resources	spirv_hlsl.cpp	/^void CompilerHLSL::emit_resources()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_resources	spirv_msl.cpp	/^void CompilerMSL::emit_resources()$/;"	f	class:CompilerMSL
emit_resources	spirv_reflect.cpp	/^void CompilerReflection::emit_resources()$/;"	f	class:CompilerReflection
emit_resources	spirv_reflect.cpp	/^void CompilerReflection::emit_resources(const char *tag, const SmallVector<Resource> &resources)$/;"	f	class:CompilerReflection
emit_sampled_image_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_sampled_image_op(uint32_t result_type, uint32_t result_id, uint32_t image_id, uint32_t samp_id)$/;"	f	class:CompilerGLSL
emit_sampled_image_op	spirv_hlsl.cpp	/^void CompilerHLSL::emit_sampled_image_op(uint32_t result_type, uint32_t result_id, uint32_t image_id, uint32_t samp_id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_sampled_image_op	spirv_msl.cpp	/^void CompilerMSL::emit_sampled_image_op(uint32_t result_type, uint32_t result_id, uint32_t image_id, uint32_t samp_id)$/;"	f	class:CompilerMSL
emit_shared	spirv_cpp.cpp	/^void CompilerCPP::emit_shared(const SPIRVariable &var)$/;"	f	class:CompilerCPP
emit_sparse_feedback_temporaries	spirv_glsl.cpp	/^void CompilerGLSL::emit_sparse_feedback_temporaries(uint32_t result_type_id, uint32_t id, uint32_t &feedback_id,$/;"	f	class:CompilerGLSL
emit_specialization_constant_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_specialization_constant_op(const SPIRConstantOp &constant)$/;"	f	class:CompilerGLSL
emit_specialization_constants	spirv_reflect.cpp	/^void CompilerReflection::emit_specialization_constants()$/;"	f	class:CompilerReflection
emit_specialization_constants_and_structs	spirv_hlsl.cpp	/^void CompilerHLSL::emit_specialization_constants_and_structs()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_specialization_constants_and_structs	spirv_msl.cpp	/^void CompilerMSL::emit_specialization_constants_and_structs()$/;"	f	class:CompilerMSL
emit_spv_amd_gcn_shader_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_spv_amd_gcn_shader_op(uint32_t result_type, uint32_t id, uint32_t eop, const uint32_t *args,$/;"	f	class:CompilerGLSL
emit_spv_amd_shader_ballot_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_spv_amd_shader_ballot_op(uint32_t result_type, uint32_t id, uint32_t eop, const uint32_t *args,$/;"	f	class:CompilerGLSL
emit_spv_amd_shader_explicit_vertex_parameter_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_spv_amd_shader_explicit_vertex_parameter_op(uint32_t result_type, uint32_t id, uint32_t eop,$/;"	f	class:CompilerGLSL
emit_spv_amd_shader_trinary_minmax_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_spv_amd_shader_trinary_minmax_op(uint32_t result_type, uint32_t id, uint32_t eop,$/;"	f	class:CompilerGLSL
emit_spv_amd_shader_trinary_minmax_op	spirv_msl.cpp	/^void CompilerMSL::emit_spv_amd_shader_trinary_minmax_op(uint32_t result_type, uint32_t id, uint32_t eop,$/;"	f	class:CompilerMSL
emit_store	spirv_hlsl.cpp	/^void CompilerHLSL::emit_store(const Instruction &instruction)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_store_statement	spirv_glsl.cpp	/^void CompilerGLSL::emit_store_statement(uint32_t lhs_expression, uint32_t rhs_expression)$/;"	f	class:CompilerGLSL
emit_store_statement	spirv_msl.cpp	/^void CompilerMSL::emit_store_statement(uint32_t lhs_expression, uint32_t rhs_expression)$/;"	f	class:CompilerMSL
emit_struct	spirv_glsl.cpp	/^void CompilerGLSL::emit_struct(SPIRType &type)$/;"	f	class:CompilerGLSL
emit_struct_member	spirv_glsl.cpp	/^void CompilerGLSL::emit_struct_member(const SPIRType &type, uint32_t member_type_id, uint32_t index,$/;"	f	class:CompilerGLSL
emit_struct_member	spirv_hlsl.cpp	/^void CompilerHLSL::emit_struct_member(const SPIRType &type, uint32_t member_type_id, uint32_t index,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_struct_member	spirv_msl.cpp	/^void CompilerMSL::emit_struct_member(const SPIRType &type, uint32_t member_type_id, uint32_t index,$/;"	f	class:CompilerMSL
emit_struct_padding_target	spirv_glsl.cpp	/^void CompilerGLSL::emit_struct_padding_target(const SPIRType &)$/;"	f	class:CompilerGLSL
emit_struct_padding_target	spirv_msl.cpp	/^void CompilerMSL::emit_struct_padding_target(const SPIRType &type)$/;"	f	class:CompilerMSL
emit_subgroup_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_subgroup_op(const Instruction &i)$/;"	f	class:CompilerGLSL
emit_subgroup_op	spirv_hlsl.cpp	/^void CompilerHLSL::emit_subgroup_op(const Instruction &i)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_subgroup_op	spirv_msl.cpp	/^void CompilerMSL::emit_subgroup_op(const Instruction &i)$/;"	f	class:CompilerMSL
emit_tessellation_access_chain	spirv_msl.cpp	/^bool CompilerMSL::emit_tessellation_access_chain(const uint32_t *ops, uint32_t length)$/;"	f	class:CompilerMSL
emit_tessellation_io_load	spirv_msl.cpp	/^bool CompilerMSL::emit_tessellation_io_load(uint32_t result_type_id, uint32_t id, uint32_t ptr)$/;"	f	class:CompilerMSL
emit_texture_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_texture_op(const Instruction &i, bool sparse)$/;"	f	class:CompilerGLSL
emit_texture_op	spirv_hlsl.cpp	/^void CompilerHLSL::emit_texture_op(const Instruction &i, bool sparse)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_texture_op	spirv_msl.cpp	/^void CompilerMSL::emit_texture_op(const Instruction &i, bool sparse)$/;"	f	class:CompilerMSL
emit_texture_size_variants	spirv_hlsl.cpp	/^void CompilerHLSL::emit_texture_size_variants(uint64_t variant_mask, const char *vecsize_qualifier, bool uav,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_trinary_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_trinary_func_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_trinary_func_op_bitextract	spirv_glsl.cpp	/^void CompilerGLSL::emit_trinary_func_op_bitextract(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_trinary_func_op_cast	spirv_glsl.cpp	/^void CompilerGLSL::emit_trinary_func_op_cast(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_type	spirv_reflect.cpp	/^void CompilerReflection::emit_type(uint32_t type_id, bool &emitted_open_tag)$/;"	f	class:CompilerReflection
emit_type_array	spirv_reflect.cpp	/^void CompilerReflection::emit_type_array(const SPIRType &type)$/;"	f	class:CompilerReflection
emit_type_member	spirv_reflect.cpp	/^void CompilerReflection::emit_type_member(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerReflection
emit_type_member_qualifiers	spirv_reflect.cpp	/^void CompilerReflection::emit_type_member_qualifiers(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerReflection
emit_types	spirv_reflect.cpp	/^void CompilerReflection::emit_types()$/;"	f	class:CompilerReflection
emit_unary_func_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_unary_func_op(uint32_t result_type, uint32_t result_id, uint32_t op0, const char *op)$/;"	f	class:CompilerGLSL
emit_unary_func_op_cast	spirv_glsl.cpp	/^void CompilerGLSL::emit_unary_func_op_cast(uint32_t result_type, uint32_t result_id, uint32_t op0, const char *op,$/;"	f	class:CompilerGLSL
emit_unary_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_unary_op(uint32_t result_type, uint32_t result_id, uint32_t op0, const char *op)$/;"	f	class:CompilerGLSL
emit_uniform	spirv_cpp.cpp	/^void CompilerCPP::emit_uniform(const SPIRVariable &var)$/;"	f	class:CompilerCPP
emit_uniform	spirv_glsl.cpp	/^void CompilerGLSL::emit_uniform(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_uniform	spirv_hlsl.cpp	/^void CompilerHLSL::emit_uniform(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
emit_uniform_buffer_as_plain_uniforms	spirv_glsl.hpp	/^		bool emit_uniform_buffer_as_plain_uniforms = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
emit_uninitialized_temporary	spirv_glsl.cpp	/^void CompilerGLSL::emit_uninitialized_temporary(uint32_t result_type, uint32_t result_id)$/;"	f	class:CompilerGLSL
emit_uninitialized_temporary_expression	spirv_glsl.cpp	/^SPIRExpression &CompilerGLSL::emit_uninitialized_temporary_expression(uint32_t type, uint32_t id)$/;"	f	class:CompilerGLSL
emit_unrolled_binary_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_unrolled_binary_op(uint32_t result_type, uint32_t result_id, uint32_t op0, uint32_t op1,$/;"	f	class:CompilerGLSL
emit_unrolled_unary_op	spirv_glsl.cpp	/^void CompilerGLSL::emit_unrolled_unary_op(uint32_t result_type, uint32_t result_id, uint32_t operand, const char *op)$/;"	f	class:CompilerGLSL
emit_variable_temporary_copies	spirv_glsl.cpp	/^void CompilerGLSL::emit_variable_temporary_copies(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
emit_while_loop_initializers	spirv_glsl.cpp	/^void CompilerGLSL::emit_while_loop_initializers(const SPIRBlock &block)$/;"	f	class:CompilerGLSL
emitted_functions	spirv_glsl.hpp	/^	std::unordered_set<uint32_t> emitted_functions;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
emitted_loop_level	spirv_common.hpp	/^	uint32_t emitted_loop_level = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
empty	spirv_common.hpp	/^	bool empty() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
empty	spirv_common.hpp	/^	inline bool empty() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
empty_string	spirv_cross_parsed_ir.hpp	/^	std::string empty_string;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
empty_vector	spirv_cfg.hpp	/^	SmallVector<uint32_t> empty_vector;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
emulate_cube_array	spirv_msl.hpp	/^		bool emulate_cube_array = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
emulate_subgroups	spirv_msl.hpp	/^		bool emulate_subgroups = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_16bit_types	spirv_hlsl.hpp	/^		bool enable_16bit_types = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
enable_420pack_extension	spirv_glsl.hpp	/^		bool enable_420pack_extension = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
enable_base_index_zero	spirv_msl.hpp	/^		bool enable_base_index_zero = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_clip_distance_user_varying	spirv_msl.hpp	/^		bool enable_clip_distance_user_varying = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_decoration_binding	spirv_msl.hpp	/^		bool enable_decoration_binding = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_frag_depth_builtin	spirv_msl.hpp	/^		bool enable_frag_depth_builtin = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_frag_output_mask	spirv_msl.hpp	/^		uint32_t enable_frag_output_mask = 0xffffffff;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_frag_stencil_ref_builtin	spirv_msl.hpp	/^		bool enable_frag_stencil_ref_builtin = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_point_size_builtin	spirv_msl.hpp	/^		bool enable_point_size_builtin = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
enable_storage_image_qualifier_deduction	main.cpp	/^	bool enable_storage_image_qualifier_deduction = true;$/;"	m	struct:CLIArguments	file:
enable_storage_image_qualifier_deduction	spirv_glsl.hpp	/^		bool enable_storage_image_qualifier_deduction = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
enclose_expression	spirv_glsl.cpp	/^string CompilerGLSL::enclose_expression(const string &expr)$/;"	f	class:CompilerGLSL
end	main.cpp	/^	void end()$/;"	f	struct:CLIParser
end	spirv_cross_c.h	/^	unsigned end;$/;"	m	struct:spvc_hlsl_root_constants
end	spirv_hlsl.hpp	/^	uint32_t end;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::RootConstants
end_function_scope	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerHandler::end_function_scope(const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::CombinedImageSamplerHandler
end_function_scope	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessHandler::end_function_scope(const uint32_t *, uint32_t)$/;"	f	class:Compiler::InterlockedResourceAccessHandler
end_function_scope	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessPrepassHandler::end_function_scope(const uint32_t *, uint32_t)$/;"	f	class:Compiler::InterlockedResourceAccessPrepassHandler
end_function_scope	spirv_cross.hpp	/^		virtual bool end_function_scope(const uint32_t *, uint32_t)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
end_json_array	spirv_reflect.cpp	/^void Stream::end_json_array()$/;"	f	class:Stream
end_json_object	spirv_reflect.cpp	/^void Stream::end_json_object()$/;"	f	class:Stream
end_scope	spirv_glsl.cpp	/^void CompilerGLSL::end_scope()$/;"	f	class:CompilerGLSL
end_scope	spirv_glsl.cpp	/^void CompilerGLSL::end_scope(const string &trailer)$/;"	f	class:CompilerGLSL
end_scope_decl	spirv_glsl.cpp	/^void CompilerGLSL::end_scope_decl()$/;"	f	class:CompilerGLSL
end_scope_decl	spirv_glsl.cpp	/^void CompilerGLSL::end_scope_decl(const string &decl)$/;"	f	class:CompilerGLSL
ended_state	main.cpp	/^	bool ended_state = false;$/;"	m	struct:CLIParser	file:
ensure_builtin	spirv_msl.cpp	/^void CompilerMSL::ensure_builtin(spv::StorageClass storage, spv::BuiltIn builtin)$/;"	f	class:CompilerMSL
ensure_correct_builtin_type	spirv_msl.cpp	/^uint32_t CompilerMSL::ensure_correct_builtin_type(uint32_t type_id, BuiltIn builtin)$/;"	f	class:CompilerMSL
ensure_correct_input_type	spirv_msl.cpp	/^uint32_t CompilerMSL::ensure_correct_input_type(uint32_t type_id, uint32_t location, uint32_t component, uint32_t num_components, bool strip_array)$/;"	f	class:CompilerMSL
ensure_member_packing_rules_msl	spirv_msl.cpp	/^void CompilerMSL::ensure_member_packing_rules_msl(SPIRType &ib_type, uint32_t index)$/;"	f	class:CompilerMSL
ensure_valid_identifier	spirv_cross_parsed_ir.cpp	/^static string ensure_valid_identifier(const string &name)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
ensure_valid_name	spirv_msl.cpp	/^string CompilerMSL::ensure_valid_name(string name, string pfx)$/;"	f	class:CompilerMSL
entry	main.cpp	/^	string entry;$/;"	m	struct:CLIArguments	file:
entry	spirv_cross.hpp	/^		SPIRFunction &entry;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
entry_block	spirv_common.hpp	/^	BlockID entry_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
entry_line	spirv_common.hpp	/^	EntryLine entry_line;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
entry_point_arg_stage_in	spirv_msl.cpp	/^string CompilerMSL::entry_point_arg_stage_in()$/;"	f	class:CompilerMSL
entry_point_args_argument_buffer	spirv_msl.cpp	/^string CompilerMSL::entry_point_args_argument_buffer(bool append_comma)$/;"	f	class:CompilerMSL
entry_point_args_builtin	spirv_msl.cpp	/^void CompilerMSL::entry_point_args_builtin(string &ep_args)$/;"	f	class:CompilerMSL
entry_point_args_classic	spirv_msl.cpp	/^string CompilerMSL::entry_point_args_classic(bool append_comma)$/;"	f	class:CompilerMSL
entry_point_args_discrete_descriptors	spirv_msl.cpp	/^void CompilerMSL::entry_point_args_discrete_descriptors(string &ep_args)$/;"	f	class:CompilerMSL
entry_point_rename	main.cpp	/^	SmallVector<Rename> entry_point_rename;$/;"	m	struct:CLIArguments	file:
entry_points	spirv_cross_parsed_ir.hpp	/^	std::unordered_map<FunctionID, SPIREntryPoint> entry_points;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
entry_stage	main.cpp	/^	string entry_stage;$/;"	m	struct:CLIArguments	file:
error_handler	main.cpp	/^	function<void()> error_handler;$/;"	m	struct:CLICallbacks	file:
es	main.cpp	/^	bool es = false;$/;"	m	struct:CLIArguments	file:
es	spirv_cross_parsed_ir.hpp	/^		bool es = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ParsedIR::Source
es	spirv_glsl.hpp	/^		bool es = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
evaluate_constant_u32	spirv_cross.cpp	/^uint32_t Compiler::evaluate_constant_u32(uint32_t id) const$/;"	f	class:Compiler
evaluate_spec_constant_u32	spirv_cross.cpp	/^uint32_t Compiler::evaluate_spec_constant_u32(const SPIRConstantOp &spec) const$/;"	f	class:Compiler
execution_is_branchless	spirv_cross.cpp	/^bool Compiler::execution_is_branchless(const SPIRBlock &from, const SPIRBlock &to) const$/;"	f	class:Compiler
execution_is_direct_branch	spirv_cross.cpp	/^bool Compiler::execution_is_direct_branch(const SPIRBlock &from, const SPIRBlock &to) const$/;"	f	class:Compiler
execution_is_noop	spirv_cross.cpp	/^bool Compiler::execution_is_noop(const SPIRBlock &from, const SPIRBlock &to) const$/;"	f	class:Compiler
execution_model	main.cpp	/^		ExecutionModel execution_model;$/;"	m	struct:CLIArguments::Rename	file:
execution_model	spirv_cross.hpp	/^	spv::ExecutionModel execution_model;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::EntryPoint
execution_model	spirv_cross_c.h	/^	SpvExecutionModel execution_model;$/;"	m	struct:spvc_entry_point
execution_model_to_str	main.cpp	/^static const char *execution_model_to_str(spv::ExecutionModel model)$/;"	f	file:
execution_model_to_str	spirv_reflect.cpp	/^string CompilerReflection::execution_model_to_str(spv::ExecutionModel model)$/;"	f	class:CompilerReflection
exists_unaccessed_path_to_return	spirv_cross.cpp	/^static bool exists_unaccessed_path_to_return(const CFG &cfg, uint32_t block, const unordered_set<uint32_t> &blocks,$/;"	f	file:
explicit_struct_type	spirv_glsl.hpp	/^		bool explicit_struct_type = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
expression	spirv_common.hpp	/^	std::string expression;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
expression_dependencies	spirv_common.hpp	/^	SmallVector<ID> expression_dependencies;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
expression_ends_with	spirv_msl.cpp	/^static bool expression_ends_with(const string &expr_str, const std::string &ending)$/;"	f	file:
expression_is_constant_null	spirv_glsl.cpp	/^bool CompilerGLSL::expression_is_constant_null(uint32_t id) const$/;"	f	class:CompilerGLSL
expression_is_forwarded	spirv_glsl.cpp	/^bool CompilerGLSL::expression_is_forwarded(uint32_t id) const$/;"	f	class:CompilerGLSL
expression_is_lvalue	spirv_cross.cpp	/^bool Compiler::expression_is_lvalue(uint32_t id) const$/;"	f	class:Compiler
expression_is_non_value_type_array	spirv_glsl.cpp	/^bool CompilerGLSL::expression_is_non_value_type_array(uint32_t ptr)$/;"	f	class:CompilerGLSL
expression_read_implies_multiple_reads	spirv_glsl.cpp	/^bool CompilerGLSL::expression_read_implies_multiple_reads(uint32_t id) const$/;"	f	class:CompilerGLSL
expression_suppresses_usage_tracking	spirv_glsl.cpp	/^bool CompilerGLSL::expression_suppresses_usage_tracking(uint32_t id) const$/;"	f	class:CompilerGLSL
expression_type	spirv_common.hpp	/^	TypeID expression_type = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
expression_type	spirv_cross.cpp	/^const SPIRType &Compiler::expression_type(uint32_t id) const$/;"	f	class:Compiler
expression_type_id	spirv_cross.cpp	/^uint32_t Compiler::expression_type_id(uint32_t id) const$/;"	f	class:Compiler
expression_usage_counts	spirv_glsl.hpp	/^	std::unordered_map<uint32_t, uint32_t> expression_usage_counts;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
ext	spirv_common.hpp	/^	Extension ext;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExtension
extended	spirv_common.hpp	/^		} extended;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration	typeref:struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration::Extended
extensions	main.cpp	/^	SmallVector<string> extensions;$/;"	m	struct:CLIArguments	file:
extra_sub_expressions	spirv_glsl.hpp	/^	std::unordered_map<uint32_t, uint32_t> extra_sub_expressions;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
extract_global_variables_from_function	spirv_msl.cpp	/^void CompilerMSL::extract_global_variables_from_function(uint32_t func_id, std::set<uint32_t> &added_arg_ids,$/;"	f	class:CompilerMSL
extract_global_variables_from_functions	spirv_msl.cpp	/^void CompilerMSL::extract_global_variables_from_functions()$/;"	f	class:CompilerMSL
extract_string	spirv_parser.cpp	/^static string extract_string(const vector<uint32_t> &spirv, uint32_t offset)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
f16_to_f32	spirv_common.hpp	/^	static inline float f16_to_f32(uint16_t u16_value)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
f32	spirv_common.hpp	/^		float f32;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
f64	spirv_common.hpp	/^		double f64;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
false_block	spirv_common.hpp	/^	BlockID false_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
feature_mask	spirv_glsl.hpp	/^		FeatureMask feature_mask = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper
file_id	spirv_common.hpp	/^		uint32_t file_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::EntryLine
find_block_meta	spirv_cross.cpp	/^Compiler::PhysicalBlockMeta *Compiler::PhysicalStorageBufferPointerHandler::find_block_meta(uint32_t id) const$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
find_color_output_by_location	spirv_glsl.cpp	/^const SPIRVariable *CompilerGLSL::find_color_output_by_location(uint32_t location) const$/;"	f	class:CompilerGLSL
find_common_dominator	spirv_cfg.cpp	/^uint32_t CFG::find_common_dominator(uint32_t a, uint32_t b) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
find_constexpr_sampler	spirv_msl.cpp	/^const MSLConstexprSampler *CompilerMSL::find_constexpr_sampler(uint32_t id) const$/;"	f	class:CompilerMSL
find_function_local_luts	spirv_cross.cpp	/^void Compiler::find_function_local_luts(SPIRFunction &entry, const AnalyzeVariableScopeAccessHandler &handler,$/;"	f	class:Compiler
find_loop_dominator	spirv_cfg.cpp	/^uint32_t CFG::find_loop_dominator(uint32_t block_id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
find_meta	spirv_cross_parsed_ir.cpp	/^Meta *ParsedIR::find_meta(ID id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
find_meta	spirv_cross_parsed_ir.cpp	/^const Meta *ParsedIR::find_meta(ID id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
find_static_extensions	spirv_glsl.cpp	/^void CompilerGLSL::find_static_extensions()$/;"	f	class:CompilerGLSL
find_subpass_input_by_attachment_index	spirv_glsl.cpp	/^const SPIRVariable *CompilerGLSL::find_subpass_input_by_attachment_index(uint32_t index) const$/;"	f	class:CompilerGLSL
fix_up_interface_member_indices	spirv_msl.cpp	/^void CompilerMSL::fix_up_interface_member_indices(StorageClass storage, uint32_t ib_type_id)$/;"	f	class:CompilerMSL
fix_up_interpolant_access_chain	spirv_msl.cpp	/^void CompilerMSL::fix_up_interpolant_access_chain(const uint32_t *ops, uint32_t length)$/;"	f	class:CompilerMSL
fix_up_shader_inputs_outputs	spirv_msl.cpp	/^void CompilerMSL::fix_up_shader_inputs_outputs()$/;"	f	class:CompilerMSL
fixed_subgroup_size	spirv_msl.hpp	/^		uint32_t fixed_subgroup_size = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
fixup	main.cpp	/^	bool fixup = false;$/;"	m	struct:CLIArguments	file:
fixup_anonymous_struct_names	spirv_glsl.cpp	/^void CompilerGLSL::fixup_anonymous_struct_names()$/;"	f	class:CompilerGLSL
fixup_anonymous_struct_names	spirv_glsl.cpp	/^void CompilerGLSL::fixup_anonymous_struct_names(std::unordered_set<uint32_t> &visited, const SPIRType &type)$/;"	f	class:CompilerGLSL
fixup_clipspace	spirv_glsl.hpp	/^			bool fixup_clipspace = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::VertexOptions
fixup_hooks_in	spirv_common.hpp	/^	Vector<std::function<void()>> fixup_hooks_in;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
fixup_hooks_out	spirv_common.hpp	/^	Vector<std::function<void()>> fixup_hooks_out;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
fixup_image_load_store_access	spirv_glsl.cpp	/^void CompilerGLSL::fixup_image_load_store_access()$/;"	f	class:CompilerGLSL
fixup_implicit_builtin_block_names	spirv_glsl.cpp	/^void CompilerGLSL::fixup_implicit_builtin_block_names()$/;"	f	class:CompilerGLSL
fixup_io_block_patch_qualifiers	spirv_glsl.cpp	/^void CompilerGLSL::fixup_io_block_patch_qualifiers(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
fixup_radix_point	spirv_common.hpp	/^static inline void fixup_radix_point(char *str, char radix_point)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
fixup_reserved_names	spirv_cross_parsed_ir.cpp	/^void ParsedIR::fixup_reserved_names()$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
fixup_type_alias	spirv_glsl.cpp	/^void CompilerGLSL::fixup_type_alias()$/;"	f	class:CompilerGLSL
flags	spirv_common.hpp	/^			Bitset flags;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration::Extended
flags	spirv_common.hpp	/^	Bitset flags;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
flags_to_qualifiers_glsl	spirv_glsl.cpp	/^string CompilerGLSL::flags_to_qualifiers_glsl(const SPIRType &type, const Bitset &flags)$/;"	f	class:CompilerGLSL
flat	spirv_msl.hpp	/^			bool flat = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
flatten_buffer_block	spirv_glsl.cpp	/^void CompilerGLSL::flatten_buffer_block(VariableID id)$/;"	f	class:CompilerGLSL
flatten_matrix_vertex_input_semantics	spirv_hlsl.hpp	/^		bool flatten_matrix_vertex_input_semantics = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
flatten_multidimensional_arrays	main.cpp	/^	bool flatten_multidimensional_arrays = false;$/;"	m	struct:CLIArguments	file:
flatten_multidimensional_arrays	spirv_glsl.hpp	/^		bool flatten_multidimensional_arrays = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
flatten_ubo	main.cpp	/^	bool flatten_ubo = false;$/;"	m	struct:CLIArguments	file:
flattened_access_chain	spirv_glsl.cpp	/^std::string CompilerGLSL::flattened_access_chain(uint32_t base, const uint32_t *indices, uint32_t count,$/;"	f	class:CompilerGLSL
flattened_access_chain_matrix	spirv_glsl.cpp	/^std::string CompilerGLSL::flattened_access_chain_matrix(uint32_t base, const uint32_t *indices, uint32_t count,$/;"	f	class:CompilerGLSL
flattened_access_chain_offset	spirv_glsl.cpp	/^std::pair<std::string, uint32_t> CompilerGLSL::flattened_access_chain_offset($/;"	f	class:CompilerGLSL
flattened_access_chain_struct	spirv_glsl.cpp	/^std::string CompilerGLSL::flattened_access_chain_struct(uint32_t base, const uint32_t *indices, uint32_t count,$/;"	f	class:CompilerGLSL
flattened_access_chain_vector	spirv_glsl.cpp	/^std::string CompilerGLSL::flattened_access_chain_vector(uint32_t base, const uint32_t *indices, uint32_t count,$/;"	f	class:CompilerGLSL
flattened_buffer_blocks	spirv_glsl.hpp	/^	std::unordered_set<uint32_t> flattened_buffer_blocks;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
flattened_struct	spirv_common.hpp	/^	bool flattened_struct = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
flattened_structs	spirv_glsl.hpp	/^	std::unordered_map<uint32_t, bool> flattened_structs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
flip_vert_y	spirv_glsl.hpp	/^			bool flip_vert_y = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::VertexOptions
float_literal_suffix	spirv_glsl.hpp	/^		bool float_literal_suffix = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
flush_all_active_variables	spirv_cross.cpp	/^void Compiler::flush_all_active_variables()$/;"	f	class:Compiler
flush_all_aliased_variables	spirv_cross.cpp	/^void Compiler::flush_all_aliased_variables()$/;"	f	class:Compiler
flush_all_atomic_capable_variables	spirv_cross.cpp	/^void Compiler::flush_all_atomic_capable_variables()$/;"	f	class:Compiler
flush_control_dependent_expressions	spirv_cross.cpp	/^void Compiler::flush_control_dependent_expressions(uint32_t block_id)$/;"	f	class:Compiler
flush_dependees	spirv_cross.cpp	/^void Compiler::flush_dependees(SPIRVariable &var)$/;"	f	class:Compiler
flush_phi	spirv_glsl.cpp	/^void CompilerGLSL::flush_phi(BlockID from, BlockID to)$/;"	f	class:CompilerGLSL
flush_phi_required	spirv_cross.cpp	/^bool Compiler::flush_phi_required(BlockID from, BlockID to) const$/;"	f	class:Compiler
flush_undeclared	spirv_common.hpp	/^	bool flush_undeclared = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
flush_undeclared_variables	spirv_glsl.cpp	/^void CompilerGLSL::flush_undeclared_variables(SPIRBlock &block)$/;"	f	class:CompilerGLSL
flush_variable_declaration	spirv_glsl.cpp	/^void CompilerGLSL::flush_variable_declaration(uint32_t id)$/;"	f	class:CompilerGLSL
flushed_phi_variables	spirv_glsl.hpp	/^	std::unordered_set<uint32_t> flushed_phi_variables;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
follow_function_call	spirv_cross.cpp	/^bool Compiler::AnalyzeVariableScopeAccessHandler::follow_function_call(const SPIRFunction &)$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
follow_function_call	spirv_cross.cpp	/^bool Compiler::CFGBuilder::follow_function_call(const SPIRFunction &func)$/;"	f	class:Compiler::CFGBuilder
follow_function_call	spirv_cross.cpp	/^bool Compiler::StaticExpressionAccessHandler::follow_function_call(const SPIRFunction &)$/;"	f	class:Compiler::StaticExpressionAccessHandler
follow_function_call	spirv_cross.hpp	/^		virtual bool follow_function_call(const SPIRFunction &)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
for_each_bit	spirv_common.hpp	/^	void for_each_bit(const Op &op) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
for_each_typed_id	spirv_cross_parsed_ir.hpp	/^	void for_each_typed_id(const Op &op) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
for_each_typed_id	spirv_cross_parsed_ir.hpp	/^	void for_each_typed_id(const Op &op)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
for_loop_initializers_are_same_type	spirv_glsl.cpp	/^bool CompilerGLSL::for_loop_initializers_are_same_type(const SPIRBlock &block)$/;"	f	class:CompilerGLSL
force_active_argument_buffer_resources	spirv_msl.hpp	/^		bool force_active_argument_buffer_resources = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
force_flattened_io_blocks	spirv_glsl.hpp	/^		bool force_flattened_io_blocks = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
force_gl_in_out_block	spirv_glsl.hpp	/^		bool force_gl_in_out_block = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
force_inline	spirv_msl.cpp	/^static const char *force_inline = "static inline __attribute__((always_inline))";$/;"	v	file:
force_native_arrays	spirv_msl.hpp	/^		bool force_native_arrays = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
force_recompile	spirv_cross.cpp	/^void Compiler::force_recompile()$/;"	f	class:Compiler
force_recompile_guarantee_forward_progress	spirv_cross.cpp	/^void Compiler::force_recompile_guarantee_forward_progress()$/;"	f	class:Compiler
force_recompile_max_debug_iterations	main.cpp	/^	uint32_t force_recompile_max_debug_iterations = 3;$/;"	m	struct:CLIArguments	file:
force_recompile_max_debug_iterations	spirv_glsl.hpp	/^		uint32_t force_recompile_max_debug_iterations = 3;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
force_sample_rate_shading	spirv_msl.hpp	/^		bool force_sample_rate_shading = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
force_storage_buffer_as_uav	spirv_hlsl.hpp	/^		bool force_storage_buffer_as_uav = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
force_temporary	main.cpp	/^	bool force_temporary = false;$/;"	m	struct:CLIArguments	file:
force_temporary	spirv_glsl.hpp	/^		bool force_temporary = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
force_temporary_and_recompile	spirv_glsl.cpp	/^void CompilerGLSL::force_temporary_and_recompile(uint32_t id)$/;"	f	class:CompilerGLSL
force_uav_buffer_bindings	spirv_hlsl.hpp	/^	std::unordered_set<SetBindingPair, InternalHasher> force_uav_buffer_bindings;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
force_zero_initialized_variables	main.cpp	/^	bool force_zero_initialized_variables = false;$/;"	m	struct:CLIArguments	file:
force_zero_initialized_variables	spirv_glsl.hpp	/^		bool force_zero_initialized_variables = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
forced_extensions	spirv_glsl.hpp	/^	SmallVector<std::string> forced_extensions;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
forced_invariant_temporaries	spirv_cross.hpp	/^	std::unordered_set<uint32_t> forced_invariant_temporaries;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
forced_temporaries	spirv_cross.hpp	/^	std::unordered_set<uint32_t> forced_temporaries;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
format	main.cpp	/^	PlsFormat format;$/;"	m	struct:PLSArg	file:
format	spirv_common.hpp	/^		spv::ImageFormat format;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
format	spirv_cross_c.h	/^	spvc_msl_vertex_format format;$/;"	m	struct:spvc_msl_shader_input
format	spirv_cross_c.h	/^	spvc_msl_vertex_format format;$/;"	m	struct:spvc_msl_vertex_attribute
format	spirv_glsl.hpp	/^	PlsFormat format;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::PlsRemap
format	spirv_msl.hpp	/^	MSLShaderInputFormat format = MSL_SHADER_INPUT_FORMAT_OTHER;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLShaderInput
format_to_glsl	spirv_glsl.cpp	/^const char *CompilerGLSL::format_to_glsl(spv::ImageFormat format)$/;"	f	class:CompilerGLSL
forward_pointer	spirv_common.hpp	/^	bool forward_pointer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
forward_pointer_fixups	spirv_parser.hpp	/^	SmallVector<std::pair<uint32_t, uint32_t>> forward_pointer_fixups;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Parser
forward_relaxed_precision	spirv_glsl.cpp	/^void CompilerGLSL::forward_relaxed_precision(uint32_t dst_id, const uint32_t *args, uint32_t length)$/;"	f	class:CompilerGLSL
forwarded_temporaries	spirv_cross.hpp	/^	std::unordered_set<uint32_t> forwarded_temporaries;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
fp_rounding_mode	spirv_common.hpp	/^		spv::FPRoundingMode fp_rounding_mode = spv::FPRoundingModeMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
fragment	spirv_glsl.hpp	/^		} fragment;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options	typeref:struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::FragmentOptions
fragment_output_components	spirv_msl.hpp	/^	std::unordered_map<uint32_t, uint32_t> fragment_output_components;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
func	spirv_cfg.hpp	/^	const SPIRFunction &func;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
func_type_decl	spirv_msl.cpp	/^string CompilerMSL::func_type_decl(SPIRType &type)$/;"	f	class:CompilerMSL
function_cfgs	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unique_ptr<CFG>> function_cfgs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CFGBuilder
function_cfgs	spirv_cross.hpp	/^	std::unordered_map<uint32_t, std::unique_ptr<CFG>> function_cfgs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
function_global_vars	spirv_msl.hpp	/^	std::unordered_map<uint32_t, std::set<uint32_t>> function_global_vars;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
function_is_pure	spirv_cross.cpp	/^bool Compiler::function_is_pure(const SPIRFunction &func)$/;"	f	class:Compiler
function_overloads	spirv_glsl.hpp	/^	std::unordered_map<std::string, std::unordered_set<uint64_t>> function_overloads;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
function_type	spirv_common.hpp	/^	TypeID function_type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
function_variable	spirv_common.hpp	/^		VariableID function_variable; \/\/ to this function-global "phi" variable first.$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock::Phi
functions	spirv_cross.hpp	/^		std::stack<SPIRFunction *> functions;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
geometry_passthrough	spirv_common.hpp	/^	bool geometry_passthrough = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
get	spirv_cfg.hpp	/^		const int &get() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CFG::VisitOrder
get	spirv_cfg.hpp	/^		int &get()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CFG::VisitOrder
get	spirv_common.hpp	/^	T &get()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
get	spirv_common.hpp	/^	const T &get() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
get	spirv_common.hpp	/^	inline bool get(uint32_t bit) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
get	spirv_common.hpp	/^	inline uint64_t get() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Hasher
get	spirv_cross.hpp	/^	T &get(uint32_t id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
get	spirv_cross.hpp	/^	const T &get(uint32_t id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
get	spirv_cross_parsed_ir.hpp	/^	T &get(uint32_t id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get	spirv_cross_parsed_ir.hpp	/^	const T &get(uint32_t id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get	spirv_parser.hpp	/^	T &get(uint32_t id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
get	spirv_parser.hpp	/^	const T &get(uint32_t id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
get_KHR_extension_for_feature	spirv_glsl.cpp	/^    get_KHR_extension_for_feature(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_accumulated_member_location	spirv_glsl.cpp	/^uint32_t CompilerGLSL::get_accumulated_member_location(const SPIRVariable &var, uint32_t mbr_idx, bool strip_array) const$/;"	f	class:CompilerGLSL
get_active_buffer_ranges	spirv_cross.cpp	/^SmallVector<BufferRange> Compiler::get_active_buffer_ranges(VariableID id) const$/;"	f	class:Compiler
get_active_interface_variables	spirv_cross.cpp	/^unordered_set<VariableID> Compiler::get_active_interface_variables() const$/;"	f	class:Compiler
get_argument_address_space	spirv_msl.cpp	/^string CompilerMSL::get_argument_address_space(const SPIRVariable &argument)$/;"	f	class:CompilerMSL
get_argument_buffer_resource	spirv_msl.cpp	/^MSLResourceBinding &CompilerMSL::get_argument_buffer_resource(uint32_t desc_set, uint32_t arg_idx)$/;"	f	class:CompilerMSL
get_automatic_builtin_input_location	spirv_msl.cpp	/^uint32_t CompilerMSL::get_automatic_builtin_input_location(spv::BuiltIn builtin) const$/;"	f	class:CompilerMSL
get_automatic_msl_resource_binding	spirv_msl.cpp	/^uint32_t CompilerMSL::get_automatic_msl_resource_binding(uint32_t id) const$/;"	f	class:CompilerMSL
get_automatic_msl_resource_binding_quaternary	spirv_msl.cpp	/^uint32_t CompilerMSL::get_automatic_msl_resource_binding_quaternary(uint32_t id) const$/;"	f	class:CompilerMSL
get_automatic_msl_resource_binding_secondary	spirv_msl.cpp	/^uint32_t CompilerMSL::get_automatic_msl_resource_binding_secondary(uint32_t id) const$/;"	f	class:CompilerMSL
get_automatic_msl_resource_binding_tertiary	spirv_msl.cpp	/^uint32_t CompilerMSL::get_automatic_msl_resource_binding_tertiary(uint32_t id) const$/;"	f	class:CompilerMSL
get_base_non_block_type_id	spirv_cross.cpp	/^uint32_t Compiler::PhysicalStorageBufferPointerHandler::get_base_non_block_type_id(uint32_t type_id) const$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
get_binary_offset_for_decoration	spirv_cross.cpp	/^bool Compiler::get_binary_offset_for_decoration(VariableID id, spv::Decoration decoration, uint32_t &word_offset) const$/;"	f	class:Compiler
get_bitcast_type	spirv_hlsl.cpp	/^CompilerHLSL::BitcastType CompilerHLSL::get_bitcast_type(uint32_t result_type, uint32_t op0)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
get_block_fallback_name	spirv_cross.cpp	/^const std::string Compiler::get_block_fallback_name(VariableID id) const$/;"	f	class:Compiler
get_buffer_block_flags	spirv_cross.cpp	/^Bitset Compiler::get_buffer_block_flags(VariableID id) const$/;"	f	class:Compiler
get_buffer_block_flags	spirv_cross_parsed_ir.cpp	/^Bitset ParsedIR::get_buffer_block_flags(const SPIRVariable &var) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_buffer_block_type_flags	spirv_cross_parsed_ir.cpp	/^Bitset ParsedIR::get_buffer_block_type_flags(const SPIRType &type) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_candidates_for_feature	spirv_glsl.cpp	/^    get_candidates_for_feature(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_candidates_for_feature	spirv_glsl.cpp	/^    get_candidates_for_feature(Feature ft, const Result &r)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_case_list	spirv_cross.cpp	/^const SmallVector<SPIRBlock::Case> &Compiler::get_case_list(const SPIRBlock &block) const$/;"	f	class:Compiler
get_cfg_for_current_function	spirv_cross.cpp	/^const CFG &Compiler::get_cfg_for_current_function() const$/;"	f	class:Compiler
get_cfg_for_function	spirv_cross.cpp	/^const CFG &Compiler::get_cfg_for_function(uint32_t id) const$/;"	f	class:Compiler
get_cleansed_entry_point_name	spirv_cross.cpp	/^const string &Compiler::get_cleansed_entry_point_name(const std::string &name, ExecutionModel model) const$/;"	f	class:Compiler
get_combined_image_samplers	spirv_cross.hpp	/^	const SmallVector<CombinedImageSampler> &get_combined_image_samplers() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
get_combined_sampler_suffix	spirv_msl.cpp	/^const char *CompilerMSL::get_combined_sampler_suffix() const$/;"	f	class:CompilerMSL
get_common_basic_type	spirv_cross.cpp	/^bool Compiler::get_common_basic_type(const SPIRType &type, SPIRType::BaseType &base_type)$/;"	f	class:Compiler
get_common_options	spirv_glsl.hpp	/^	const Options &get_common_options() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
get_compiler	spirv_cfg.hpp	/^	Compiler &get_compiler()$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_compiler	spirv_cfg.hpp	/^	const Compiler &get_compiler() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_constant	spirv_cross.cpp	/^SPIRConstant &Compiler::get_constant(ConstantID id)$/;"	f	class:Compiler
get_constant	spirv_cross.cpp	/^const SPIRConstant &Compiler::get_constant(ConstantID id) const$/;"	f	class:Compiler
get_constant_mapping_to_workgroup_component	spirv_glsl.cpp	/^int CompilerGLSL::get_constant_mapping_to_workgroup_component(const SPIRConstant &c) const$/;"	f	class:CompilerGLSL
get_current_id_bound	spirv_cross.hpp	/^	uint32_t get_current_id_bound() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
get_declared_capabilities	spirv_cross.cpp	/^const SmallVector<spv::Capability> &Compiler::get_declared_capabilities() const$/;"	f	class:Compiler
get_declared_extensions	spirv_cross.cpp	/^const SmallVector<std::string> &Compiler::get_declared_extensions() const$/;"	f	class:Compiler
get_declared_input_alignment_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_input_alignment_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_input_array_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_input_array_stride_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_input_matrix_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_input_matrix_stride_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_input_size_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_input_size_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_member_location	spirv_glsl.cpp	/^uint32_t CompilerGLSL::get_declared_member_location(const SPIRVariable &var, uint32_t mbr_idx, bool strip_array) const$/;"	f	class:CompilerGLSL
get_declared_struct_member_alignment_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_struct_member_alignment_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_struct_member_array_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_struct_member_array_stride_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_struct_member_matrix_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_struct_member_matrix_stride_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_struct_member_size	spirv_cross.cpp	/^size_t Compiler::get_declared_struct_member_size(const SPIRType &struct_type, uint32_t index) const$/;"	f	class:Compiler
get_declared_struct_member_size_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_struct_member_size_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_declared_struct_size	spirv_cross.cpp	/^size_t Compiler::get_declared_struct_size(const SPIRType &type) const$/;"	f	class:Compiler
get_declared_struct_size_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_struct_size_msl(const SPIRType &struct_type, bool ignore_alignment,$/;"	f	class:CompilerMSL
get_declared_struct_size_runtime_array	spirv_cross.cpp	/^size_t Compiler::get_declared_struct_size_runtime_array(const SPIRType &type, size_t array_size) const$/;"	f	class:Compiler
get_declared_type_alignment_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_type_alignment_msl(const SPIRType &type, bool is_packed, bool row_major) const$/;"	f	class:CompilerMSL
get_declared_type_array_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_type_array_stride_msl(const SPIRType &type, bool is_packed, bool row_major) const$/;"	f	class:CompilerMSL
get_declared_type_matrix_stride_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_type_matrix_stride_msl(const SPIRType &type, bool packed, bool row_major) const$/;"	f	class:CompilerMSL
get_declared_type_size_msl	spirv_msl.cpp	/^uint32_t CompilerMSL::get_declared_type_size_msl(const SPIRType &type, bool is_packed, bool row_major) const$/;"	f	class:CompilerMSL
get_decoration	spirv_cross.cpp	/^uint32_t Compiler::get_decoration(ID id, Decoration decoration) const$/;"	f	class:Compiler
get_decoration	spirv_cross_parsed_ir.cpp	/^uint32_t ParsedIR::get_decoration(ID id, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_decoration_bitset	spirv_cross.cpp	/^const Bitset &Compiler::get_decoration_bitset(ID id) const$/;"	f	class:Compiler
get_decoration_bitset	spirv_cross_parsed_ir.cpp	/^const Bitset &ParsedIR::get_decoration_bitset(ID id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_decoration_string	spirv_cross.cpp	/^const string &Compiler::get_decoration_string(ID id, Decoration decoration) const$/;"	f	class:Compiler
get_decoration_string	spirv_cross_parsed_ir.cpp	/^const string &ParsedIR::get_decoration_string(ID id, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_default_extended_decoration	spirv_cross.cpp	/^static uint32_t get_default_extended_decoration(ExtendedDecorations decoration)$/;"	f	file:
get_dominator	spirv_cfg.hpp	/^	uint32_t get_dominator() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
get_empty_string	spirv_cross_parsed_ir.hpp	/^	const std::string &get_empty_string() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_entry_point	spirv_cross.cpp	/^SPIREntryPoint &Compiler::get_entry_point()$/;"	f	class:Compiler
get_entry_point	spirv_cross.cpp	/^SPIREntryPoint &Compiler::get_entry_point(const std::string &name, ExecutionModel model)$/;"	f	class:Compiler
get_entry_point	spirv_cross.cpp	/^const SPIREntryPoint &Compiler::get_entry_point() const$/;"	f	class:Compiler
get_entry_point	spirv_cross.cpp	/^const SPIREntryPoint &Compiler::get_entry_point(const std::string &name, ExecutionModel model) const$/;"	f	class:Compiler
get_entry_points_and_stages	spirv_cross.cpp	/^SmallVector<EntryPoint> Compiler::get_entry_points_and_stages() const$/;"	f	class:Compiler
get_execution_mode_argument	spirv_cross.cpp	/^uint32_t Compiler::get_execution_mode_argument(spv::ExecutionMode mode, uint32_t index) const$/;"	f	class:Compiler
get_execution_mode_bitset	spirv_cross.cpp	/^const Bitset &Compiler::get_execution_mode_bitset() const$/;"	f	class:Compiler
get_execution_model	spirv_cross.cpp	/^ExecutionModel Compiler::get_execution_model() const$/;"	f	class:Compiler
get_expression_effective_storage_class	spirv_glsl.cpp	/^StorageClass CompilerGLSL::get_expression_effective_storage_class(uint32_t ptr)$/;"	f	class:CompilerGLSL
get_extended_decoration	spirv_cross.cpp	/^uint32_t Compiler::get_extended_decoration(uint32_t id, ExtendedDecorations decoration) const$/;"	f	class:Compiler
get_extended_member_decoration	spirv_cross.cpp	/^uint32_t Compiler::get_extended_member_decoration(uint32_t type, uint32_t index, ExtendedDecorations decoration) const$/;"	f	class:Compiler
get_extension_name	spirv_glsl.cpp	/^const char *CompilerGLSL::ShaderSubgroupSupportHelper::get_extension_name(Candidate c)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_extra_required_extension_names	spirv_glsl.cpp	/^SmallVector<std::string> CompilerGLSL::ShaderSubgroupSupportHelper::get_extra_required_extension_names(Candidate c)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_extra_required_extension_predicate	spirv_glsl.cpp	/^const char *CompilerGLSL::ShaderSubgroupSupportHelper::get_extra_required_extension_predicate(Candidate c)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_fallback_member_name	spirv_cross.hpp	/^	virtual const std::string get_fallback_member_name(uint32_t index) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
get_fallback_name	spirv_cross.cpp	/^const std::string Compiler::get_fallback_name(ID id) const$/;"	f	class:Compiler
get_feature_dependencies	spirv_glsl.cpp	/^    get_feature_dependencies(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_feature_dependency_mask	spirv_glsl.cpp	/^    get_feature_dependency_mask(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
get_first_entry_point	spirv_cross.cpp	/^SPIREntryPoint &Compiler::get_first_entry_point(const std::string &name)$/;"	f	class:Compiler
get_first_entry_point	spirv_cross.cpp	/^const SPIREntryPoint &Compiler::get_first_entry_point(const std::string &name) const$/;"	f	class:Compiler
get_function	spirv_cfg.hpp	/^	const SPIRFunction &get_function() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_hlsl_options	spirv_hlsl.hpp	/^	const Options &get_hlsl_options() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
get_id	spirv_common.hpp	/^	ID get_id() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
get_illegal_func_names	spirv_msl.cpp	/^const std::unordered_set<std::string> &CompilerMSL::get_illegal_func_names()$/;"	f	class:CompilerMSL
get_immediate_dominator	spirv_cfg.hpp	/^	uint32_t get_immediate_dominator(uint32_t block) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_integer_width_for_glsl_instruction	spirv_glsl.cpp	/^uint32_t CompilerGLSL::get_integer_width_for_glsl_instruction(GLSLstd450 op, const uint32_t *ops, uint32_t length) const$/;"	f	class:CompilerGLSL
get_integer_width_for_instruction	spirv_glsl.cpp	/^uint32_t CompilerGLSL::get_integer_width_for_instruction(const Instruction &instr) const$/;"	f	class:CompilerGLSL
get_is_rasterization_disabled	spirv_msl.hpp	/^	bool get_is_rasterization_disabled() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
get_lower	spirv_common.hpp	/^	inline uint64_t get_lower() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
get_member_decoration	spirv_cross.cpp	/^uint32_t Compiler::get_member_decoration(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:Compiler
get_member_decoration	spirv_cross_parsed_ir.cpp	/^uint32_t ParsedIR::get_member_decoration(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_member_decoration_bitset	spirv_cross.cpp	/^const Bitset &Compiler::get_member_decoration_bitset(TypeID id, uint32_t index) const$/;"	f	class:Compiler
get_member_decoration_bitset	spirv_cross_parsed_ir.cpp	/^const Bitset &ParsedIR::get_member_decoration_bitset(TypeID id, uint32_t index) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_member_decoration_string	spirv_cross.cpp	/^const string &Compiler::get_member_decoration_string(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:Compiler
get_member_decoration_string	spirv_cross_parsed_ir.cpp	/^const string &ParsedIR::get_member_decoration_string(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_member_location	spirv_msl.cpp	/^uint32_t CompilerMSL::get_member_location(uint32_t type_id, uint32_t index, uint32_t *comp) const$/;"	f	class:CompilerMSL
get_member_name	spirv_cross.cpp	/^const std::string &Compiler::get_member_name(TypeID id, uint32_t index) const$/;"	f	class:Compiler
get_member_name	spirv_cross_parsed_ir.cpp	/^const string &ParsedIR::get_member_name(TypeID id, uint32_t index) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_member_qualified_name	spirv_cross.cpp	/^const string &Compiler::get_member_qualified_name(TypeID type_id, uint32_t index) const$/;"	f	class:Compiler
get_memory_order	spirv_msl.cpp	/^const char *CompilerMSL::get_memory_order(uint32_t)$/;"	f	class:CompilerMSL
get_metal_resource_index	spirv_msl.cpp	/^uint32_t CompilerMSL::get_metal_resource_index(SPIRVariable &var, SPIRType::BaseType basetype, uint32_t plane)$/;"	f	class:CompilerMSL
get_minimum_scalar_alignment	spirv_cross.cpp	/^uint32_t Compiler::PhysicalStorageBufferPointerHandler::get_minimum_scalar_alignment(const SPIRType &type) const$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
get_msl_options	spirv_msl.hpp	/^	const Options &get_msl_options() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
get_name	spirv_cross.cpp	/^const std::string &Compiler::get_name(ID id) const$/;"	f	class:Compiler
get_name	spirv_cross_parsed_ir.cpp	/^const string &ParsedIR::get_name(ID id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_next_instruction_in_block	spirv_glsl.cpp	/^const Instruction *CompilerGLSL::get_next_instruction_in_block(const Instruction &instr)$/;"	f	class:CompilerGLSL
get_or_allocate_builtin_input_member_location	spirv_msl.cpp	/^uint32_t CompilerMSL::get_or_allocate_builtin_input_member_location(spv::BuiltIn builtin,$/;"	f	class:CompilerMSL
get_parsed_ir	spirv_parser.hpp	/^	ParsedIR &get_parsed_ir()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
get_partial_source	spirv_glsl.cpp	/^std::string CompilerGLSL::get_partial_source()$/;"	f	class:CompilerGLSL
get_patch_stage_in_struct_type	spirv_msl.cpp	/^SPIRType &CompilerMSL::get_patch_stage_in_struct_type()$/;"	f	class:CompilerMSL
get_patch_stage_out_struct_type	spirv_msl.cpp	/^SPIRType &CompilerMSL::get_patch_stage_out_struct_type()$/;"	f	class:CompilerMSL
get_physical_member_type	spirv_msl.cpp	/^const SPIRType &CompilerMSL::get_physical_member_type(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
get_physical_tess_level_array_size	spirv_msl.cpp	/^uint32_t CompilerMSL::get_physical_tess_level_array_size(spv::BuiltIn builtin) const$/;"	f	class:CompilerMSL
get_pointee_type	spirv_cross.cpp	/^const SPIRType &Compiler::get_pointee_type(const SPIRType &type) const$/;"	f	class:Compiler
get_pointee_type	spirv_cross.cpp	/^const SPIRType &Compiler::get_pointee_type(uint32_t type_id) const$/;"	f	class:Compiler
get_pointee_type_id	spirv_cross.cpp	/^uint32_t Compiler::get_pointee_type_id(uint32_t type_id) const$/;"	f	class:Compiler
get_preceding_edges	spirv_cfg.hpp	/^	const SmallVector<uint32_t> &get_preceding_edges(uint32_t block) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_presumed_input_type	spirv_msl.cpp	/^SPIRType CompilerMSL::get_presumed_input_type(const SPIRType &ib_type, uint32_t index) const$/;"	f	class:CompilerMSL
get_remapped_declared_block_name	spirv_cross.cpp	/^std::string Compiler::get_remapped_declared_block_name(VariableID id) const$/;"	f	class:Compiler
get_remapped_declared_block_name	spirv_cross.cpp	/^std::string Compiler::get_remapped_declared_block_name(uint32_t id, bool fallback_prefer_instance_name) const$/;"	f	class:Compiler
get_remapped_glsl_op	spirv_glsl.cpp	/^GLSLstd450 CompilerGLSL::get_remapped_glsl_op(GLSLstd450 std450_op) const$/;"	f	class:CompilerGLSL
get_remapped_spirv_op	spirv_glsl.cpp	/^Op CompilerGLSL::get_remapped_spirv_op(Op op) const$/;"	f	class:CompilerGLSL
get_remapped_variable_state	spirv_cross.cpp	/^bool Compiler::get_remapped_variable_state(VariableID id) const$/;"	f	class:Compiler
get_reserved_keyword_set	spirv_msl.cpp	/^const std::unordered_set<std::string> &CompilerMSL::get_reserved_keyword_set()$/;"	f	class:CompilerMSL
get_resource_array_size	spirv_msl.cpp	/^uint32_t CompilerMSL::get_resource_array_size(uint32_t id) const$/;"	f	class:CompilerMSL
get_shader_resources	spirv_cross.cpp	/^ShaderResources Compiler::get_shader_resources() const$/;"	f	class:Compiler
get_shader_resources	spirv_cross.cpp	/^ShaderResources Compiler::get_shader_resources(const unordered_set<VariableID> &active_variables) const$/;"	f	class:Compiler
get_shader_resources	spirv_cross.cpp	/^ShaderResources Compiler::get_shader_resources(const unordered_set<VariableID> *active_variables) const$/;"	f	class:Compiler
get_sparse_feedback_texel_id	spirv_glsl.cpp	/^uint32_t CompilerGLSL::get_sparse_feedback_texel_id(uint32_t id) const$/;"	f	class:CompilerGLSL
get_specialization_constants	spirv_cross.cpp	/^SmallVector<SpecializationConstant> Compiler::get_specialization_constants() const$/;"	f	class:Compiler
get_spirv_version	spirv_cross_parsed_ir.cpp	/^uint32_t ParsedIR::get_spirv_version() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
get_spv_func_impl	spirv_msl.cpp	/^CompilerMSL::SPVFuncImpl CompilerMSL::OpCodePreprocessor::get_spv_func_impl(Op opcode, const uint32_t *args)$/;"	f	class:CompilerMSL::OpCodePreprocessor
get_stage_in_struct_type	spirv_msl.cpp	/^SPIRType &CompilerMSL::get_stage_in_struct_type()$/;"	f	class:CompilerMSL
get_stage_out_struct_type	spirv_msl.cpp	/^SPIRType &CompilerMSL::get_stage_out_struct_type()$/;"	f	class:CompilerMSL
get_storage_class	spirv_cross.cpp	/^StorageClass Compiler::get_storage_class(VariableID id) const$/;"	f	class:Compiler
get_subpass_input_remapped_components	spirv_cross.cpp	/^uint32_t Compiler::get_subpass_input_remapped_components(VariableID id) const$/;"	f	class:Compiler
get_succeeding_edges	spirv_cfg.hpp	/^	const SmallVector<uint32_t> &get_succeeding_edges(uint32_t block) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_target_components_for_fragment_location	spirv_msl.cpp	/^uint32_t CompilerMSL::get_target_components_for_fragment_location(uint32_t location) const$/;"	f	class:CompilerMSL
get_tess_factor_struct_name	spirv_msl.cpp	/^std::string CompilerMSL::get_tess_factor_struct_name()$/;"	f	class:CompilerMSL
get_type	spirv_common.hpp	/^	Types get_type() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
get_type	spirv_cross.cpp	/^const SPIRType &Compiler::get_type(TypeID id) const$/;"	f	class:Compiler
get_type_address_space	spirv_msl.cpp	/^string CompilerMSL::get_type_address_space(const SPIRType &type, uint32_t id, bool argument)$/;"	f	class:CompilerMSL
get_type_from_variable	spirv_cross.cpp	/^const SPIRType &Compiler::get_type_from_variable(VariableID id) const$/;"	f	class:Compiler
get_uint_type	spirv_msl.cpp	/^SPIRType &CompilerMSL::get_uint_type()$/;"	f	class:CompilerMSL
get_uint_type_id	spirv_msl.cpp	/^uint32_t CompilerMSL::get_uint_type_id()$/;"	f	class:CompilerMSL
get_unique_identifier	spirv_hlsl.cpp	/^string CompilerHLSL::get_unique_identifier()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
get_variable_data_type	spirv_cross.cpp	/^SPIRType &Compiler::get_variable_data_type(const SPIRVariable &var)$/;"	f	class:Compiler
get_variable_data_type	spirv_cross.cpp	/^const SPIRType &Compiler::get_variable_data_type(const SPIRVariable &var) const$/;"	f	class:Compiler
get_variable_data_type_id	spirv_cross.cpp	/^uint32_t Compiler::get_variable_data_type_id(const SPIRVariable &var) const$/;"	f	class:Compiler
get_variable_element_type	spirv_cross.cpp	/^SPIRType &Compiler::get_variable_element_type(const SPIRVariable &var)$/;"	f	class:Compiler
get_variable_element_type	spirv_cross.cpp	/^const SPIRType &Compiler::get_variable_element_type(const SPIRVariable &var) const$/;"	f	class:Compiler
get_visit_order	spirv_cfg.hpp	/^	uint32_t get_visit_order(uint32_t block) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
get_work_group_size_specialization_constants	spirv_cross.cpp	/^uint32_t Compiler::get_work_group_size_specialization_constants(SpecializationConstant &x, SpecializationConstant &y,$/;"	f	class:Compiler
global_image	spirv_common.hpp	/^		bool global_image;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
global_sampler	spirv_common.hpp	/^		bool global_sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
global_struct_cache	spirv_cross.hpp	/^	SmallVector<uint32_t> global_struct_cache;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
global_struct_cache	spirv_parser.hpp	/^	SmallVector<uint32_t> global_struct_cache;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Parser
global_variables	spirv_cross.hpp	/^	SmallVector<uint32_t> global_variables;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
glsl	spirv_cross_c.cpp	/^	CompilerGLSL::Options glsl;$/;"	m	struct:spvc_compiler_options_s	file:
glsl_emit_push_constant_as_ubo	main.cpp	/^	bool glsl_emit_push_constant_as_ubo = false;$/;"	m	struct:CLIArguments	file:
glsl_emit_ubo_as_plain_uniforms	main.cpp	/^	bool glsl_emit_ubo_as_plain_uniforms = false;$/;"	m	struct:CLIArguments	file:
glsl_ext_framebuffer_fetch	main.cpp	/^	SmallVector<pair<uint32_t, uint32_t>> glsl_ext_framebuffer_fetch;$/;"	m	struct:CLIArguments	file:
glsl_ext_framebuffer_fetch_noncoherent	main.cpp	/^	bool glsl_ext_framebuffer_fetch_noncoherent = false;$/;"	m	struct:CLIArguments	file:
glsl_force_flattened_io_blocks	main.cpp	/^	bool glsl_force_flattened_io_blocks = false;$/;"	m	struct:CLIArguments	file:
glsl_ovr_multiview_view_count	main.cpp	/^	uint32_t glsl_ovr_multiview_view_count = 0;$/;"	m	struct:CLIArguments	file:
grad_x	spirv_glsl.hpp	/^		uint32_t grad_x = 0, grad_y = 0, lod = 0, coffset = 0, offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
grad_y	spirv_glsl.hpp	/^		uint32_t grad_x = 0, grad_y = 0, lod = 0, coffset = 0, offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
group	spirv_common.hpp	/^	ObjectPoolGroup *group = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Variant
h	spirv_common.hpp	/^	uint64_t h = 0xcbf29ce484222325ull;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Hasher
handle	spirv_cross.cpp	/^bool Compiler::ActiveBuiltinHandler::handle(spv::Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::ActiveBuiltinHandler
handle	spirv_cross.cpp	/^bool Compiler::AnalyzeVariableScopeAccessHandler::handle(spv::Op op, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
handle	spirv_cross.cpp	/^bool Compiler::BufferAccessHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::BufferAccessHandler
handle	spirv_cross.cpp	/^bool Compiler::CFGBuilder::handle(spv::Op, const uint32_t *, uint32_t)$/;"	f	class:Compiler::CFGBuilder
handle	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerDrefHandler::handle(spv::Op opcode, const uint32_t *args, uint32_t)$/;"	f	class:Compiler::CombinedImageSamplerDrefHandler
handle	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::CombinedImageSamplerHandler
handle	spirv_cross.cpp	/^bool Compiler::CombinedImageSamplerUsageHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::CombinedImageSamplerUsageHandler
handle	spirv_cross.cpp	/^bool Compiler::DummySamplerForCombinedImageHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::DummySamplerForCombinedImageHandler
handle	spirv_cross.cpp	/^bool Compiler::InterfaceVariableAccessHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::InterfaceVariableAccessHandler
handle	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessHandler::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::InterlockedResourceAccessHandler
handle	spirv_cross.cpp	/^bool Compiler::InterlockedResourceAccessPrepassHandler::handle(Op op, const uint32_t *, uint32_t)$/;"	f	class:Compiler::InterlockedResourceAccessPrepassHandler
handle	spirv_cross.cpp	/^bool Compiler::PhysicalStorageBufferPointerHandler::handle(Op op, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
handle	spirv_cross.cpp	/^bool Compiler::StaticExpressionAccessHandler::handle(spv::Op op, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::StaticExpressionAccessHandler
handle	spirv_msl.cpp	/^bool CompilerMSL::OpCodePreprocessor::handle(Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:CompilerMSL::OpCodePreprocessor
handle	spirv_msl.cpp	/^bool CompilerMSL::SampledImageScanner::handle(spv::Op opcode, const uint32_t *args, uint32_t length)$/;"	f	class:CompilerMSL::SampledImageScanner
handle_builtin	spirv_cross.cpp	/^void Compiler::ActiveBuiltinHandler::handle_builtin(const SPIRType &type, BuiltIn builtin,$/;"	f	class:Compiler::ActiveBuiltinHandler
handle_instruction_precision	spirv_glsl.cpp	/^CompilerGLSL::TemporaryCopy CompilerGLSL::handle_instruction_precision(const Instruction &instruction)$/;"	f	class:CompilerGLSL
handle_invalid_expression	spirv_glsl.cpp	/^void CompilerGLSL::handle_invalid_expression(uint32_t id)$/;"	f	class:CompilerGLSL
handle_store_to_invariant_variable	spirv_glsl.cpp	/^void CompilerGLSL::handle_store_to_invariant_variable(uint32_t store_id, uint32_t value_id)$/;"	f	class:CompilerGLSL
handle_terminator	spirv_cross.cpp	/^bool Compiler::AnalyzeVariableScopeAccessHandler::handle_terminator(const SPIRBlock &block)$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
handle_terminator	spirv_cross.hpp	/^		virtual bool handle_terminator(const SPIRBlock &)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
has_active_builtin	spirv_cross.cpp	/^bool Compiler::has_active_builtin(BuiltIn builtin, StorageClass storage) const$/;"	f	class:Compiler
has_additional_fixed_sample_mask	spirv_msl.hpp	/^	bool has_additional_fixed_sample_mask() const { return msl_options.additional_fixed_sample_mask != 0xffffffff; }$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
has_array_offsets	spirv_glsl.hpp	/^		bool has_array_offsets = false, has_offset = false, has_grad = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
has_decoration	spirv_cross.cpp	/^bool Compiler::has_decoration(ID id, Decoration decoration) const$/;"	f	class:Compiler
has_decoration	spirv_cross_parsed_ir.cpp	/^bool ParsedIR::has_decoration(ID id, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
has_dref	spirv_glsl.hpp	/^		bool has_dref = false, is_sparse_feedback = false, has_min_lod = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
has_extended_decoration	spirv_cross.cpp	/^bool Compiler::has_extended_decoration(uint32_t id, ExtendedDecorations decoration) const$/;"	f	class:Compiler
has_extended_member_decoration	spirv_cross.cpp	/^bool Compiler::has_extended_member_decoration(uint32_t type, uint32_t index, ExtendedDecorations decoration) const$/;"	f	class:Compiler
has_extension	spirv_glsl.cpp	/^bool CompilerGLSL::has_extension(const std::string &ext) const$/;"	f	class:CompilerGLSL
has_grad	spirv_glsl.hpp	/^		bool has_array_offsets = false, has_offset = false, has_grad = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
has_member_decoration	spirv_cross.cpp	/^bool Compiler::has_member_decoration(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:Compiler
has_member_decoration	spirv_cross_parsed_ir.cpp	/^bool ParsedIR::has_member_decoration(TypeID id, uint32_t index, Decoration decoration) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
has_min_lod	spirv_glsl.hpp	/^		bool has_dref = false, is_sparse_feedback = false, has_min_lod = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
has_offset	spirv_glsl.hpp	/^		bool has_array_offsets = false, has_offset = false, has_grad = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
has_sampled_images	spirv_msl.hpp	/^	bool has_sampled_images = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
has_visited_forward_edge	spirv_cfg.cpp	/^bool CFG::has_visited_forward_edge(uint32_t to) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
hash	spirv_common.hpp	/^struct hash<SPIRV_CROSS_NAMESPACE::TypedID<type>>$/;"	s	namespace:std
header_lines	spirv_glsl.hpp	/^	SmallVector<std::string> header_lines;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
higher	spirv_common.hpp	/^	std::unordered_set<uint32_t> higher;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Bitset
hint	spirv_common.hpp	/^	Hints hint = HintNone;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
hlsl	main.cpp	/^	bool hlsl = false;$/;"	m	struct:CLIArguments	file:
hlsl	spirv_cross_c.cpp	/^	CompilerHLSL::Options hlsl;$/;"	m	struct:spvc_compiler_options_s	file:
hlsl	spirv_cross_parsed_ir.hpp	/^		bool hlsl = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ParsedIR::Source
hlsl_attr_remap	main.cpp	/^	SmallVector<HLSLVertexAttributeRemap> hlsl_attr_remap;$/;"	m	struct:CLIArguments	file:
hlsl_binding_flags	main.cpp	/^	HLSLBindingFlags hlsl_binding_flags = 0;$/;"	m	struct:CLIArguments	file:
hlsl_compat	main.cpp	/^	bool hlsl_compat = false;$/;"	m	struct:CLIArguments	file:
hlsl_enable_16bit_types	main.cpp	/^	bool hlsl_enable_16bit_types = false;$/;"	m	struct:CLIArguments	file:
hlsl_flatten_matrix_vertex_input_semantics	main.cpp	/^	bool hlsl_flatten_matrix_vertex_input_semantics = false;$/;"	m	struct:CLIArguments	file:
hlsl_force_storage_buffer_as_uav	main.cpp	/^	bool hlsl_force_storage_buffer_as_uav = false;$/;"	m	struct:CLIArguments	file:
hlsl_is_magic_counter_buffer	spirv_common.hpp	/^	bool hlsl_is_magic_counter_buffer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta
hlsl_magic_counter_buffer	spirv_common.hpp	/^	uint32_t hlsl_magic_counter_buffer = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta
hlsl_nonwritable_uav_texture_as_srv	main.cpp	/^	bool hlsl_nonwritable_uav_texture_as_srv = false;$/;"	m	struct:CLIArguments	file:
hlsl_options	spirv_hlsl.hpp	/^	Options hlsl_options;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
hlsl_resource_type_to_flag	main.cpp	/^static HLSLBindingFlags hlsl_resource_type_to_flag(const std::string &arg)$/;"	f	file:
hlsl_semantic	spirv_common.hpp	/^		std::string hlsl_semantic;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
hlsl_support_nonzero_base	main.cpp	/^	bool hlsl_support_nonzero_base = false;$/;"	m	struct:CLIArguments	file:
hoisted_temporaries	spirv_cross.hpp	/^	std::unordered_set<uint32_t> hoisted_temporaries;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
holder	spirv_common.hpp	/^	IVariant *holder = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Variant
i32	spirv_common.hpp	/^		int32_t i32;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
i64	spirv_common.hpp	/^		int64_t i64;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
iOS	spirv_msl.hpp	/^			iOS = 0,$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::__anon16
id	spirv_common.hpp	/^		ID id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::Parameter
id	spirv_common.hpp	/^		ID id[4];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantMatrix
id	spirv_common.hpp	/^		ID id[4];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantVector
id	spirv_common.hpp	/^		VariableID id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
id	spirv_common.hpp	/^	uint32_t id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::TypedID
id	spirv_cross.hpp	/^		uint32_t id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
id	spirv_cross.hpp	/^	ConstantID id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SpecializationConstant
id	spirv_cross.hpp	/^	ID id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Resource
id	spirv_cross_c.h	/^	spvc_constant_id id;$/;"	m	struct:spvc_specialization_constant
id	spirv_cross_c.h	/^	spvc_variable_id id;$/;"	m	struct:spvc_reflected_resource
id	spirv_glsl.hpp	/^	uint32_t id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::PlsRemap
id_is_phi_variable	spirv_cross.cpp	/^bool Compiler::AnalyzeVariableScopeAccessHandler::id_is_phi_variable(uint32_t id) const$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
id_is_potential_temporary	spirv_cross.cpp	/^bool Compiler::AnalyzeVariableScopeAccessHandler::id_is_potential_temporary(uint32_t id) const$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
id_x	spirv_common.hpp	/^		uint32_t id_x = 0, id_y = 0, id_z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
id_y	spirv_common.hpp	/^		uint32_t id_x = 0, id_y = 0, id_z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
id_z	spirv_common.hpp	/^		uint32_t id_x = 0, id_y = 0, id_z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
ids	spirv_cross_parsed_ir.hpp	/^	SmallVector<Variant> ids;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ids_for_constant_or_type	spirv_cross_parsed_ir.hpp	/^	SmallVector<ID> ids_for_constant_or_type;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ids_for_constant_or_variable	spirv_cross_parsed_ir.hpp	/^	SmallVector<ID> ids_for_constant_or_variable;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ids_for_type	spirv_cross_parsed_ir.hpp	/^	SmallVector<ID> ids_for_type[TypeCount];$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
ignore_phi_from_block	spirv_common.hpp	/^	BlockID ignore_phi_from_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
image	spirv_common.hpp	/^	VariableID image;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRCombinedImageSampler
image	spirv_common.hpp	/^	} image;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType	typeref:struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
image_format_to_components	spirv_hlsl.cpp	/^static unsigned image_format_to_components(ImageFormat fmt)$/;"	f	class:ImageFormatNormalizedState	file:
image_format_to_normalized_state	spirv_hlsl.cpp	/^static ImageFormatNormalizedState image_format_to_normalized_state(ImageFormat fmt)$/;"	f	class:ImageFormatNormalizedState	file:
image_format_to_type	spirv_hlsl.cpp	/^static string image_format_to_type(ImageFormat fmt, SPIRType::BaseType basetype)$/;"	f	class:ImageFormatNormalizedState	file:
image_id	spirv_common.hpp	/^		VariableID image_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
image_id	spirv_cross.hpp	/^	VariableID image_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CombinedImageSampler
image_id	spirv_cross_c.h	/^	spvc_variable_id image_id;$/;"	m	struct:spvc_combined_image_sampler
image_opcode_is_sample_no_dref	spirv_glsl.cpp	/^static inline bool image_opcode_is_sample_no_dref(Op op)$/;"	f	file:
image_pointers	spirv_msl.hpp	/^		std::unordered_map<uint32_t, uint32_t> image_pointers; \/\/ Emulate texture2D atomic operations$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
image_type_glsl	spirv_glsl.cpp	/^string CompilerGLSL::image_type_glsl(const SPIRType &type, uint32_t id)$/;"	f	class:CompilerGLSL
image_type_glsl	spirv_msl.cpp	/^string CompilerMSL::image_type_glsl(const SPIRType &type, uint32_t id)$/;"	f	class:CompilerMSL
image_type_hlsl	spirv_hlsl.cpp	/^string CompilerHLSL::image_type_hlsl(const SPIRType &type, uint32_t id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
image_type_hlsl_legacy	spirv_hlsl.cpp	/^string CompilerHLSL::image_type_hlsl_legacy(const SPIRType &type, uint32_t \/*id*\/)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
image_type_hlsl_modern	spirv_hlsl.cpp	/^string CompilerHLSL::image_type_hlsl_modern(const SPIRType &type, uint32_t id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
img	spirv_glsl.hpp	/^		VariableID img = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionBaseArguments
imgtype	spirv_glsl.hpp	/^		const SPIRType *imgtype = nullptr;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionBaseArguments
immediate_dominators	spirv_cfg.hpp	/^	std::unordered_map<uint32_t, uint32_t> immediate_dominators;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
immutable	spirv_common.hpp	/^	bool immutable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
immutable	spirv_common.hpp	/^	bool immutable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
impl_type	spirv_cpp.hpp	/^	std::string impl_type;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
implied_read_expressions	spirv_common.hpp	/^	SmallVector<ID> implied_read_expressions;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
implied_read_expressions	spirv_common.hpp	/^	SmallVector<ID> implied_read_expressions;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
in_crit_sec	spirv_cross.hpp	/^		bool in_crit_sec = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
increase_bound_by	spirv_cross_parsed_ir.cpp	/^uint32_t ParsedIR::increase_bound_by(uint32_t incr_amount)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
indent	spirv_glsl.hpp	/^	uint32_t indent = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
index	spirv_common.hpp	/^		uint32_t index = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
index	spirv_cross.hpp	/^	unsigned index;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BufferRange
index	spirv_cross_c.h	/^	unsigned index;$/;"	m	struct:spvc_buffer_range
index_buffer_var_name	spirv_msl.hpp	/^	std::string index_buffer_var_name = "spvIndices";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
index_to_swizzle	spirv_glsl.cpp	/^const char *CompilerGLSL::index_to_swizzle(uint32_t index)$/;"	f	class:CompilerGLSL
indirect_params_buffer_index	spirv_msl.hpp	/^		uint32_t indirect_params_buffer_index = 29;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
inherit_combined_sampler_bindings	spirv_cross_util.cpp	/^void inherit_combined_sampler_bindings(Compiler &compiler)$/;"	f	namespace:spirv_cross_util
inherit_expression_dependencies	spirv_cross.cpp	/^void Compiler::inherit_expression_dependencies(uint32_t dst, uint32_t source_expression)$/;"	f	class:Compiler
init	spirv_glsl.cpp	/^void CompilerGLSL::init()$/;"	f	class:CompilerGLSL
initializer	spirv_common.hpp	/^	ID initializer = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
inject_top_level_storage_qualifier	spirv_msl.cpp	/^static string inject_top_level_storage_qualifier(const string &expr, const string &qualifier)$/;"	f	file:
inline_uniform_blocks	spirv_msl.hpp	/^	std::unordered_set<SetBindingPair, InternalHasher> inline_uniform_blocks;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
inner	spirv_common.hpp	/^namespace inner$/;"	n	namespace:SPIRV_CROSS_NAMESPACE
inout_color_attachments	spirv_glsl.hpp	/^	std::vector<std::pair<uint32_t, bool>> inout_color_attachments;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
input	main.cpp	/^	const char *input = nullptr;$/;"	m	struct:CLIArguments	file:
input_attachment	spirv_common.hpp	/^		uint32_t input_attachment = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
input_buffer_var_name	spirv_msl.hpp	/^	std::string input_buffer_var_name = "spvIn";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
input_wg_var_name	spirv_msl.hpp	/^	std::string input_wg_var_name = "gl_in";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
inputs_by_builtin	spirv_msl.hpp	/^	std::unordered_map<uint32_t, MSLShaderInput> inputs_by_builtin;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
inputs_by_location	spirv_msl.hpp	/^	std::map<LocationComponentPair, MSLShaderInput> inputs_by_location;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
instruction_to_result_type	spirv_cross.cpp	/^bool Compiler::instruction_to_result_type(uint32_t &result_type, uint32_t &result_id, spv::Op op,$/;"	f	class:Compiler
int16_t_literal_suffix	spirv_glsl.hpp	/^		const char *int16_t_literal_suffix = "s";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
interface_name	spirv_cpp.hpp	/^	std::string interface_name;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
interface_variable_exists_in_entry_point	spirv_cross.cpp	/^bool Compiler::interface_variable_exists_in_entry_point(uint32_t id) const$/;"	f	class:Compiler
interface_variable_renames	main.cpp	/^	SmallVector<InterfaceVariableRename> interface_variable_renames;$/;"	m	struct:CLIArguments	file:
interface_variables	spirv_common.hpp	/^	SmallVector<VariableID> interface_variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
interlock_function_id	spirv_cross.hpp	/^		uint32_t interlock_function_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
interlock_function_id	spirv_cross.hpp	/^		uint32_t interlock_function_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
interlocked_is_complex	spirv_cross.hpp	/^	bool interlocked_is_complex = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
interlocked_resources	spirv_cross.hpp	/^	std::unordered_set<uint32_t> interlocked_resources;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
invalid_expressions	spirv_cross.hpp	/^	std::unordered_set<uint32_t> invalid_expressions;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
invalidate_expressions	spirv_common.hpp	/^	SmallVector<ID> invalidate_expressions;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
invariant_float_math	spirv_msl.hpp	/^		bool invariant_float_math = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
invocations	spirv_common.hpp	/^	uint32_t invocations = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
ios_support_base_vertex_instance	spirv_msl.hpp	/^		bool ios_support_base_vertex_instance = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
ios_use_simdgroup_functions	spirv_msl.hpp	/^		bool ios_use_simdgroup_functions = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
ir	spirv_cross.hpp	/^	ParsedIR ir;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
ir	spirv_parser.hpp	/^	ParsedIR ir;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Parser
is_alpha	spirv_cross_parsed_ir.cpp	/^static bool is_alpha(char c)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_alphanumeric	spirv_cross_parsed_ir.cpp	/^static bool is_alphanumeric(char c)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_array	spirv_cross.cpp	/^bool Compiler::is_array(const SPIRType &type) const$/;"	f	class:Compiler
is_back_edge	spirv_cfg.cpp	/^bool CFG::is_back_edge(uint32_t to) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
is_block_builtin	spirv_glsl.cpp	/^static bool is_block_builtin(BuiltIn builtin)$/;"	f	file:
is_break	spirv_cross.hpp	/^	inline bool is_break(uint32_t next) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_builtin_type	spirv_cross.cpp	/^bool Compiler::is_builtin_type(const SPIRType &type) const$/;"	f	class:Compiler
is_builtin_variable	spirv_cross.cpp	/^bool Compiler::is_builtin_variable(const SPIRVariable &var) const$/;"	f	class:Compiler
is_conditional	spirv_cross.hpp	/^	inline bool is_conditional(uint32_t next) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_continue	spirv_cross.hpp	/^	inline bool is_continue(uint32_t next) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_depth_image	spirv_cross.cpp	/^bool Compiler::is_depth_image(const SPIRType &type, uint32_t id) const$/;"	f	class:Compiler
is_desktop_only_format	spirv_cross.cpp	/^bool Compiler::is_desktop_only_format(spv::ImageFormat format)$/;"	f	class:Compiler
is_direct_input_builtin	spirv_msl.cpp	/^bool CompilerMSL::is_direct_input_builtin(BuiltIn bi_type)$/;"	f	class:CompilerMSL
is_embedded	spirv_common.hpp	/^	inline bool is_embedded() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Instruction
is_feature_requested	spirv_glsl.cpp	/^bool CompilerGLSL::ShaderSubgroupSupportHelper::is_feature_requested(Feature feature) const$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
is_fetch	spirv_glsl.hpp	/^		bool is_fetch = false, is_gather = false, is_proj = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionBaseArguments
is_force_recompile	spirv_cross.hpp	/^	bool is_force_recompile = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
is_force_recompile_forward_progress	spirv_cross.hpp	/^	bool is_force_recompile_forward_progress = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
is_forcing_recompilation	spirv_cross.cpp	/^bool Compiler::is_forcing_recompilation() const$/;"	f	class:Compiler
is_gather	spirv_glsl.hpp	/^		bool is_fetch = false, is_gather = false, is_proj = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionBaseArguments
is_globally_reserved_identifier	spirv_cross_parsed_ir.cpp	/^bool ParsedIR::is_globally_reserved_identifier(std::string &str, bool allow_reserved_prefixes)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
is_hidden_variable	spirv_cross.cpp	/^bool Compiler::is_hidden_variable(const SPIRVariable &var, bool include_builtins) const$/;"	f	class:Compiler
is_hlsl_force_storage_buffer_as_uav	spirv_hlsl.cpp	/^bool CompilerHLSL::is_hlsl_force_storage_buffer_as_uav(ID id) const$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
is_hlsl_resource_binding_used	spirv_hlsl.cpp	/^bool CompilerHLSL::is_hlsl_resource_binding_used(ExecutionModel model, uint32_t desc_set, uint32_t binding) const$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
is_immutable	spirv_cross.cpp	/^bool Compiler::is_immutable(uint32_t id) const$/;"	f	class:Compiler
is_intersection_query	spirv_msl.cpp	/^bool CompilerMSL::is_intersection_query() const$/;"	f	class:CompilerMSL
is_ios	spirv_msl.hpp	/^		bool is_ios() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
is_legacy	spirv_glsl.hpp	/^	inline bool is_legacy() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
is_legacy_desktop	spirv_glsl.hpp	/^	inline bool is_legacy_desktop() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
is_legacy_es	spirv_glsl.hpp	/^	inline bool is_legacy_es() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
is_loop_break	spirv_cross.hpp	/^	inline bool is_loop_break(uint32_t next) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_macos	spirv_msl.hpp	/^		bool is_macos() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
is_matrix	spirv_cross.cpp	/^bool Compiler::is_matrix(const SPIRType &type) const$/;"	f	class:Compiler
is_member_builtin	spirv_cross.cpp	/^bool Compiler::is_member_builtin(const SPIRType &type, uint32_t index, BuiltIn *builtin) const$/;"	f	class:Compiler
is_msl_resource_binding_used	spirv_msl.cpp	/^bool CompilerMSL::is_msl_resource_binding_used(ExecutionModel model, uint32_t desc_set, uint32_t binding) const$/;"	f	class:CompilerMSL
is_msl_shader_input_used	spirv_msl.cpp	/^bool CompilerMSL::is_msl_shader_input_used(uint32_t location)$/;"	f	class:CompilerMSL
is_non_native_row_major_matrix	spirv_glsl.cpp	/^bool CompilerGLSL::is_non_native_row_major_matrix(uint32_t id)$/;"	f	class:CompilerGLSL
is_non_native_row_major_matrix	spirv_msl.cpp	/^bool CompilerMSL::is_non_native_row_major_matrix(uint32_t id)$/;"	f	class:CompilerMSL
is_numeric	spirv_cross_parsed_ir.cpp	/^static bool is_numeric(char c)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_out_of_bounds_tessellation_level	spirv_msl.cpp	/^bool CompilerMSL::is_out_of_bounds_tessellation_level(uint32_t id_lhs)$/;"	f	class:CompilerMSL
is_patch_block	spirv_msl.cpp	/^bool CompilerMSL::is_patch_block(const SPIRType &type)$/;"	f	class:CompilerMSL
is_position_invariant	spirv_cross.hpp	/^	bool is_position_invariant() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_proj	spirv_glsl.hpp	/^		bool is_fetch = false, is_gather = false, is_proj = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionBaseArguments
is_rasterization_disabled	spirv_msl.hpp	/^	bool is_rasterization_disabled = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
is_reserved_identifier	spirv_cross_parsed_ir.cpp	/^static bool is_reserved_identifier(const string &name, bool member, bool allow_reserved_prefixes)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_reserved_prefix	spirv_cross_parsed_ir.cpp	/^static bool is_reserved_prefix(const string &name)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_sample_rate	spirv_msl.cpp	/^bool CompilerMSL::is_sample_rate() const$/;"	f	class:CompilerMSL
is_sampled_image_type	spirv_cross.cpp	/^bool Compiler::is_sampled_image_type(const SPIRType &type)$/;"	f	class:Compiler
is_scalar	spirv_cross.cpp	/^bool Compiler::is_scalar(const SPIRType &type) const$/;"	f	class:Compiler
is_single_block_loop	spirv_cross.hpp	/^	inline bool is_single_block_loop(uint32_t next) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
is_sparse_feedback	spirv_glsl.hpp	/^		bool has_dref = false, is_sparse_feedback = false, has_min_lod = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
is_stage_output_block_member_masked	spirv_glsl.cpp	/^bool CompilerGLSL::is_stage_output_block_member_masked(const SPIRVariable &var, uint32_t index, bool strip_array) const$/;"	f	class:CompilerGLSL
is_stage_output_builtin_masked	spirv_glsl.cpp	/^bool CompilerGLSL::is_stage_output_builtin_masked(spv::BuiltIn builtin) const$/;"	f	class:CompilerGLSL
is_stage_output_location_masked	spirv_glsl.cpp	/^bool CompilerGLSL::is_stage_output_location_masked(uint32_t location, uint32_t component) const$/;"	f	class:CompilerGLSL
is_stage_output_variable_masked	spirv_glsl.cpp	/^bool CompilerGLSL::is_stage_output_variable_masked(const SPIRVariable &var) const$/;"	f	class:CompilerGLSL
is_supported_argument_buffer_type	spirv_msl.cpp	/^bool CompilerMSL::is_supported_argument_buffer_type(const SPIRType &type) const$/;"	f	class:CompilerMSL
is_supported_subgroup_op_in_opengl	spirv_glsl.cpp	/^bool CompilerGLSL::is_supported_subgroup_op_in_opengl(spv::Op op)$/;"	f	class:CompilerGLSL
is_tessellation_shader	spirv_cross.cpp	/^bool Compiler::is_tessellation_shader() const$/;"	f	class:Compiler
is_tessellation_shader	spirv_cross.cpp	/^bool Compiler::is_tessellation_shader(ExecutionModel model)$/;"	f	class:Compiler
is_unsigned_glsl_opcode	spirv_glsl.cpp	/^static bool is_unsigned_glsl_opcode(GLSLstd450 op)$/;"	f	file:
is_unsigned_opcode	spirv_glsl.cpp	/^static bool is_unsigned_opcode(Op op)$/;"	f	file:
is_used_as_array_length	spirv_common.hpp	/^	bool is_used_as_array_length = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
is_used_as_lut	spirv_common.hpp	/^	bool is_used_as_lut = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
is_using_builtin_array	spirv_msl.hpp	/^	bool is_using_builtin_array = false; \/\/ Force the use of C style array declaration.$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
is_valid_identifier	spirv_cross_parsed_ir.cpp	/^static bool is_valid_identifier(const string &name)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_valid_spirv_version	spirv_parser.cpp	/^static bool is_valid_spirv_version(uint32_t version)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
is_vector	spirv_cross.cpp	/^bool Compiler::is_vector(const SPIRType &type) const$/;"	f	class:Compiler
is_vertex_like_shader	spirv_cross.cpp	/^bool Compiler::is_vertex_like_shader() const$/;"	f	class:Compiler
iterations	main.cpp	/^	uint32_t iterations = 1;$/;"	m	struct:CLIArguments	file:
join	spirv_common.hpp	/^std::string join(Ts &&... ts)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
join_helper	spirv_common.hpp	/^void join_helper(StringStream<> &stream, T &&t)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE::inner
join_helper	spirv_common.hpp	/^void join_helper(StringStream<> &stream, T &&t, Ts &&... ts)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE::inner
json_stream	spirv_reflect.hpp	/^	std::shared_ptr<simple_json::Stream> json_stream;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
kArgumentBufferBinding	spirv_msl.hpp	/^static const uint32_t kArgumentBufferBinding = ~(3u);$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kArrayCopyMultidimMax	spirv_msl.hpp	/^static const uint32_t kArrayCopyMultidimMax = 6;$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kBufferSizeBufferBinding	spirv_msl.hpp	/^static const uint32_t kBufferSizeBufferBinding = ~(2u);$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kMaxArgumentBuffers	spirv_msl.hpp	/^static const uint32_t kMaxArgumentBuffers = 8;$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kPushConstBinding	spirv_msl.hpp	/^static const uint32_t kPushConstBinding = ResourceBindingPushConstantBinding;$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kPushConstDescSet	spirv_msl.hpp	/^static const uint32_t kPushConstDescSet = ResourceBindingPushConstantDescriptorSet;$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
kSwizzleBufferBinding	spirv_msl.hpp	/^static const uint32_t kSwizzleBufferBinding = ~(1u);$/;"	m	namespace:SPIRV_CROSS_NAMESPACE
k_unknown_component	spirv_msl.cpp	/^static const uint32_t k_unknown_component = ~0u;$/;"	v	file:
k_unknown_location	spirv_msl.cpp	/^static const uint32_t k_unknown_location = ~0u;$/;"	v	file:
known	spirv_cross_parsed_ir.hpp	/^		bool known = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ParsedIR::Source
last_error	spirv_cross_c.cpp	/^	string last_error;$/;"	m	struct:spvc_context_s	file:
layout_for_member	spirv_glsl.cpp	/^string CompilerGLSL::layout_for_member(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
layout_for_member	spirv_hlsl.cpp	/^string CompilerHLSL::layout_for_member(const SPIRType &type, uint32_t index)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
layout_for_variable	spirv_glsl.cpp	/^string CompilerGLSL::layout_for_variable(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
legacy_tex_op	spirv_glsl.cpp	/^string CompilerGLSL::legacy_tex_op(const std::string &op, const SPIRType &imgtype, uint32_t tex)$/;"	f	class:CompilerGLSL
length	spirv_common.hpp	/^	uint32_t length = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Instruction
lift_continue_block_dominator	spirv_cfg.cpp	/^void DominatorBuilder::lift_continue_block_dominator()$/;"	f	class:SPIRV_CROSS_NAMESPACE::DominatorBuilder
line_literal	spirv_common.hpp	/^		uint32_t line_literal = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::EntryLine
load_flattened_struct	spirv_glsl.cpp	/^string CompilerGLSL::load_flattened_struct(const string &basename, const SPIRType &type)$/;"	f	class:CompilerGLSL
load_type_width	spirv_cross_parsed_ir.hpp	/^	std::unordered_map<ID, uint32_t> load_type_width;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
loaded_from	spirv_common.hpp	/^	ID loaded_from = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
loaded_from	spirv_common.hpp	/^	VariableID loaded_from = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
local_variable	spirv_common.hpp	/^		ID local_variable; \/\/ flush local variable ...$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock::Phi
local_variable_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> local_variable_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
local_variables	spirv_common.hpp	/^	SmallVector<VariableID> local_variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
localize_global_variables	spirv_msl.cpp	/^void CompilerMSL::localize_global_variables()$/;"	f	class:CompilerMSL
location	main.cpp	/^	uint32_t location;$/;"	m	struct:InterfaceVariableRename	file:
location	spirv_common.hpp	/^		uint32_t location = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
location	spirv_common.hpp	/^	uint32_t location;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::LocationComponentPair
location	spirv_cross_c.h	/^	unsigned location;$/;"	m	struct:spvc_hlsl_vertex_attribute_remap
location	spirv_cross_c.h	/^	unsigned location;$/;"	m	struct:spvc_msl_shader_input
location	spirv_cross_c.h	/^	unsigned location;$/;"	m	struct:spvc_msl_vertex_attribute
location	spirv_hlsl.hpp	/^	uint32_t location;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLVertexAttributeRemap
location	spirv_msl.hpp	/^	uint32_t location = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLShaderInput
location_inputs_in_use	spirv_msl.hpp	/^	std::unordered_set<uint32_t> location_inputs_in_use;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
location_inputs_in_use_fallback	spirv_msl.hpp	/^	std::unordered_set<uint32_t> location_inputs_in_use_fallback;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
location_is_framebuffer_fetch	spirv_glsl.cpp	/^bool CompilerGLSL::location_is_framebuffer_fetch(uint32_t location) const$/;"	f	class:CompilerGLSL
location_is_non_coherent_framebuffer_fetch	spirv_glsl.cpp	/^bool CompilerGLSL::location_is_non_coherent_framebuffer_fetch(uint32_t location) const$/;"	f	class:CompilerGLSL
location_meta	spirv_msl.hpp	/^		std::unordered_map<uint32_t, LocationMeta> location_meta;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta
lock	spirv_cross_parsed_ir.hpp	/^		uint32_t *lock;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR::LoopLock
lod	spirv_glsl.hpp	/^		uint32_t grad_x = 0, grad_y = 0, lod = 0, coffset = 0, offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
lod	spirv_glsl.hpp	/^		uint32_t lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionNameArguments
lod_clamp_enable	spirv_cross_c.h	/^	spvc_bool lod_clamp_enable;$/;"	m	struct:spvc_msl_constexpr_sampler
lod_clamp_enable	spirv_msl.hpp	/^	bool lod_clamp_enable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
lod_clamp_max	spirv_cross_c.h	/^	float lod_clamp_max;$/;"	m	struct:spvc_msl_constexpr_sampler
lod_clamp_max	spirv_msl.hpp	/^	float lod_clamp_max = 1000.0f;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
lod_clamp_min	spirv_cross_c.h	/^	float lod_clamp_min;$/;"	m	struct:spvc_msl_constexpr_sampler
lod_clamp_min	spirv_msl.hpp	/^	float lod_clamp_min = 0.0f;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
long_long_literal_suffix	spirv_glsl.hpp	/^		bool long_long_literal_suffix = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
loop_dominator	spirv_common.hpp	/^	BlockID loop_dominator = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
loop_iteration_depth_hard	spirv_cross_parsed_ir.hpp	/^	mutable uint32_t loop_iteration_depth_hard = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
loop_iteration_depth_soft	spirv_cross_parsed_ir.hpp	/^	mutable uint32_t loop_iteration_depth_soft = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
loop_variable	spirv_common.hpp	/^	bool loop_variable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
loop_variable_enable	spirv_common.hpp	/^	bool loop_variable_enable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
loop_variables	spirv_common.hpp	/^	SmallVector<VariableID> loop_variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
lower	spirv_common.hpp	/^	uint64_t lower = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Bitset
m	spirv_common.hpp	/^	ConstantMatrix m;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
macOS	spirv_msl.hpp	/^			macOS = 1$/;"	e	enum:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::__anon16
mag_filter	spirv_cross_c.h	/^	spvc_msl_sampler_filter mag_filter;$/;"	m	struct:spvc_msl_constexpr_sampler
mag_filter	spirv_msl.hpp	/^	MSLSamplerFilter mag_filter = MSL_SAMPLER_FILTER_NEAREST;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
main_inner	main.cpp	/^static int main_inner(int argc, char *argv[])$/;"	f	file:
make_constant_null	spirv_cross.cpp	/^void Compiler::make_constant_null(uint32_t id, uint32_t type)$/;"	f	class:Compiler
make_constant_null	spirv_cross_parsed_ir.cpp	/^void ParsedIR::make_constant_null(uint32_t id, uint32_t type, bool add_to_typed_id_set)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
make_inclusive_BitAnd	spirv_hlsl.cpp	4680;"	d	file:
make_inclusive_BitOr	spirv_hlsl.cpp	4681;"	d	file:
make_inclusive_BitXor	spirv_hlsl.cpp	4682;"	d	file:
make_inclusive_Max	spirv_hlsl.cpp	4684;"	d	file:
make_inclusive_Min	spirv_hlsl.cpp	4683;"	d	file:
make_msl_version	spirv_msl.hpp	/^		static uint32_t make_msl_version(uint32_t major, uint32_t minor = 0, uint32_t patch = 0)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
make_null	spirv_common.hpp	/^	inline void make_null(const SPIRType &constant_type_)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
make_unreserved_identifier	spirv_cross_parsed_ir.cpp	/^static string make_unreserved_identifier(const string &name)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
mark_aligned_access	spirv_cross.cpp	/^void Compiler::PhysicalStorageBufferPointerHandler::mark_aligned_access(uint32_t id, const uint32_t *args, uint32_t length)$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
mark_as_packable	spirv_msl.cpp	/^void CompilerMSL::mark_as_packable(SPIRType &type)$/;"	f	class:CompilerMSL
mark_implicit_builtin	spirv_msl.cpp	/^void CompilerMSL::mark_implicit_builtin(StorageClass storage, BuiltIn builtin, uint32_t id)$/;"	f	class:CompilerMSL
mark_location_as_used_by_shader	spirv_msl.cpp	/^void CompilerMSL::mark_location_as_used_by_shader(uint32_t location, const SPIRType &type,$/;"	f	class:CompilerMSL
mark_packable_structs	spirv_msl.cpp	/^void CompilerMSL::mark_packable_structs()$/;"	f	class:CompilerMSL
mark_scalar_layout_structs	spirv_msl.cpp	/^void CompilerMSL::mark_scalar_layout_structs(const SPIRType &type)$/;"	f	class:CompilerMSL
mark_struct_members_packed	spirv_msl.cpp	/^void CompilerMSL::mark_struct_members_packed(const SPIRType &type)$/;"	f	class:CompilerMSL
mark_used_as_array_length	spirv_cross_parsed_ir.cpp	/^void ParsedIR::mark_used_as_array_length(ID id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
mask_relevant_memory_semantics	spirv_glsl.cpp	/^uint32_t CompilerGLSL::mask_relevant_memory_semantics(uint32_t semantics)$/;"	f	class:CompilerGLSL
mask_stage_output_by_builtin	spirv_glsl.cpp	/^void CompilerGLSL::mask_stage_output_by_builtin(BuiltIn builtin)$/;"	f	class:CompilerGLSL
mask_stage_output_by_location	spirv_glsl.cpp	/^void CompilerGLSL::mask_stage_output_by_location(uint32_t location, uint32_t component)$/;"	f	class:CompilerGLSL
masked_output_builtins	spirv_glsl.hpp	/^	std::unordered_set<uint32_t> masked_output_builtins;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
masked_output_locations	spirv_glsl.hpp	/^	std::unordered_set<LocationComponentPair, InternalHasher> masked_output_locations;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
masked_stage_builtins	main.cpp	/^	SmallVector<BuiltIn> masked_stage_builtins;$/;"	m	struct:CLIArguments	file:
masked_stage_outputs	main.cpp	/^	SmallVector<std::pair<uint32_t, uint32_t>> masked_stage_outputs;$/;"	m	struct:CLIArguments	file:
matrix_stride	spirv_common.hpp	/^		uint32_t matrix_stride = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
matrix_stride	spirv_common.hpp	/^	uint32_t matrix_stride = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
max_anisotropy	spirv_cross_c.h	/^	int max_anisotropy;$/;"	m	struct:spvc_msl_constexpr_sampler
max_anisotropy	spirv_msl.hpp	/^	int max_anisotropy = 1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
may_read_undefined_variable_in_block	spirv_cross.cpp	/^bool Compiler::may_read_undefined_variable_in_block(const SPIRBlock &block, uint32_t var)$/;"	f	class:Compiler
maybe_emit_array_assignment	spirv_msl.cpp	/^bool CompilerMSL::maybe_emit_array_assignment(uint32_t id_lhs, uint32_t id_rhs)$/;"	f	class:CompilerMSL
maybe_get	spirv_cross.hpp	/^	T *maybe_get(uint32_t id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
maybe_get	spirv_cross.hpp	/^	const T *maybe_get(uint32_t id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
maybe_get	spirv_parser.hpp	/^	T *maybe_get(uint32_t id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
maybe_get	spirv_parser.hpp	/^	const T *maybe_get(uint32_t id) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
maybe_get_backing_variable	spirv_cross.cpp	/^SPIRVariable *Compiler::maybe_get_backing_variable(uint32_t chain)$/;"	f	class:Compiler
member_attribute_qualifier	spirv_msl.cpp	/^string CompilerMSL::member_attribute_qualifier(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerMSL
member_is_non_native_row_major_matrix	spirv_glsl.cpp	/^bool CompilerGLSL::member_is_non_native_row_major_matrix(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
member_is_non_native_row_major_matrix	spirv_msl.cpp	/^bool CompilerMSL::member_is_non_native_row_major_matrix(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerMSL
member_is_packed_physical_type	spirv_glsl.cpp	/^bool CompilerGLSL::member_is_packed_physical_type(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerGLSL
member_is_remapped_physical_type	spirv_glsl.cpp	/^bool CompilerGLSL::member_is_remapped_physical_type(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerGLSL
member_location_attribute_qualifier	spirv_msl.cpp	/^string CompilerMSL::member_location_attribute_qualifier(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerMSL
member_name_cache	spirv_common.hpp	/^	std::unordered_set<std::string> member_name_cache;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
member_type_index_redirection	spirv_common.hpp	/^	SmallVector<uint32_t> member_type_index_redirection;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
member_types	spirv_common.hpp	/^	SmallVector<TypeID> member_types;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
members	spirv_common.hpp	/^	Vector<Decoration> members;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta
memory	spirv_cross_containers.hpp	/^	SmallVector<std::unique_ptr<T, MallocDeleter>> memory;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ObjectPool
memory_model	spirv_cross_parsed_ir.hpp	/^	spv::MemoryModel memory_model = spv::MemoryModelMax;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
merge	spirv_common.hpp	/^	Merge merge = MergeNone;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
merge	spirv_common.hpp	/^inline std::string merge(const SmallVector<std::string> &list, const char *between = ", ")$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
merge_and	spirv_common.hpp	/^	inline void merge_and(const Bitset &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
merge_block	spirv_common.hpp	/^	BlockID merge_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
merge_or	spirv_common.hpp	/^	inline void merge_or(const Bitset &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
meta	spirv_cross_parsed_ir.hpp	/^	std::unordered_map<ID, Meta> meta;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
meta	spirv_msl.hpp	/^		Meta &meta;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter
meta_needing_name_fixup	spirv_cross_parsed_ir.hpp	/^	std::unordered_set<uint32_t> meta_needing_name_fixup;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
min_filter	spirv_cross_c.h	/^	spvc_msl_sampler_filter min_filter;$/;"	m	struct:spvc_msl_constexpr_sampler
min_filter	spirv_msl.hpp	/^	MSLSamplerFilter min_filter = MSL_SAMPLER_FILTER_NEAREST;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
min_lod	spirv_glsl.hpp	/^		uint32_t bias = 0, component = 0, sample = 0, sparse_texel = 0, min_lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
mip_filter	spirv_cross_c.h	/^	spvc_msl_sampler_mip_filter mip_filter;$/;"	m	struct:spvc_msl_constexpr_sampler
mip_filter	spirv_msl.hpp	/^	MSLSamplerMipFilter mip_filter = MSL_SAMPLER_MIP_FILTER_NONE;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
model	spirv_common.hpp	/^	spv::ExecutionModel model = spv::ExecutionModelMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
model	spirv_common.hpp	/^	spv::ExecutionModel model;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StageSetBinding
ms	spirv_common.hpp	/^		bool ms;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
msl	main.cpp	/^	bool msl = false;$/;"	m	struct:CLIArguments	file:
msl	spirv_cross_c.cpp	/^	CompilerMSL::Options msl;$/;"	m	struct:spvc_compiler_options_s	file:
msl_additional_fixed_sample_mask	main.cpp	/^	uint32_t msl_additional_fixed_sample_mask = 0xffffffff;$/;"	m	struct:CLIArguments	file:
msl_argument_buffers	main.cpp	/^	bool msl_argument_buffers = false;$/;"	m	struct:CLIArguments	file:
msl_arrayed_subpass_input	main.cpp	/^	bool msl_arrayed_subpass_input = false;$/;"	m	struct:CLIArguments	file:
msl_buffer	spirv_cross_c.h	/^	unsigned msl_buffer;$/;"	m	struct:spvc_msl_resource_binding
msl_buffer	spirv_cross_c.h	/^	unsigned msl_buffer;$/;"	m	struct:spvc_msl_vertex_attribute
msl_buffer	spirv_msl.hpp	/^	uint32_t msl_buffer = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
msl_capture_output_to_buffer	main.cpp	/^	bool msl_capture_output_to_buffer = false;$/;"	m	struct:CLIArguments	file:
msl_combined_sampler_suffix	main.cpp	/^	const char *msl_combined_sampler_suffix = nullptr;$/;"	m	struct:CLIArguments	file:
msl_decoration_binding	main.cpp	/^	bool msl_decoration_binding = false;$/;"	m	struct:CLIArguments	file:
msl_device_argument_buffers	main.cpp	/^	SmallVector<uint32_t> msl_device_argument_buffers;$/;"	m	struct:CLIArguments	file:
msl_discrete_descriptor_sets	main.cpp	/^	SmallVector<uint32_t> msl_discrete_descriptor_sets;$/;"	m	struct:CLIArguments	file:
msl_dispatch_base	main.cpp	/^	bool msl_dispatch_base = false;$/;"	m	struct:CLIArguments	file:
msl_domain_lower_left	main.cpp	/^	bool msl_domain_lower_left = false;$/;"	m	struct:CLIArguments	file:
msl_dynamic_buffers	main.cpp	/^	SmallVector<pair<uint32_t, uint32_t>> msl_dynamic_buffers;$/;"	m	struct:CLIArguments	file:
msl_emulate_cube_array	main.cpp	/^	bool msl_emulate_cube_array = false;$/;"	m	struct:CLIArguments	file:
msl_emulate_subgroups	main.cpp	/^	bool msl_emulate_subgroups = false;$/;"	m	struct:CLIArguments	file:
msl_enable_clip_distance_user_varying	main.cpp	/^	bool msl_enable_clip_distance_user_varying = true;$/;"	m	struct:CLIArguments	file:
msl_enable_frag_depth_builtin	main.cpp	/^	bool msl_enable_frag_depth_builtin = true;$/;"	m	struct:CLIArguments	file:
msl_enable_frag_output_mask	main.cpp	/^	uint32_t msl_enable_frag_output_mask = 0xffffffff;$/;"	m	struct:CLIArguments	file:
msl_enable_frag_stencil_ref_builtin	main.cpp	/^	bool msl_enable_frag_stencil_ref_builtin = true;$/;"	m	struct:CLIArguments	file:
msl_fixed_subgroup_size	main.cpp	/^	uint32_t msl_fixed_subgroup_size = 0;$/;"	m	struct:CLIArguments	file:
msl_force_active_argument_buffer_resources	main.cpp	/^	bool msl_force_active_argument_buffer_resources = false;$/;"	m	struct:CLIArguments	file:
msl_force_native_arrays	main.cpp	/^	bool msl_force_native_arrays = false;$/;"	m	struct:CLIArguments	file:
msl_force_sample_rate_shading	main.cpp	/^	bool msl_force_sample_rate_shading = false;$/;"	m	struct:CLIArguments	file:
msl_framebuffer_fetch	main.cpp	/^	bool msl_framebuffer_fetch = false;$/;"	m	struct:CLIArguments	file:
msl_inline_uniform_blocks	main.cpp	/^	SmallVector<pair<uint32_t, uint32_t>> msl_inline_uniform_blocks;$/;"	m	struct:CLIArguments	file:
msl_invariant_float_math	main.cpp	/^	bool msl_invariant_float_math = false;$/;"	m	struct:CLIArguments	file:
msl_ios	main.cpp	/^	bool msl_ios = false;$/;"	m	struct:CLIArguments	file:
msl_ios_use_simdgroup_functions	main.cpp	/^	bool msl_ios_use_simdgroup_functions = false;$/;"	m	struct:CLIArguments	file:
msl_multi_patch_workgroup	main.cpp	/^	bool msl_multi_patch_workgroup = false;$/;"	m	struct:CLIArguments	file:
msl_multiview	main.cpp	/^	bool msl_multiview = false;$/;"	m	struct:CLIArguments	file:
msl_multiview_layered_rendering	main.cpp	/^	bool msl_multiview_layered_rendering = true;$/;"	m	struct:CLIArguments	file:
msl_offset	spirv_cross_c.h	/^	unsigned msl_offset;$/;"	m	struct:spvc_msl_vertex_attribute
msl_options	spirv_msl.hpp	/^	Options msl_options;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
msl_pad_fragment_output	main.cpp	/^	bool msl_pad_fragment_output = false;$/;"	m	struct:CLIArguments	file:
msl_r32ui_alignment_constant_id	main.cpp	/^	uint32_t msl_r32ui_alignment_constant_id = 65535;$/;"	m	struct:CLIArguments	file:
msl_r32ui_linear_texture_alignment	main.cpp	/^	uint32_t msl_r32ui_linear_texture_alignment = 4;$/;"	m	struct:CLIArguments	file:
msl_sampler	spirv_cross_c.h	/^	unsigned msl_sampler;$/;"	m	struct:spvc_msl_resource_binding
msl_sampler	spirv_msl.hpp	/^	uint32_t msl_sampler = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
msl_shader_inputs	main.cpp	/^	SmallVector<MSLShaderInput> msl_shader_inputs;$/;"	m	struct:CLIArguments	file:
msl_stride	spirv_cross_c.h	/^	unsigned msl_stride;$/;"	m	struct:spvc_msl_vertex_attribute
msl_swizzle_texture_samples	main.cpp	/^	bool msl_swizzle_texture_samples = false;$/;"	m	struct:CLIArguments	file:
msl_texture	spirv_cross_c.h	/^	unsigned msl_texture;$/;"	m	struct:spvc_msl_resource_binding
msl_texture	spirv_msl.hpp	/^	uint32_t msl_texture = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
msl_texture_1d_as_2d	main.cpp	/^	bool msl_texture_1d_as_2d = false;$/;"	m	struct:CLIArguments	file:
msl_texture_buffer_native	main.cpp	/^	bool msl_texture_buffer_native = false;$/;"	m	struct:CLIArguments	file:
msl_version	main.cpp	/^	uint32_t msl_version = 0;$/;"	m	struct:CLIArguments	file:
msl_version	spirv_msl.hpp	/^		uint32_t msl_version = make_msl_version(1, 2);$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
msl_vertex_for_tessellation	main.cpp	/^	bool msl_vertex_for_tessellation = false;$/;"	m	struct:CLIArguments	file:
msl_view_index_from_device_index	main.cpp	/^	bool msl_view_index_from_device_index = false;$/;"	m	struct:CLIArguments	file:
multi_patch_workgroup	spirv_msl.hpp	/^		bool multi_patch_workgroup = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
multiview	spirv_msl.hpp	/^		bool multiview = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
multiview_layered_rendering	spirv_msl.hpp	/^		bool multiview_layered_rendering = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
name	main.cpp	/^	string name;$/;"	m	struct:PLSArg	file:
name	spirv_common.hpp	/^	std::string name;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
name	spirv_cross.hpp	/^	std::string name;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::EntryPoint
name	spirv_cross.hpp	/^	std::string name;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Resource
name	spirv_cross_c.h	/^	const char *name;$/;"	m	struct:spvc_entry_point
name	spirv_cross_c.h	/^	const char *name;$/;"	m	struct:spvc_reflected_resource
native_pointers	spirv_glsl.hpp	/^		bool native_pointers = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
native_row_major_matrix	spirv_glsl.hpp	/^		bool native_row_major_matrix = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
naturally_emit_type	spirv_reflect.cpp	/^static bool naturally_emit_type(const SPIRType &type)$/;"	f	file:
need_dummy_sampler	spirv_cross.hpp	/^		bool need_dummy_sampler = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::DummySamplerForCombinedImageHandler
need_ladder_break	spirv_common.hpp	/^	bool need_ladder_break = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
need_subpass_input	spirv_cross.hpp	/^		bool need_subpass_input = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
need_subpass_input	spirv_cross.hpp	/^	bool need_subpass_input = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
need_transpose	spirv_common.hpp	/^	bool need_transpose = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
need_transpose	spirv_common.hpp	/^	bool need_transpose = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRExpression
needs_base_instance_arg	spirv_msl.hpp	/^	TriState needs_base_instance_arg = TriState::Neutral;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_base_vertex_arg	spirv_msl.hpp	/^	TriState needs_base_vertex_arg = TriState::Neutral;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_buffer_size_buffer	spirv_msl.hpp	/^	bool needs_buffer_size_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_chroma_reconstruction	spirv_msl.cpp	/^static bool needs_chroma_reconstruction(const MSLConstexprSampler *constexpr_sampler)$/;"	f	file:
needs_dispatch_base_buffer	spirv_msl.hpp	/^	bool needs_dispatch_base_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_input_threadgroup_mem	spirv_msl.hpp	/^	bool needs_input_threadgroup_mem() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_output_buffer	spirv_msl.hpp	/^	bool needs_output_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_patch_output_buffer	spirv_msl.hpp	/^	bool needs_patch_output_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_row_major_load_workaround	spirv_glsl.hpp	/^		bool needs_row_major_load_workaround = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
needs_sample_id	spirv_msl.hpp	/^		bool needs_sample_id = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
needs_sample_id	spirv_msl.hpp	/^	bool needs_sample_id = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_subgroup_invocation_id	spirv_msl.hpp	/^		bool needs_subgroup_invocation_id = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
needs_subgroup_invocation_id	spirv_msl.hpp	/^	bool needs_subgroup_invocation_id = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_subgroup_size	spirv_msl.hpp	/^		bool needs_subgroup_size = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
needs_subgroup_size	spirv_msl.hpp	/^	bool needs_subgroup_size = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_swizzle_buffer	spirv_msl.hpp	/^	bool needs_swizzle_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
needs_swizzle_buffer_def	spirv_msl.hpp	/^	bool needs_swizzle_buffer_def = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
needs_view_mask_buffer	spirv_msl.hpp	/^	bool needs_view_mask_buffer() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
new_name	main.cpp	/^		string new_name;$/;"	m	struct:CLIArguments::Rename	file:
new_variable_type	main.cpp	/^	string new_variable_type;$/;"	m	struct:VariableTypeRemap	file:
next_block	spirv_common.hpp	/^	BlockID next_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
next_double	main.cpp	/^	double next_double()$/;"	f	struct:CLIParser
next_hex_uint	main.cpp	/^	uint32_t next_hex_uint()$/;"	f	struct:CLIParser
next_metal_resource_ids	spirv_msl.hpp	/^	uint32_t next_metal_resource_ids[kMaxArgumentBuffers];$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
next_metal_resource_index_buffer	spirv_msl.hpp	/^	uint32_t next_metal_resource_index_buffer = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
next_metal_resource_index_sampler	spirv_msl.hpp	/^	uint32_t next_metal_resource_index_sampler = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
next_metal_resource_index_texture	spirv_msl.hpp	/^	uint32_t next_metal_resource_index_texture = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
next_string	main.cpp	/^	const char *next_string()$/;"	f	struct:CLIParser
next_uint	main.cpp	/^	uint32_t next_uint()$/;"	f	struct:CLIParser
next_value_string	main.cpp	/^	const char *next_value_string(const char *default_value)$/;"	f	struct:CLIParser
node_terminates_control_flow_in_sub_graph	spirv_cfg.cpp	/^bool CFG::node_terminates_control_flow_in_sub_graph(BlockID from, BlockID to) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
non_block_types	spirv_cross.hpp	/^		std::unordered_set<uint32_t> non_block_types;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalStorageBufferPointerHandler
nonuniform_expression	spirv_glsl.hpp	/^		bool nonuniform_expression = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
nonuniform_qualifier	spirv_glsl.hpp	/^		const char *nonuniform_qualifier = "nonuniformEXT";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
nonwritable_uav_texture_as_srv	spirv_hlsl.hpp	/^		bool nonwritable_uav_texture_as_srv = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
noperspective	spirv_msl.hpp	/^			bool noperspective = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
notify_variable_access	spirv_cross.cpp	/^void Compiler::AnalyzeVariableScopeAccessHandler::notify_variable_access(uint32_t id, uint32_t block)$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
null_pointer_literal	spirv_glsl.hpp	/^		std::string null_pointer_literal = "";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
num_components	spirv_msl.hpp	/^			uint32_t num_components = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
num_workgroups_builtin	spirv_hlsl.hpp	/^	uint32_t num_workgroups_builtin = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
offset	spirv_common.hpp	/^		uint32_t offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
offset	spirv_common.hpp	/^	uint32_t offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Instruction
offset	spirv_cross.hpp	/^	size_t offset;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BufferRange
offset	spirv_cross_c.h	/^	size_t offset;$/;"	m	struct:spvc_buffer_range
offset	spirv_cross_containers.hpp	/^		size_t offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StringStream::Buffer
offset	spirv_glsl.hpp	/^		uint32_t grad_x = 0, grad_y = 0, lod = 0, coffset = 0, offset = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
old_name	main.cpp	/^		string old_name;$/;"	m	struct:CLIArguments::Rename	file:
op	spirv_common.hpp	/^	uint16_t op = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Instruction
opcode	spirv_common.hpp	/^	spv::Op opcode;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstantOp
opcode_is_precision_forwarding_instruction	spirv_glsl.cpp	/^static bool opcode_is_precision_forwarding_instruction(Op op, uint32_t &arg_count)$/;"	f	file:
opcode_is_precision_sensitive_operation	spirv_glsl.cpp	/^static bool opcode_is_precision_sensitive_operation(Op op)$/;"	f	file:
opcode_is_sign_invariant	spirv_common.hpp	/^static inline bool opcode_is_sign_invariant(spv::Op opcode)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
operator !=	spirv_common.hpp	/^	inline bool operator!=(const Bitset &other) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
operator ()	spirv_common.hpp	/^	inline size_t operator()(const LocationComponentPair &value) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::InternalHasher
operator ()	spirv_common.hpp	/^	inline size_t operator()(const SetBindingPair &value) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::InternalHasher
operator ()	spirv_common.hpp	/^	inline size_t operator()(const StageSetBinding &value) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::InternalHasher
operator ()	spirv_common.hpp	/^	size_t operator()(const SPIRV_CROSS_NAMESPACE::TypedID<type> &value) const$/;"	f	struct:std::hash
operator ()	spirv_cross_containers.hpp	/^		void operator()(T *ptr)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::ObjectPool::MallocDeleter
operator ()	spirv_msl.cpp	/^bool CompilerMSL::MemberSorter::operator()(uint32_t mbr_idx1, uint32_t mbr_idx2)$/;"	f	class:CompilerMSL::MemberSorter
operator <	spirv_common.hpp	/^	inline bool operator<(const LocationComponentPair &other) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::LocationComponentPair
operator <	spirv_common.hpp	/^	inline bool operator<(const SetBindingPair &other) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SetBindingPair
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(char c)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(const T &t)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(const char (&s)[N])$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(const char *s)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(const std::string &s)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator <<	spirv_cross_containers.hpp	/^	StringStream &operator<<(uint32_t v)$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
operator =	spirv_common.hpp	/^	TypedID &operator=(const TypedID<U> &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
operator =	spirv_common.hpp	/^	Variant &operator=(const Variant &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
operator =	spirv_cross_parsed_ir.cpp	/^ParsedIR &ParsedIR::operator=(const ParsedIR &other)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
operator ==	spirv_common.hpp	/^	inline bool operator==(const Bitset &other) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
operator ==	spirv_common.hpp	/^	inline bool operator==(const LocationComponentPair &other) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::LocationComponentPair
operator ==	spirv_common.hpp	/^	inline bool operator==(const SetBindingPair &other) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SetBindingPair
operator ==	spirv_common.hpp	/^	inline bool operator==(const StageSetBinding &other) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::StageSetBinding
operator TypedID<U>	spirv_common.hpp	/^	operator TypedID<U>() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
operator std::vector<T>	spirv_cross_containers.hpp	/^	explicit operator std::vector<T>() &&$/;"	f	class:SPIRV_CROSS_NAMESPACE::VectorView
operator std::vector<T>	spirv_cross_containers.hpp	/^	explicit operator std::vector<T>() const &$/;"	f	class:SPIRV_CROSS_NAMESPACE::VectorView
operator std::vector<T>	spirv_cross_containers.hpp	/^	explicit operator std::vector<T>() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::VectorView
operator uint32_t	spirv_common.hpp	/^	operator uint32_t() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::TypedID
operator |	spirv.hpp	/^inline FPFastMathModeMask operator|(FPFastMathModeMask a, FPFastMathModeMask b) { return FPFastMathModeMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline FragmentShadingRateMask operator|(FragmentShadingRateMask a, FragmentShadingRateMask b) { return FragmentShadingRateMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline FunctionControlMask operator|(FunctionControlMask a, FunctionControlMask b) { return FunctionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline ImageOperandsMask operator|(ImageOperandsMask a, ImageOperandsMask b) { return ImageOperandsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline KernelProfilingInfoMask operator|(KernelProfilingInfoMask a, KernelProfilingInfoMask b) { return KernelProfilingInfoMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline LoopControlMask operator|(LoopControlMask a, LoopControlMask b) { return LoopControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline MemoryAccessMask operator|(MemoryAccessMask a, MemoryAccessMask b) { return MemoryAccessMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline MemorySemanticsMask operator|(MemorySemanticsMask a, MemorySemanticsMask b) { return MemorySemanticsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline RayFlagsMask operator|(RayFlagsMask a, RayFlagsMask b) { return RayFlagsMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
operator |	spirv.hpp	/^inline SelectionControlMask operator|(SelectionControlMask a, SelectionControlMask b) { return SelectionControlMask(unsigned(a) | unsigned(b)); }$/;"	f	namespace:spv
ops	spirv_common.hpp	/^	SmallVector<Instruction> ops;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
ops	spirv_common.hpp	/^	SmallVector<uint32_t> ops;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::EmbeddedInstruction
optimize_read_modify_write	spirv_glsl.cpp	/^bool CompilerGLSL::optimize_read_modify_write(const SPIRType &type, const string &lhs, const string &rhs)$/;"	f	class:CompilerGLSL
options	spirv_glsl.hpp	/^	Options options;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
orig_name	spirv_common.hpp	/^	std::string orig_name;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
output	main.cpp	/^	const char *output = nullptr;$/;"	m	struct:CLIArguments	file:
output_buffer_var_name	spirv_msl.hpp	/^	std::string output_buffer_var_name = "spvOut";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
output_vertices	spirv_common.hpp	/^	uint32_t output_vertices = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
override	spirv_cpp.hpp	/^	std::string compile() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	std::string variable_decl(const SPIRType &type, const std::string &name, uint32_t id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	void emit_buffer_block(const SPIRVariable &type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	void emit_function_prototype(SPIRFunction &func, const Bitset &return_flags) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	void emit_header() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	void emit_push_constant_block(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cpp.hpp	/^	void emit_uniform(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
override	spirv_cross.hpp	/^		bool begin_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
override	spirv_cross.hpp	/^		bool begin_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
override	spirv_cross.hpp	/^		bool begin_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
override	spirv_cross.hpp	/^		bool begin_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
override	spirv_cross.hpp	/^		bool end_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
override	spirv_cross.hpp	/^		bool end_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
override	spirv_cross.hpp	/^		bool end_function_scope(const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
override	spirv_cross.hpp	/^		bool follow_function_call(const SPIRFunction &) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
override	spirv_cross.hpp	/^		bool follow_function_call(const SPIRFunction &) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
override	spirv_cross.hpp	/^		bool follow_function_call(const SPIRFunction &func) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CFGBuilder
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CFGBuilder
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalStorageBufferPointerHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op op, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::ActiveBuiltinHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerDrefHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerUsageHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::DummySamplerForCombinedImageHandler
override	spirv_cross.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterfaceVariableAccessHandler
override	spirv_cross.hpp	/^		bool handle_terminator(const SPIRBlock &block) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
override	spirv_cross.hpp	/^		void rearm_current_block(const SPIRBlock &block) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
override	spirv_cross.hpp	/^		void set_current_block(const SPIRBlock &block) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
override	spirv_glsl.hpp	/^	std::string compile() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
override	spirv_hlsl.hpp	/^	                        uint32_t base_offset = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	                  uint32_t count) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	bool builtin_translates_to_nonarray(spv::BuiltIn builtin) const override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	bool emit_complex_bitcast(uint32_t result_type, uint32_t id, uint32_t op0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	const char *to_storage_qualifiers_glsl(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string bitcast_glsl_op(const SPIRType &result_type, const SPIRType &argument_type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string builtin_to_glsl(spv::BuiltIn builtin, spv::StorageClass storage) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string compile() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string layout_for_member(const SPIRType &type, uint32_t index) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string to_func_call_arg(const SPIRFunction::Parameter &arg, uint32_t id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string to_initializer_expression(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string to_interpolation_qualifiers(const Bitset &flags) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	std::string type_to_glsl(const SPIRType &type, uint32_t id = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void declare_undefined_values() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_block_hints(const SPIRBlock &block) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_buffer_block(const SPIRVariable &type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_fixup() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_function_prototype(SPIRFunction &func, const Bitset &return_flags) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_header() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_instruction(const Instruction &instruction) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_push_constant_block(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_sampled_image_op(uint32_t result_type, uint32_t result_id, uint32_t image_id, uint32_t samp_id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_subgroup_op(const Instruction &i) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_texture_op(const Instruction &i, bool sparse) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void emit_uniform(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_hlsl.hpp	/^	void replace_illegal_names() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
override	spirv_msl.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t length) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
override	spirv_msl.hpp	/^		bool handle(spv::Op opcode, const uint32_t *args, uint32_t) override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::SampledImageScanner
override	spirv_msl.hpp	/^	                                            bool &is_packed) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                                           const uint32_t *args, uint32_t count) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                                     bool is_packed) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                                   bool is_packed, bool row_major) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                          SmallVector<uint32_t> &inherited_expressions) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                        const std::string &qualifier = "", uint32_t base_offset = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                     spv::StorageClass lhs_storage, spv::StorageClass rhs_storage) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	                  uint32_t count) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool access_chain_needs_stage_io_builtin_translation(uint32_t base) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool builtin_translates_to_nonarray(spv::BuiltIn builtin) const override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool emit_complex_bitcast(uint32_t result_id, uint32_t id, uint32_t op0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool is_non_native_row_major_matrix(uint32_t id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool member_is_non_native_row_major_matrix(const SPIRType &type, uint32_t index) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool skip_argument(uint32_t id) const override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	bool variable_decl_is_remapped_storage(const SPIRVariable &variable, spv::StorageClass storage) const override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string bitcast_glsl_op(const SPIRType &result_type, const SPIRType &argument_type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string builtin_to_glsl(spv::BuiltIn builtin, spv::StorageClass storage) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string compile() override;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
override	spirv_msl.hpp	/^	std::string constant_op_expression(const SPIRConstantOp &cop) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string image_type_glsl(const SPIRType &type, uint32_t id = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_func_call_arg(const SPIRFunction::Parameter &arg, uint32_t id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_function_args(const TextureFunctionArguments &args, bool *p_forward) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_function_name(const TextureFunctionNameArguments &args) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_initializer_expression(const SPIRVariable &var) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_member_reference(uint32_t base, const SPIRType &type, uint32_t index, bool ptr_chain) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_name(uint32_t id, bool allow_alias = true) const override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_qualifiers_glsl(uint32_t id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string to_zero_initialized_expression(uint32_t type_id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string type_to_array_glsl(const SPIRType &type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string type_to_glsl(const SPIRType &type, uint32_t id = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string variable_decl(const SPIRType &type, const std::string &name, uint32_t id = 0) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	std::string variable_decl(const SPIRVariable &variable) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void cast_from_variable_load(uint32_t source_id, std::string &expr, const SPIRType &expr_type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void cast_to_variable_store(uint32_t target_id, std::string &expr, const SPIRType &expr_type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void declare_undefined_values() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_block_hints(const SPIRBlock &block) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_entry_point_declarations() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_fixup() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_function_prototype(SPIRFunction &func, const Bitset &return_flags) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_header() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_instruction(const Instruction &instr) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_sampled_image_op(uint32_t result_type, uint32_t result_id, uint32_t image_id, uint32_t samp_id) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_store_statement(uint32_t lhs_expression, uint32_t rhs_expression) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_struct_padding_target(const SPIRType &type) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_subgroup_op(const Instruction &i) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void emit_texture_op(const Instruction &i, bool sparse) override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_msl.hpp	/^	void replace_illegal_names() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
override	spirv_reflect.hpp	/^	std::string compile() override;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerReflection
ovr_multiview_view_count	spirv_glsl.hpp	/^		uint32_t ovr_multiview_view_count = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
packing_has_flexible_offset	spirv_glsl.cpp	/^static bool packing_has_flexible_offset(BufferPackingStandard packing)$/;"	f	file:
packing_is_hlsl	spirv_glsl.cpp	/^static bool packing_is_hlsl(BufferPackingStandard packing)$/;"	f	file:
packing_is_scalar	spirv_glsl.cpp	/^static bool packing_is_scalar(BufferPackingStandard packing)$/;"	f	file:
packing_is_vec4_padded	spirv_glsl.cpp	/^static bool packing_is_vec4_padded(BufferPackingStandard packing)$/;"	f	file:
packing_to_substruct_packing	spirv_glsl.cpp	/^static BufferPackingStandard packing_to_substruct_packing(BufferPackingStandard packing)$/;"	f	file:
pad_argument_buffer_resources	spirv_msl.hpp	/^		bool pad_argument_buffer_resources = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
pad_fragment_output_components	spirv_msl.hpp	/^		bool pad_fragment_output_components = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
parameter	spirv_common.hpp	/^	SPIRFunction::Parameter *parameter = nullptr;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
parameter_remapping	spirv_cross.hpp	/^		std::stack<std::unordered_map<uint32_t, uint32_t>> parameter_remapping;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::CombinedImageSamplerHandler
parameter_types	spirv_common.hpp	/^	SmallVector<uint32_t> parameter_types;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunctionPrototype
parent	spirv_common.hpp	/^		BlockID parent; \/\/ If we're in from_block and want to branch into this block ...$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock::Phi
parent_type	spirv_common.hpp	/^	TypeID parent_type = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
parse	main.cpp	/^	bool parse()$/;"	f	struct:CLIParser
parse	spirv_parser.cpp	/^void Parser::parse()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
parse	spirv_parser.cpp	/^void Parser::parse(const Instruction &instruction)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
parse_fixup	spirv_cross.cpp	/^void Compiler::parse_fixup()$/;"	f	class:Compiler
parsed	spirv_cross_c.cpp	/^	ParsedIR parsed;$/;"	m	struct:spvc_parsed_ir_s	file:
partial_write_variables_to_block	spirv_cross.hpp	/^		std::unordered_map<uint32_t, std::unordered_set<uint32_t>> partial_write_variables_to_block;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
patch_output_buffer_var_name	spirv_msl.hpp	/^	std::string patch_output_buffer_var_name = "spvPatchOut";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
patch_stage_in_var_id	spirv_msl.hpp	/^	VariableID patch_stage_in_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
patch_stage_in_var_name	spirv_msl.hpp	/^	std::string patch_stage_in_var_name = "patchIn";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
patch_stage_out_var_id	spirv_msl.hpp	/^	VariableID patch_stage_out_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
patch_stage_out_var_name	spirv_msl.hpp	/^	std::string patch_stage_out_var_name = "patchOut";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
per_instance	spirv_cross_c.h	/^	spvc_bool per_instance;$/;"	m	struct:spvc_msl_vertex_attribute
phi_variable	spirv_common.hpp	/^	bool phi_variable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
phi_variables	spirv_common.hpp	/^	SmallVector<Phi> phi_variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
physical_block_type_meta	spirv_cross.hpp	/^		std::unordered_map<uint32_t, PhysicalBlockMeta> physical_block_type_meta;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::PhysicalStorageBufferPointerHandler
physical_storage_non_block_pointer_types	spirv_cross.hpp	/^	SmallVector<uint32_t> physical_storage_non_block_pointer_types;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
physical_storage_type_to_alignment	spirv_cross.hpp	/^	std::unordered_map<uint32_t, PhysicalBlockMeta> physical_storage_type_to_alignment;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
plane_name_suffix	spirv_msl.hpp	/^	std::string plane_name_suffix = "Plane";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
planes	spirv_cross_c.h	/^	unsigned planes;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
planes	spirv_msl.hpp	/^	uint32_t planes = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
platform	spirv_msl.hpp	/^		Platform platform = macOS;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
pls_decl	spirv_glsl.cpp	/^string CompilerGLSL::pls_decl(const PlsRemap &var)$/;"	f	class:CompilerGLSL
pls_format	main.cpp	/^static PlsFormat pls_format(const char *str)$/;"	f	file:
pls_format_to_basetype	spirv_glsl.cpp	/^static SPIRType::BaseType pls_format_to_basetype(PlsFormat format)$/;"	f	file:
pls_format_to_components	spirv_glsl.cpp	/^static uint32_t pls_format_to_components(PlsFormat format)$/;"	f	file:
pls_in	main.cpp	/^	SmallVector<PLSArg> pls_in;$/;"	m	struct:CLIArguments	file:
pls_inputs	spirv_glsl.hpp	/^	std::vector<PlsRemap> pls_inputs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
pls_out	main.cpp	/^	SmallVector<PLSArg> pls_out;$/;"	m	struct:CLIArguments	file:
pls_outputs	spirv_glsl.hpp	/^	std::vector<PlsRemap> pls_outputs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
point_coord_compat	spirv_hlsl.hpp	/^		bool point_coord_compat = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
point_size_compat	spirv_hlsl.hpp	/^		bool point_size_compat = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
pointer	spirv_common.hpp	/^	bool pointer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
pointer_depth	spirv_common.hpp	/^	uint32_t pointer_depth = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
pool_group	spirv_cross_parsed_ir.hpp	/^	std::unique_ptr<ObjectPoolGroup> pool_group;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
pools	spirv_common.hpp	/^	std::unique_ptr<ObjectPoolBase> pools[TypeCount];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ObjectPoolGroup
pop_remap_parameters	spirv_cross.cpp	/^void Compiler::CombinedImageSamplerHandler::pop_remap_parameters()$/;"	f	class:Compiler::CombinedImageSamplerHandler
position_invariant	spirv_cross.hpp	/^	bool position_invariant = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
post_order	spirv_cfg.hpp	/^	SmallVector<uint32_t> post_order;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
post_order_visit	spirv_cfg.cpp	/^bool CFG::post_order_visit(uint32_t block_id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
potential_declare_temporary	spirv_common.hpp	/^	SmallVector<std::pair<TypeID, ID>> potential_declare_temporary;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
pragma_lines	spirv_msl.hpp	/^	std::set<std::string> pragma_lines;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
preceding_edges	spirv_cfg.hpp	/^	std::unordered_map<uint32_t, SmallVector<uint32_t>> preceding_edges;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
prepare_access_chain_for_scalar_access	spirv_glsl.cpp	/^void CompilerGLSL::prepare_access_chain_for_scalar_access(std::string &, const SPIRType &, spv::StorageClass, bool &)$/;"	f	class:CompilerGLSL
prepare_access_chain_for_scalar_access	spirv_msl.cpp	/^void CompilerMSL::prepare_access_chain_for_scalar_access(std::string &expr, const SPIRType &type,$/;"	f	class:CompilerMSL
preprocess_op_codes	spirv_msl.cpp	/^void CompilerMSL::preprocess_op_codes()$/;"	f	class:CompilerMSL
preserve_alias_on_reset	spirv_glsl.cpp	/^void CompilerGLSL::preserve_alias_on_reset(uint32_t id)$/;"	f	class:CompilerGLSL
preserved_aliases	spirv_glsl.hpp	/^	std::unordered_map<uint32_t, std::string> preserved_aliases;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
previous_instruction_opcode	spirv_msl.hpp	/^	spv::Op previous_instruction_opcode = spv::OpNop;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
print_capabilities_and_extensions	main.cpp	/^static void print_capabilities_and_extensions(const Compiler &compiler)$/;"	f	file:
print_help	main.cpp	/^static void print_help()$/;"	f	file:
print_help_backend	main.cpp	/^static void print_help_backend()$/;"	f	file:
print_help_common	main.cpp	/^static void print_help_common()$/;"	f	file:
print_help_glsl	main.cpp	/^static void print_help_glsl()$/;"	f	file:
print_help_hlsl	main.cpp	/^static void print_help_hlsl()$/;"	f	file:
print_help_msl	main.cpp	/^static void print_help_msl()$/;"	f	file:
print_help_obscure	main.cpp	/^static void print_help_obscure()$/;"	f	file:
print_push_constant_resources	main.cpp	/^static void print_push_constant_resources(const Compiler &compiler, const SmallVector<Resource> &res)$/;"	f	file:
print_resources	main.cpp	/^static void print_resources(const Compiler &compiler, const ShaderResources &res)$/;"	f	file:
print_resources	main.cpp	/^static void print_resources(const Compiler &compiler, const char *tag, const SmallVector<Resource> &resources)$/;"	f	file:
print_resources	main.cpp	/^static void print_resources(const Compiler &compiler, spv::StorageClass storage,$/;"	f	file:
print_spec_constants	main.cpp	/^static void print_spec_constants(const Compiler &compiler)$/;"	f	file:
print_version	main.cpp	/^static void print_version()$/;"	f	file:
processing_entry_point	spirv_glsl.hpp	/^	bool processing_entry_point = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
ptr	spirv_cross_containers.hpp	/^	T *ptr = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::VectorView
pull_model_inputs	spirv_msl.hpp	/^	std::unordered_set<uint32_t> pull_model_inputs;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
push_constant_buffers	spirv_cross.hpp	/^	SmallVector<Resource> push_constant_buffers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
push_constant_buffers	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> push_constant_buffers;$/;"	m	struct:spvc_resources_s	file:
push_remap_parameters	spirv_cross.cpp	/^void Compiler::CombinedImageSamplerHandler::push_remap_parameters(const SPIRFunction &func, const uint32_t *args,$/;"	f	class:Compiler::CombinedImageSamplerHandler
qual_pos_var_name	spirv_msl.hpp	/^	std::string qual_pos_var_name;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
qualified_alias	spirv_common.hpp	/^		std::string qualified_alias;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
r	spirv_common.hpp	/^		Constant r[4];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantVector
r32ui_alignment_constant_id	spirv_msl.hpp	/^		uint32_t r32ui_alignment_constant_id = 65535;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
r32ui_linear_texture_alignment	spirv_msl.hpp	/^		uint32_t r32ui_linear_texture_alignment = 4;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
r_address	spirv_cross_c.h	/^	spvc_msl_sampler_address r_address;$/;"	m	struct:spvc_msl_constexpr_sampler
r_address	spirv_msl.hpp	/^	MSLSamplerAddress r_address = MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
range	spirv_cross.hpp	/^	size_t range;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BufferRange
range	spirv_cross_c.h	/^	size_t range;$/;"	m	struct:spvc_buffer_range
ranges	spirv_cross.hpp	/^		SmallVector<BufferRange> &ranges;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
ray_tracing_is_khr	spirv_glsl.hpp	/^	bool ray_tracing_is_khr = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
ray_tracing_khr_fixup_locations	spirv_glsl.cpp	/^void CompilerGLSL::ray_tracing_khr_fixup_locations()$/;"	f	class:CompilerGLSL
read_access_chain	spirv_hlsl.cpp	/^void CompilerHLSL::read_access_chain(string *expr, const string &lhs, const SPIRAccessChain &chain)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
read_access_chain_array	spirv_hlsl.cpp	/^void CompilerHLSL::read_access_chain_array(const string &lhs, const SPIRAccessChain &chain)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
read_access_chain_struct	spirv_hlsl.cpp	/^void CompilerHLSL::read_access_chain_struct(const string &lhs, const SPIRAccessChain &chain)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
read_count	spirv_common.hpp	/^		uint32_t read_count;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::Parameter
read_spirv_file	main.cpp	/^static vector<uint32_t> read_spirv_file(const char *path)$/;"	f	file:
read_spirv_file_stdin	main.cpp	/^static vector<uint32_t> read_spirv_file_stdin()$/;"	f	file:
rearm_current_block	spirv_cross.cpp	/^void Compiler::InterlockedResourceAccessPrepassHandler::rearm_current_block(const SPIRBlock &block)$/;"	f	class:Compiler::InterlockedResourceAccessPrepassHandler
rearm_current_block	spirv_cross.hpp	/^		virtual void rearm_current_block(const SPIRBlock &)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
redirect_statement	spirv_glsl.hpp	/^	SmallVector<std::string> *redirect_statement = nullptr;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
reflect	main.cpp	/^	string reflect;$/;"	m	struct:CLIArguments	file:
reflection_ssbo_instance_name_is_significant	spirv_cross.cpp	/^bool Compiler::reflection_ssbo_instance_name_is_significant() const$/;"	f	class:Compiler
register_binding	spirv_cross_c.h	/^	unsigned register_binding;$/;"	m	struct:spvc_hlsl_resource_binding_mapping
register_binding	spirv_hlsl.hpp	/^		uint32_t register_binding = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
register_call_out_argument	spirv_glsl.cpp	/^void CompilerGLSL::register_call_out_argument(uint32_t id)$/;"	f	class:CompilerGLSL
register_combined_image_sampler	spirv_cross.cpp	/^void Compiler::CombinedImageSamplerHandler::register_combined_image_sampler(SPIRFunction &caller,$/;"	f	class:Compiler::CombinedImageSamplerHandler
register_control_dependent_expression	spirv_glsl.cpp	/^void CompilerGLSL::register_control_dependent_expression(uint32_t expr)$/;"	f	class:CompilerGLSL
register_global_read_dependencies	spirv_cross.cpp	/^void Compiler::register_global_read_dependencies(const SPIRBlock &block, uint32_t id)$/;"	f	class:Compiler
register_global_read_dependencies	spirv_cross.cpp	/^void Compiler::register_global_read_dependencies(const SPIRFunction &func, uint32_t id)$/;"	f	class:Compiler
register_impure_function_call	spirv_glsl.cpp	/^void CompilerGLSL::register_impure_function_call()$/;"	f	class:CompilerGLSL
register_read	spirv_cross.cpp	/^void Compiler::register_read(uint32_t expr, uint32_t chain, bool forwarded)$/;"	f	class:Compiler
register_space	spirv_cross_c.h	/^	unsigned register_space;$/;"	m	struct:spvc_hlsl_resource_binding_mapping
register_space	spirv_hlsl.hpp	/^		uint32_t register_space = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
register_write	spirv_cross.cpp	/^void Compiler::register_write(uint32_t chain)$/;"	f	class:Compiler
relax_nan_checks	main.cpp	/^	bool relax_nan_checks = false;$/;"	m	struct:CLIArguments	file:
relax_nan_checks	spirv_glsl.hpp	/^		bool relax_nan_checks = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
relaxed_precision	spirv_common.hpp	/^	bool relaxed_precision = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
release	spirv_common.hpp	/^	void release()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::ValueSaver
remap_constexpr_sampler	spirv_msl.cpp	/^void CompilerMSL::remap_constexpr_sampler(VariableID id, const MSLConstexprSampler &sampler)$/;"	f	class:CompilerMSL
remap_constexpr_sampler_by_binding	spirv_msl.cpp	/^void CompilerMSL::remap_constexpr_sampler_by_binding(uint32_t desc_set, uint32_t binding,$/;"	f	class:CompilerMSL
remap_ext_framebuffer_fetch	spirv_glsl.cpp	/^void CompilerGLSL::remap_ext_framebuffer_fetch(uint32_t input_attachment_index, uint32_t color_location, bool coherent)$/;"	f	class:CompilerGLSL
remap_generic	main.cpp	/^static bool remap_generic(Compiler &compiler, const SmallVector<Resource> &resources, const Remap &remap)$/;"	f	file:
remap_hlsl_resource_binding	spirv_hlsl.cpp	/^void CompilerHLSL::remap_hlsl_resource_binding(HLSLBindingFlagBits type, uint32_t &desc_set, uint32_t &binding)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
remap_num_workgroups_builtin	spirv_hlsl.cpp	/^VariableID CompilerHLSL::remap_num_workgroups_builtin()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
remap_parameter	spirv_cross.cpp	/^uint32_t Compiler::CombinedImageSamplerHandler::remap_parameter(uint32_t id)$/;"	f	class:Compiler::CombinedImageSamplerHandler
remap_pixel_local_storage	spirv_glsl.hpp	/^	void remap_pixel_local_storage(std::vector<PlsRemap> inputs, std::vector<PlsRemap> outputs)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
remap_pls	main.cpp	/^static vector<PlsRemap> remap_pls(const SmallVector<PLSArg> &pls_variables, const SmallVector<Resource> &resources,$/;"	f	file:
remap_pls_variables	spirv_glsl.cpp	/^void CompilerGLSL::remap_pls_variables()$/;"	f	class:CompilerGLSL
remap_swizzle	spirv_glsl.cpp	/^string CompilerGLSL::remap_swizzle(const SPIRType &out_type, uint32_t input_components, const string &expr)$/;"	f	class:CompilerGLSL
remap_variable_type_name	spirv_cross.hpp	/^	void remap_variable_type_name(const SPIRType &type, const std::string &var_name, std::string &type_name) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
remap_vertex_attributes	spirv_hlsl.hpp	/^	SmallVector<HLSLVertexAttributeRemap> remap_vertex_attributes;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
remapped_components	spirv_common.hpp	/^	uint32_t remapped_components = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
remapped_variable	spirv_common.hpp	/^	bool remapped_variable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
remaps	main.cpp	/^	SmallVector<Remap> remaps;$/;"	m	struct:CLIArguments	file:
remove_duplicate_swizzle	spirv_glsl.cpp	/^bool CompilerGLSL::remove_duplicate_swizzle(string &op)$/;"	f	class:CompilerGLSL
remove_typed_id	spirv_cross_parsed_ir.cpp	/^void ParsedIR::remove_typed_id(Types type, ID id)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
remove_unity_swizzle	spirv_glsl.cpp	/^bool CompilerGLSL::remove_unity_swizzle(uint32_t base, string &op)$/;"	f	class:CompilerGLSL
remove_unused	main.cpp	/^	bool remove_unused = false;$/;"	m	struct:CLIArguments	file:
rename_entry_point	spirv_cross.cpp	/^void Compiler::rename_entry_point(const std::string &old_name, const std::string &new_name, spv::ExecutionModel model)$/;"	f	class:Compiler
rename_interface_variable	spirv_cross_util.cpp	/^void rename_interface_variable(Compiler &compiler, const SmallVector<Resource> &resources, uint32_t location,$/;"	f	namespace:spirv_cross_util
reorder_type_alias	spirv_glsl.cpp	/^void CompilerGLSL::reorder_type_alias()$/;"	f	class:CompilerGLSL
replace_fragment_output	spirv_glsl.cpp	/^void CompilerGLSL::replace_fragment_output(SPIRVariable &var)$/;"	f	class:CompilerGLSL
replace_fragment_outputs	spirv_glsl.cpp	/^void CompilerGLSL::replace_fragment_outputs()$/;"	f	class:CompilerGLSL
replace_illegal_entry_point_names	spirv_msl.cpp	/^void CompilerMSL::replace_illegal_entry_point_names()$/;"	f	class:CompilerMSL
replace_illegal_names	spirv_glsl.cpp	/^void CompilerGLSL::replace_illegal_names()$/;"	f	class:CompilerGLSL
replace_illegal_names	spirv_glsl.cpp	/^void CompilerGLSL::replace_illegal_names(const unordered_set<string> &keywords)$/;"	f	class:CompilerGLSL
replace_illegal_names	spirv_hlsl.cpp	/^void CompilerHLSL::replace_illegal_names()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
replace_illegal_names	spirv_msl.cpp	/^void CompilerMSL::replace_illegal_names()$/;"	f	class:CompilerMSL
report_and_abort	spirv_cross_error_handling.hpp	/^report_and_abort(const std::string &msg)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
report_error	spirv_cross_c.cpp	/^void spvc_context_s::report_error(std::string msg)$/;"	f	class:spvc_context_s
request_feature	spirv_glsl.cpp	/^void CompilerGLSL::ShaderSubgroupSupportHelper::request_feature(Feature feature)$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
request_subgroup_feature	spirv_glsl.cpp	/^void CompilerGLSL::request_subgroup_feature(ShaderSubgroupSupportHelper::Feature feature)$/;"	f	class:CompilerGLSL
request_workaround_wrapper_overload	spirv_glsl.cpp	/^void CompilerGLSL::request_workaround_wrapper_overload(TypeID id)$/;"	f	class:CompilerGLSL
require_extension	spirv_glsl.cpp	/^void CompilerGLSL::require_extension(const std::string &ext)$/;"	f	class:CompilerGLSL
require_extension_internal	spirv_glsl.cpp	/^void CompilerGLSL::require_extension_internal(const string &ext)$/;"	f	class:CompilerGLSL
require_input	spirv_hlsl.hpp	/^	bool require_input = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
require_output	spirv_hlsl.hpp	/^	bool require_output = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
require_texture_query_variant	spirv_hlsl.cpp	/^void CompilerHLSL::require_texture_query_variant(uint32_t var_id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
required_texture_size_variants	spirv_hlsl.hpp	/^	} required_texture_size_variants;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL	typeref:struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureSizeVariants
requires_bitfield_extract	spirv_hlsl.hpp	/^	bool requires_bitfield_extract = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_bitfield_insert	spirv_hlsl.hpp	/^	bool requires_bitfield_insert = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_explicit_fp16_packing	spirv_hlsl.hpp	/^	bool requires_explicit_fp16_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_fp16_packing	spirv_hlsl.hpp	/^	bool requires_fp16_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_inverse_2x2	spirv_hlsl.hpp	/^	bool requires_inverse_2x2 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_inverse_3x3	spirv_hlsl.hpp	/^	bool requires_inverse_3x3 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_inverse_4x4	spirv_hlsl.hpp	/^	bool requires_inverse_4x4 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_op_fmod	spirv_hlsl.hpp	/^	bool requires_op_fmod = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_relaxed_precision_analysis	spirv_glsl.hpp	/^		bool requires_relaxed_precision_analysis = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
requires_scalar_faceforward	spirv_hlsl.hpp	/^	bool requires_scalar_faceforward = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_scalar_reflect	spirv_hlsl.hpp	/^	bool requires_scalar_reflect = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_scalar_refract	spirv_hlsl.hpp	/^	bool requires_scalar_refract = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_snorm16_packing	spirv_hlsl.hpp	/^	bool requires_snorm16_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_snorm8_packing	spirv_hlsl.hpp	/^	bool requires_snorm8_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_transpose_2x2	spirv_glsl.hpp	/^	bool requires_transpose_2x2 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
requires_transpose_3x3	spirv_glsl.hpp	/^	bool requires_transpose_3x3 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
requires_transpose_4x4	spirv_glsl.hpp	/^	bool requires_transpose_4x4 = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
requires_uint2_packing	spirv_hlsl.hpp	/^	bool requires_uint2_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_unorm16_packing	spirv_hlsl.hpp	/^	bool requires_unorm16_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
requires_unorm8_packing	spirv_hlsl.hpp	/^	bool requires_unorm8_packing = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
reset	spirv_common.hpp	/^	inline void reset()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
reset	spirv_common.hpp	/^	void reset()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
reset	spirv_cross_containers.hpp	/^	void reset()$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
reset	spirv_glsl.cpp	/^void CompilerGLSL::reset(uint32_t iteration_count)$/;"	f	class:CompilerGLSL
reset_all_of_type	spirv_cross_parsed_ir.cpp	/^void ParsedIR::reset_all_of_type(Types type)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
reset_all_of_type	spirv_cross_parsed_ir.hpp	/^	void reset_all_of_type()$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
reset_name_caches	spirv_glsl.cpp	/^void CompilerGLSL::reset_name_caches()$/;"	f	class:CompilerGLSL
resolution	spirv_cross_c.h	/^	spvc_msl_format_resolution resolution;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
resolution	spirv_msl.hpp	/^	MSLFormatResolution resolution = MSL_FORMAT_RESOLUTION_444;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
resolve	spirv_glsl.cpp	/^CompilerGLSL::ShaderSubgroupSupportHelper::Result CompilerGLSL::ShaderSubgroupSupportHelper::resolve() const$/;"	f	class:CompilerGLSL::ShaderSubgroupSupportHelper
resource	spirv_cross.hpp	/^	Resource resource;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BuiltInResource
resource	spirv_cross_c.h	/^	spvc_reflected_resource resource;$/;"	m	struct:spvc_reflected_builtin_resource
resource_arg_buff_idx_to_binding_number	spirv_msl.hpp	/^	std::unordered_map<StageSetBinding, uint32_t, InternalHasher> resource_arg_buff_idx_to_binding_number;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
resource_binding_flags	spirv_hlsl.hpp	/^	HLSLBindingFlags resource_binding_flags = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
resource_bindings	spirv_hlsl.hpp	/^	std::unordered_map<StageSetBinding, std::pair<HLSLResourceBinding, bool>, InternalHasher> resource_bindings;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
resource_bindings	spirv_msl.hpp	/^	std::unordered_map<StageSetBinding, std::pair<MSLResourceBinding, bool>, InternalHasher> resource_bindings;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
resource_names	spirv_glsl.hpp	/^	std::unordered_set<std::string> resource_names;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
resource_registrations	spirv_cpp.hpp	/^	SmallVector<std::string> resource_registrations;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
resource_type	spirv_cpp.hpp	/^	std::string resource_type;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
result_id_to_type	spirv_cross.hpp	/^		std::unordered_map<uint32_t, uint32_t> result_id_to_type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::AnalyzeVariableScopeAccessHandler
result_types	spirv_msl.hpp	/^		std::unordered_map<uint32_t, uint32_t> result_types;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
return_type	spirv_common.hpp	/^	TypeID return_type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
return_type	spirv_common.hpp	/^	TypeID return_type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunctionPrototype
return_value	spirv_common.hpp	/^	ID return_value = 0; \/\/ If 0, return nothing (void).$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
rewrite_load_for_wrapped_row_major	spirv_glsl.cpp	/^void CompilerGLSL::rewrite_load_for_wrapped_row_major(std::string &expr, TypeID loaded_type, ID ptr)$/;"	f	class:CompilerGLSL
root_constants_layout	spirv_hlsl.hpp	/^	std::vector<RootConstants> root_constants_layout;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
round_fp_tex_coords	spirv_msl.cpp	/^string CompilerMSL::round_fp_tex_coords(string tex_coords, bool coord_is_fp)$/;"	f	class:CompilerMSL
row_major_matrix	spirv_common.hpp	/^	bool row_major_matrix = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
s_address	spirv_cross_c.h	/^	spvc_msl_sampler_address s_address;$/;"	m	struct:spvc_msl_constexpr_sampler
s_address	spirv_msl.hpp	/^	MSLSamplerAddress s_address = MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
sample	spirv_glsl.hpp	/^		uint32_t bias = 0, component = 0, sample = 0, sparse_texel = 0, min_lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
sample	spirv_msl.hpp	/^			bool sample = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta::LocationMeta
sampled	spirv_common.hpp	/^		uint32_t sampled;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
sampled_images	spirv_cross.hpp	/^	SmallVector<Resource> sampled_images;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
sampled_images	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> sampled_images;$/;"	m	struct:spvc_resources_s	file:
sampler	spirv_common.hpp	/^	VariableID sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRCombinedImageSampler
sampler	spirv_cross_c.h	/^	spvc_hlsl_resource_binding_mapping cbv, uav, srv, sampler;$/;"	m	struct:spvc_hlsl_resource_binding
sampler	spirv_hlsl.hpp	/^	} cbv, uav, srv, sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding	typeref:struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
sampler_id	spirv_common.hpp	/^		VariableID sampler_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::CombinedImageSamplerParameter
sampler_id	spirv_cross.hpp	/^	VariableID sampler_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CombinedImageSampler
sampler_id	spirv_cross_c.h	/^	spvc_variable_id sampler_id;$/;"	m	struct:spvc_combined_image_sampler
sampler_name_suffix	spirv_msl.hpp	/^	std::string sampler_name_suffix = "Smplr";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
sampler_type	spirv_msl.cpp	/^std::string CompilerMSL::sampler_type(const SPIRType &type, uint32_t id)$/;"	f	class:CompilerMSL
sampling_type_needs_f32_conversion	spirv_msl.cpp	/^static inline bool sampling_type_needs_f32_conversion(const SPIRType &type)$/;"	f	file:
sanitize_identifier	spirv_cross_parsed_ir.cpp	/^void ParsedIR::sanitize_identifier(std::string &name, bool member, bool allow_reserved_prefixes)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
sanitize_underscores	spirv_cross_parsed_ir.cpp	/^void ParsedIR::sanitize_underscores(std::string &str)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
saved	spirv_common.hpp	/^	T saved;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ValueSaver
saved_buffers	spirv_cross_containers.hpp	/^	SmallVector<Buffer> saved_buffers;$/;"	m	class:SPIRV_CROSS_NAMESPACE::StringStream
scalar	spirv_common.hpp	/^	inline uint32_t scalar(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_f16	spirv_common.hpp	/^	inline float scalar_f16(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_f32	spirv_common.hpp	/^	inline float scalar_f32(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_f64	spirv_common.hpp	/^	inline double scalar_f64(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_i16	spirv_common.hpp	/^	inline int16_t scalar_i16(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_i32	spirv_common.hpp	/^	inline int32_t scalar_i32(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_i64	spirv_common.hpp	/^	inline int64_t scalar_i64(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_i8	spirv_common.hpp	/^	inline int8_t scalar_i8(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_u16	spirv_common.hpp	/^	inline uint16_t scalar_u16(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_u64	spirv_common.hpp	/^	inline uint64_t scalar_u64(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
scalar_u8	spirv_common.hpp	/^	inline uint8_t scalar_u8(uint32_t col = 0, uint32_t row = 0) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
seen	spirv_cross.hpp	/^		std::unordered_set<uint32_t> seen;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::BufferAccessHandler
self	spirv_common.hpp	/^	FunctionID self = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint
self	spirv_common.hpp	/^	ID self = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::IVariant
semantic	spirv_cross_c.h	/^	const char *semantic;$/;"	m	struct:spvc_hlsl_vertex_attribute_remap
semantic	spirv_hlsl.hpp	/^	std::string semantic;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLVertexAttributeRemap
separate_images	spirv_cross.hpp	/^	SmallVector<Resource> separate_images;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
separate_images	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> separate_images;$/;"	m	struct:spvc_resources_s	file:
separate_samplers	spirv_cross.hpp	/^	SmallVector<Resource> separate_samplers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
separate_samplers	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> separate_samplers;$/;"	m	struct:spvc_resources_s	file:
separate_shader_objects	spirv_glsl.hpp	/^		bool separate_shader_objects = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
set	spirv_common.hpp	/^		uint32_t set = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
set	spirv_common.hpp	/^	inline void set(uint32_t bit)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Bitset
set	spirv_common.hpp	/^	void set(IVariant *val, Types new_type)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
set	spirv_cross.hpp	/^	T &set(uint32_t id, P &&... args)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
set	spirv_cross_c.cpp	/^	std::unordered_set<VariableID> set;$/;"	m	struct:spvc_set_s	file:
set	spirv_parser.hpp	/^	T &set(uint32_t id, P &&... args)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
set_allow_type_rewrite	spirv_common.hpp	/^	void set_allow_type_rewrite()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
set_argument_buffer_device_address_space	spirv_msl.cpp	/^void CompilerMSL::set_argument_buffer_device_address_space(uint32_t desc_set, bool device_storage)$/;"	f	class:CompilerMSL
set_combined_sampler_suffix	spirv_msl.cpp	/^void CompilerMSL::set_combined_sampler_suffix(const char *suffix)$/;"	f	class:CompilerMSL
set_common_options	spirv_glsl.hpp	/^	void set_common_options(const Options &opts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
set_current_block	spirv_cross.cpp	/^void Compiler::AnalyzeVariableScopeAccessHandler::set_current_block(const SPIRBlock &block)$/;"	f	class:Compiler::AnalyzeVariableScopeAccessHandler
set_current_block	spirv_cross.hpp	/^		virtual void set_current_block(const SPIRBlock &)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::Compiler::OpcodeHandler
set_current_locale_radix_character	spirv_reflect.cpp	/^	void set_current_locale_radix_character(char c)$/;"	f	class:simple_json::Stream
set_decoration	spirv_cross.cpp	/^void Compiler::set_decoration(ID id, Decoration decoration, uint32_t argument)$/;"	f	class:Compiler
set_decoration	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_decoration(ID id, Decoration decoration, uint32_t argument)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_decoration_string	spirv_cross.cpp	/^void Compiler::set_decoration_string(ID id, spv::Decoration decoration, const std::string &argument)$/;"	f	class:Compiler
set_decoration_string	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_decoration_string(ID id, Decoration decoration, const string &argument)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_enabled_interface_variables	spirv_cross.cpp	/^void Compiler::set_enabled_interface_variables(std::unordered_set<VariableID> active_variables)$/;"	f	class:Compiler
set_entry_point	spirv_cross.cpp	/^void Compiler::set_entry_point(const std::string &name, spv::ExecutionModel model)$/;"	f	class:Compiler
set_es	main.cpp	/^	bool set_es = false;$/;"	m	struct:CLIArguments	file:
set_execution_mode	spirv_cross.cpp	/^void Compiler::set_execution_mode(ExecutionMode mode, uint32_t arg0, uint32_t arg1, uint32_t arg2)$/;"	f	class:Compiler
set_extended_decoration	spirv_cross.cpp	/^void Compiler::set_extended_decoration(uint32_t id, ExtendedDecorations decoration, uint32_t value)$/;"	f	class:Compiler
set_extended_member_decoration	spirv_cross.cpp	/^void Compiler::set_extended_member_decoration(uint32_t type, uint32_t index, ExtendedDecorations decoration,$/;"	f	class:Compiler
set_format	spirv_reflect.cpp	/^void CompilerReflection::set_format(const std::string &format)$/;"	f	class:CompilerReflection
set_fragment_output_components	spirv_msl.cpp	/^void CompilerMSL::set_fragment_output_components(uint32_t location, uint32_t components)$/;"	f	class:CompilerMSL
set_hlsl_force_storage_buffer_as_uav	spirv_hlsl.cpp	/^void CompilerHLSL::set_hlsl_force_storage_buffer_as_uav(uint32_t desc_set, uint32_t binding)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
set_hlsl_options	spirv_hlsl.hpp	/^	void set_hlsl_options(const Options &opts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
set_id_bounds	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_id_bounds(uint32_t bounds)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_initializers	spirv_cross.hpp	/^	void set_initializers(SPIRExpression &e)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
set_initializers	spirv_cross.hpp	/^	void set_initializers(const T &)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
set_interface_name	spirv_cpp.hpp	/^	void set_interface_name(std::string name)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
set_ir	spirv_cross.cpp	/^void Compiler::set_ir(ParsedIR &&ir_)$/;"	f	class:Compiler
set_ir	spirv_cross.cpp	/^void Compiler::set_ir(const ParsedIR &ir_)$/;"	f	class:Compiler
set_member_decoration	spirv_cross.cpp	/^void Compiler::set_member_decoration(TypeID id, uint32_t index, Decoration decoration, uint32_t argument)$/;"	f	class:Compiler
set_member_decoration	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_member_decoration(TypeID id, uint32_t index, Decoration decoration, uint32_t argument)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_member_decoration_string	spirv_cross.cpp	/^void Compiler::set_member_decoration_string(TypeID id, uint32_t index, spv::Decoration decoration,$/;"	f	class:Compiler
set_member_decoration_string	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_member_decoration_string(TypeID id, uint32_t index, Decoration decoration, const string &argument)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_member_name	spirv_cross.cpp	/^void Compiler::set_member_name(TypeID id, uint32_t index, const std::string &name)$/;"	f	class:Compiler
set_member_name	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_member_name(TypeID id, uint32_t index, const string &name)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_member_qualified_name	spirv_cross.cpp	/^void Compiler::set_member_qualified_name(uint32_t type_id, uint32_t index, const std::string &name)$/;"	f	class:Compiler
set_msl_options	spirv_msl.hpp	/^	void set_msl_options(const Options &opts)$/;"	f	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
set_msl_version	main.cpp	/^	bool set_msl_version = false;$/;"	m	struct:CLIArguments	file:
set_msl_version	spirv_msl.hpp	/^		void set_msl_version(uint32_t major, uint32_t minor = 0, uint32_t patch = 0)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
set_name	spirv_cross.cpp	/^void Compiler::set_name(ID id, const std::string &name)$/;"	f	class:Compiler
set_name	spirv_cross_parsed_ir.cpp	/^void ParsedIR::set_name(ID id, const string &name)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
set_qualified_name	spirv_cross.cpp	/^void Compiler::set_qualified_name(uint32_t id, const string &name)$/;"	f	class:Compiler
set_remapped_variable_state	spirv_cross.cpp	/^void Compiler::set_remapped_variable_state(VariableID id, bool remap_enable)$/;"	f	class:Compiler
set_resource_binding_flags	spirv_hlsl.cpp	/^void CompilerHLSL::set_resource_binding_flags(HLSLBindingFlags flags)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
set_root_constant_layouts	spirv_hlsl.cpp	/^void CompilerHLSL::set_root_constant_layouts(std::vector<RootConstants> layout)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
set_shader_model	main.cpp	/^	bool set_shader_model = false;$/;"	m	struct:CLIArguments	file:
set_subpass_input_remapped_components	spirv_cross.cpp	/^void Compiler::set_subpass_input_remapped_components(VariableID id, uint32_t components)$/;"	f	class:Compiler
set_variable_type_remap_callback	spirv_cross.hpp	/^	void set_variable_type_remap_callback(VariableTypeRemapCallback cb)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
set_version	main.cpp	/^	bool set_version = false;$/;"	m	struct:CLIArguments	file:
setup_meta_chain	spirv_cross.cpp	/^void Compiler::PhysicalStorageBufferPointerHandler::setup_meta_chain(uint32_t type_id, uint32_t var_id)$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
shader_index_buffer_index	spirv_msl.hpp	/^		uint32_t shader_index_buffer_index = 21;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shader_input_buffer_index	spirv_msl.hpp	/^		uint32_t shader_input_buffer_index = 22;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shader_input_wg_index	spirv_msl.hpp	/^		uint32_t shader_input_wg_index = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shader_model	main.cpp	/^	uint32_t shader_model = 0;$/;"	m	struct:CLIArguments	file:
shader_model	spirv_hlsl.hpp	/^		uint32_t shader_model = 30; \/\/ TODO: map ps_4_0_level_9_0,... somehow$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
shader_output_buffer_index	spirv_msl.hpp	/^		uint32_t shader_output_buffer_index = 28;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shader_patch_output_buffer_index	spirv_msl.hpp	/^		uint32_t shader_patch_output_buffer_index = 27;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shader_subgroup_supporter	spirv_glsl.hpp	/^	ShaderSubgroupSupportHelper shader_subgroup_supporter;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
shader_tess_factor_buffer_index	spirv_msl.hpp	/^		uint32_t shader_tess_factor_buffer_index = 26;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
shadow_arguments	spirv_common.hpp	/^	SmallVector<Parameter> shadow_arguments;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction
shared_counter	spirv_cpp.hpp	/^	uint32_t shared_counter = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerCPP
shared_is_implied	spirv_glsl.hpp	/^		bool shared_is_implied = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
should_dereference	spirv_glsl.cpp	/^bool CompilerGLSL::should_dereference(uint32_t id)$/;"	f	class:CompilerGLSL
should_force_emit_builtin_block	spirv_glsl.cpp	/^bool CompilerGLSL::should_force_emit_builtin_block(StorageClass storage)$/;"	f	class:CompilerGLSL
should_forward	spirv_glsl.cpp	/^bool CompilerGLSL::should_forward(uint32_t id) const$/;"	f	class:CompilerGLSL
should_suppress_usage_tracking	spirv_glsl.cpp	/^bool CompilerGLSL::should_suppress_usage_tracking(uint32_t id) const$/;"	f	class:CompilerGLSL
simple_json	spirv_reflect.cpp	/^namespace simple_json$/;"	n	file:
simple_json	spirv_reflect.hpp	/^namespace simple_json$/;"	n
size	spirv_cross_containers.hpp	/^		size_t size = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::StringStream::Buffer
skip_argument	spirv_glsl.cpp	/^bool CompilerGLSL::skip_argument(uint32_t id) const$/;"	f	class:CompilerGLSL
skip_argument	spirv_msl.cpp	/^bool CompilerMSL::skip_argument(uint32_t) const$/;"	f	class:CompilerMSL
sort	spirv_msl.cpp	/^void CompilerMSL::MemberSorter::sort()$/;"	f	class:CompilerMSL::MemberSorter
sort_aspect	spirv_msl.hpp	/^		SortAspect sort_aspect;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter
source	spirv_cross_parsed_ir.hpp	/^	Source source;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
space	spirv_cross_c.h	/^	unsigned space;$/;"	m	struct:spvc_hlsl_root_constants
space	spirv_hlsl.hpp	/^	uint32_t space;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::RootConstants
sparse_texel	spirv_glsl.hpp	/^		uint32_t bias = 0, component = 0, sample = 0, sparse_texel = 0, min_lod = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TextureFunctionArguments
spec_id	spirv_common.hpp	/^		uint32_t spec_id = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
specialization	spirv_common.hpp	/^	bool specialization = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
specialization_constant_id	spirv_common.hpp	/^	inline uint32_t specialization_constant_id(uint32_t col) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
specialization_constant_id	spirv_common.hpp	/^	inline uint32_t specialization_constant_id(uint32_t col, uint32_t row) const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
specialization_constant_macro_name	spirv_common.hpp	/^	std::string specialization_constant_macro_name;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
spirv	spirv_cross_parsed_ir.hpp	/^	std::vector<uint32_t> spirv;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ParsedIR
spirv_H	spirv.h	52;"	d
spirv_HPP	spirv.hpp	46;"	d
spirv_cross_util	spirv_cross_util.cpp	/^namespace spirv_cross_util$/;"	n	file:
spirv_cross_util	spirv_cross_util.hpp	/^namespace spirv_cross_util$/;"	n
split_function_case	spirv_cross.hpp	/^		bool split_function_case = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
split_function_case	spirv_cross.hpp	/^		bool split_function_case = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessPrepassHandler
spv	spirv.hpp	/^namespace spv {$/;"	n
spv_function_implementations	spirv_msl.hpp	/^	std::set<SPVFuncImpl> spv_function_implementations;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
spvc_allocate	spirv_cross_c.cpp	/^static inline std::unique_ptr<T> spvc_allocate(Ts &&... ts)$/;"	f	file:
spvc_backend	spirv_cross_c.h	/^typedef enum spvc_backend$/;"	g
spvc_backend	spirv_cross_c.h	/^} spvc_backend;$/;"	t	typeref:enum:spvc_backend
spvc_basetype	spirv_cross_c.h	/^typedef enum spvc_basetype$/;"	g
spvc_basetype	spirv_cross_c.h	/^} spvc_basetype;$/;"	t	typeref:enum:spvc_basetype
spvc_bool	spirv_cross_c.h	/^typedef unsigned char spvc_bool;$/;"	t
spvc_buffer_range	spirv_cross_c.h	/^typedef struct spvc_buffer_range$/;"	s
spvc_buffer_range	spirv_cross_c.h	/^} spvc_buffer_range;$/;"	t	typeref:struct:spvc_buffer_range
spvc_builtin_resource_type	spirv_cross_c.h	/^typedef enum spvc_builtin_resource_type$/;"	g
spvc_builtin_resource_type	spirv_cross_c.h	/^} spvc_builtin_resource_type;$/;"	t	typeref:enum:spvc_builtin_resource_type
spvc_capture_mode	spirv_cross_c.h	/^typedef enum spvc_capture_mode$/;"	g
spvc_capture_mode	spirv_cross_c.h	/^} spvc_capture_mode;$/;"	t	typeref:enum:spvc_capture_mode
spvc_combined_image_sampler	spirv_cross_c.h	/^typedef struct spvc_combined_image_sampler$/;"	s
spvc_combined_image_sampler	spirv_cross_c.h	/^} spvc_combined_image_sampler;$/;"	t	typeref:struct:spvc_combined_image_sampler
spvc_compiler	spirv_cross_c.h	/^typedef struct spvc_compiler_s *spvc_compiler;$/;"	t	typeref:struct:spvc_compiler_s
spvc_compiler_add_header_line	spirv_cross_c.cpp	/^spvc_result spvc_compiler_add_header_line(spvc_compiler compiler, const char *line)$/;"	f
spvc_compiler_buffer_get_hlsl_counter_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_buffer_get_hlsl_counter_buffer(spvc_compiler compiler, spvc_variable_id id,$/;"	f
spvc_compiler_buffer_is_hlsl_counter_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_buffer_is_hlsl_counter_buffer(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_build_combined_image_samplers	spirv_cross_c.cpp	/^spvc_result spvc_compiler_build_combined_image_samplers(spvc_compiler compiler)$/;"	f
spvc_compiler_build_dummy_sampler_for_combined_images	spirv_cross_c.cpp	/^spvc_result spvc_compiler_build_dummy_sampler_for_combined_images(spvc_compiler compiler, spvc_variable_id *id)$/;"	f
spvc_compiler_compile	spirv_cross_c.cpp	/^spvc_result spvc_compiler_compile(spvc_compiler compiler, const char **source)$/;"	f
spvc_compiler_create_compiler_options	spirv_cross_c.cpp	/^spvc_result spvc_compiler_create_compiler_options(spvc_compiler compiler, spvc_compiler_options *options)$/;"	f
spvc_compiler_create_shader_resources	spirv_cross_c.cpp	/^spvc_result spvc_compiler_create_shader_resources(spvc_compiler compiler, spvc_resources *resources)$/;"	f
spvc_compiler_create_shader_resources_for_active_variables	spirv_cross_c.cpp	/^spvc_result spvc_compiler_create_shader_resources_for_active_variables(spvc_compiler compiler, spvc_resources *resources,$/;"	f
spvc_compiler_flatten_buffer_block	spirv_cross_c.cpp	/^spvc_result spvc_compiler_flatten_buffer_block(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_get_active_buffer_ranges	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_active_buffer_ranges(spvc_compiler compiler,$/;"	f
spvc_compiler_get_active_interface_variables	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_active_interface_variables(spvc_compiler compiler, spvc_set *set)$/;"	f
spvc_compiler_get_binary_offset_for_decoration	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_get_binary_offset_for_decoration(spvc_compiler compiler, spvc_variable_id id,$/;"	f
spvc_compiler_get_buffer_block_decorations	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_buffer_block_decorations(spvc_compiler compiler, spvc_variable_id id,$/;"	f
spvc_compiler_get_cleansed_entry_point_name	spirv_cross_c.cpp	/^const char *spvc_compiler_get_cleansed_entry_point_name(spvc_compiler compiler, const char *name,$/;"	f
spvc_compiler_get_combined_image_samplers	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_combined_image_samplers(spvc_compiler compiler,$/;"	f
spvc_compiler_get_constant_handle	spirv_cross_c.cpp	/^spvc_constant spvc_compiler_get_constant_handle(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_get_current_id_bound	spirv_cross_c.cpp	/^unsigned spvc_compiler_get_current_id_bound(spvc_compiler compiler)$/;"	f
spvc_compiler_get_declared_capabilities	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_declared_capabilities(spvc_compiler compiler, const SpvCapability **capabilities,$/;"	f
spvc_compiler_get_declared_extensions	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_declared_extensions(spvc_compiler compiler, const char ***extensions,$/;"	f
spvc_compiler_get_declared_struct_member_size	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_declared_struct_member_size(spvc_compiler compiler, spvc_type struct_type, unsigned index, size_t *size)$/;"	f
spvc_compiler_get_declared_struct_size	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_declared_struct_size(spvc_compiler compiler, spvc_type struct_type, size_t *size)$/;"	f
spvc_compiler_get_declared_struct_size_runtime_array	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_declared_struct_size_runtime_array(spvc_compiler compiler, spvc_type struct_type,$/;"	f
spvc_compiler_get_decoration	spirv_cross_c.cpp	/^unsigned spvc_compiler_get_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)$/;"	f
spvc_compiler_get_decoration_string	spirv_cross_c.cpp	/^const char *spvc_compiler_get_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration)$/;"	f
spvc_compiler_get_entry_points	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_entry_points(spvc_compiler compiler, const spvc_entry_point **entry_points,$/;"	f
spvc_compiler_get_execution_mode_argument	spirv_cross_c.cpp	/^unsigned spvc_compiler_get_execution_mode_argument(spvc_compiler compiler, SpvExecutionMode mode)$/;"	f
spvc_compiler_get_execution_mode_argument_by_index	spirv_cross_c.cpp	/^unsigned spvc_compiler_get_execution_mode_argument_by_index(spvc_compiler compiler, SpvExecutionMode mode,$/;"	f
spvc_compiler_get_execution_model	spirv_cross_c.cpp	/^SpvExecutionModel spvc_compiler_get_execution_model(spvc_compiler compiler)$/;"	f
spvc_compiler_get_execution_modes	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_execution_modes(spvc_compiler compiler, const SpvExecutionMode **modes, size_t *num_modes)$/;"	f
spvc_compiler_get_member_decoration	spirv_cross_c.cpp	/^unsigned spvc_compiler_get_member_decoration(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_get_member_decoration_string	spirv_cross_c.cpp	/^const char *spvc_compiler_get_member_decoration_string(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_get_member_name	spirv_cross_c.cpp	/^const char *spvc_compiler_get_member_name(spvc_compiler compiler, spvc_type_id id, unsigned member_index)$/;"	f
spvc_compiler_get_name	spirv_cross_c.cpp	/^const char *spvc_compiler_get_name(spvc_compiler compiler, SpvId id)$/;"	f
spvc_compiler_get_remapped_declared_block_name	spirv_cross_c.cpp	/^const char *spvc_compiler_get_remapped_declared_block_name(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_get_specialization_constants	spirv_cross_c.cpp	/^spvc_result spvc_compiler_get_specialization_constants(spvc_compiler compiler,$/;"	f
spvc_compiler_get_type_handle	spirv_cross_c.cpp	/^spvc_type spvc_compiler_get_type_handle(spvc_compiler compiler, spvc_type_id id)$/;"	f
spvc_compiler_get_work_group_size_specialization_constants	spirv_cross_c.cpp	/^spvc_constant_id spvc_compiler_get_work_group_size_specialization_constants(spvc_compiler compiler,$/;"	f
spvc_compiler_has_active_builtin	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_has_active_builtin(spvc_compiler compiler, SpvBuiltIn builtin, SpvStorageClass storage)$/;"	f
spvc_compiler_has_decoration	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_has_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)$/;"	f
spvc_compiler_has_member_decoration	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_has_member_decoration(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_hlsl_add_resource_binding	spirv_cross_c.cpp	/^spvc_result spvc_compiler_hlsl_add_resource_binding(spvc_compiler compiler,$/;"	f
spvc_compiler_hlsl_add_vertex_attribute_remap	spirv_cross_c.cpp	/^spvc_result spvc_compiler_hlsl_add_vertex_attribute_remap(spvc_compiler compiler,$/;"	f
spvc_compiler_hlsl_is_resource_used	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_hlsl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, unsigned set,$/;"	f
spvc_compiler_hlsl_remap_num_workgroups_builtin	spirv_cross_c.cpp	/^spvc_variable_id spvc_compiler_hlsl_remap_num_workgroups_builtin(spvc_compiler compiler)$/;"	f
spvc_compiler_hlsl_set_resource_binding_flags	spirv_cross_c.cpp	/^spvc_result spvc_compiler_hlsl_set_resource_binding_flags(spvc_compiler compiler,$/;"	f
spvc_compiler_hlsl_set_root_constants_layout	spirv_cross_c.cpp	/^spvc_result spvc_compiler_hlsl_set_root_constants_layout(spvc_compiler compiler,$/;"	f
spvc_compiler_install_compiler_options	spirv_cross_c.cpp	/^spvc_result spvc_compiler_install_compiler_options(spvc_compiler compiler, spvc_compiler_options options)$/;"	f
spvc_compiler_mask_stage_output_by_builtin	spirv_cross_c.cpp	/^spvc_result spvc_compiler_mask_stage_output_by_builtin(spvc_compiler compiler, SpvBuiltIn builtin)$/;"	f
spvc_compiler_mask_stage_output_by_location	spirv_cross_c.cpp	/^spvc_result spvc_compiler_mask_stage_output_by_location(spvc_compiler compiler,$/;"	f
spvc_compiler_msl_add_discrete_descriptor_set	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_discrete_descriptor_set(spvc_compiler compiler, unsigned desc_set)$/;"	f
spvc_compiler_msl_add_dynamic_buffer	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_dynamic_buffer(spvc_compiler compiler, unsigned desc_set, unsigned binding, unsigned index)$/;"	f
spvc_compiler_msl_add_inline_uniform_block	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_inline_uniform_block(spvc_compiler compiler, unsigned desc_set, unsigned binding)$/;"	f
spvc_compiler_msl_add_resource_binding	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_resource_binding(spvc_compiler compiler,$/;"	f
spvc_compiler_msl_add_shader_input	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_shader_input(spvc_compiler compiler, const spvc_msl_shader_input *si)$/;"	f
spvc_compiler_msl_add_vertex_attribute	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_add_vertex_attribute(spvc_compiler compiler, const spvc_msl_vertex_attribute *va)$/;"	f
spvc_compiler_msl_get_automatic_resource_binding	spirv_cross_c.cpp	/^unsigned spvc_compiler_msl_get_automatic_resource_binding(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_msl_get_automatic_resource_binding_secondary	spirv_cross_c.cpp	/^unsigned spvc_compiler_msl_get_automatic_resource_binding_secondary(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_compiler_msl_get_combined_sampler_suffix	spirv_cross_c.cpp	/^const char *spvc_compiler_msl_get_combined_sampler_suffix(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_is_rasterization_disabled	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_is_rasterization_disabled(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_is_resource_used	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_is_resource_used(spvc_compiler compiler, SpvExecutionModel model, unsigned set,$/;"	f
spvc_compiler_msl_is_shader_input_used	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_is_shader_input_used(spvc_compiler compiler, unsigned location)$/;"	f
spvc_compiler_msl_is_vertex_attribute_used	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_is_vertex_attribute_used(spvc_compiler compiler, unsigned location)$/;"	f
spvc_compiler_msl_needs_aux_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_aux_buffer(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_needs_buffer_size_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_buffer_size_buffer(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_needs_input_threadgroup_mem	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_input_threadgroup_mem(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_needs_output_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_output_buffer(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_needs_patch_output_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_patch_output_buffer(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_needs_swizzle_buffer	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_msl_needs_swizzle_buffer(spvc_compiler compiler)$/;"	f
spvc_compiler_msl_remap_constexpr_sampler	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_remap_constexpr_sampler(spvc_compiler compiler, spvc_variable_id id,$/;"	f
spvc_compiler_msl_remap_constexpr_sampler_by_binding	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_remap_constexpr_sampler_by_binding(spvc_compiler compiler,$/;"	f
spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(spvc_compiler compiler,$/;"	f
spvc_compiler_msl_remap_constexpr_sampler_ycbcr	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_remap_constexpr_sampler_ycbcr(spvc_compiler compiler, spvc_variable_id id,$/;"	f
spvc_compiler_msl_set_argument_buffer_device_address_space	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_set_argument_buffer_device_address_space(spvc_compiler compiler, unsigned desc_set, spvc_bool device_address)$/;"	f
spvc_compiler_msl_set_combined_sampler_suffix	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_set_combined_sampler_suffix(spvc_compiler compiler, const char *suffix)$/;"	f
spvc_compiler_msl_set_fragment_output_components	spirv_cross_c.cpp	/^spvc_result spvc_compiler_msl_set_fragment_output_components(spvc_compiler compiler, unsigned location,$/;"	f
spvc_compiler_option	spirv_cross_c.h	/^typedef enum spvc_compiler_option$/;"	g
spvc_compiler_option	spirv_cross_c.h	/^} spvc_compiler_option;$/;"	t	typeref:enum:spvc_compiler_option
spvc_compiler_options	spirv_cross_c.h	/^typedef struct spvc_compiler_options_s *spvc_compiler_options;$/;"	t	typeref:struct:spvc_compiler_options_s
spvc_compiler_options_s	spirv_cross_c.cpp	/^struct spvc_compiler_options_s : ScratchMemoryAllocation$/;"	s	file:
spvc_compiler_options_set_bool	spirv_cross_c.cpp	/^spvc_result spvc_compiler_options_set_bool(spvc_compiler_options options, spvc_compiler_option option,$/;"	f
spvc_compiler_options_set_uint	spirv_cross_c.cpp	/^spvc_result spvc_compiler_options_set_uint(spvc_compiler_options options, spvc_compiler_option option, unsigned value)$/;"	f
spvc_compiler_rename_entry_point	spirv_cross_c.cpp	/^spvc_result spvc_compiler_rename_entry_point(spvc_compiler compiler, const char *old_name, const char *new_name,$/;"	f
spvc_compiler_require_extension	spirv_cross_c.cpp	/^spvc_result spvc_compiler_require_extension(spvc_compiler compiler, const char *line)$/;"	f
spvc_compiler_s	spirv_cross_c.cpp	/^struct spvc_compiler_s : ScratchMemoryAllocation$/;"	s	file:
spvc_compiler_set_decoration	spirv_cross_c.cpp	/^void spvc_compiler_set_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration, unsigned argument)$/;"	f
spvc_compiler_set_decoration_string	spirv_cross_c.cpp	/^void spvc_compiler_set_decoration_string(spvc_compiler compiler, SpvId id, SpvDecoration decoration,$/;"	f
spvc_compiler_set_enabled_interface_variables	spirv_cross_c.cpp	/^spvc_result spvc_compiler_set_enabled_interface_variables(spvc_compiler compiler, spvc_set set)$/;"	f
spvc_compiler_set_entry_point	spirv_cross_c.cpp	/^spvc_result spvc_compiler_set_entry_point(spvc_compiler compiler, const char *name, SpvExecutionModel model)$/;"	f
spvc_compiler_set_execution_mode	spirv_cross_c.cpp	/^void spvc_compiler_set_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)$/;"	f
spvc_compiler_set_execution_mode_with_arguments	spirv_cross_c.cpp	/^void spvc_compiler_set_execution_mode_with_arguments(spvc_compiler compiler, SpvExecutionMode mode, unsigned arg0,$/;"	f
spvc_compiler_set_member_decoration	spirv_cross_c.cpp	/^void spvc_compiler_set_member_decoration(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_set_member_decoration_string	spirv_cross_c.cpp	/^void spvc_compiler_set_member_decoration_string(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_set_member_name	spirv_cross_c.cpp	/^void spvc_compiler_set_member_name(spvc_compiler compiler, spvc_type_id id, unsigned member_index, const char *argument)$/;"	f
spvc_compiler_set_name	spirv_cross_c.cpp	/^void spvc_compiler_set_name(spvc_compiler compiler, SpvId id, const char *argument)$/;"	f
spvc_compiler_type_struct_member_array_stride	spirv_cross_c.cpp	/^spvc_result spvc_compiler_type_struct_member_array_stride(spvc_compiler compiler, spvc_type type, unsigned index, unsigned *stride)$/;"	f
spvc_compiler_type_struct_member_matrix_stride	spirv_cross_c.cpp	/^spvc_result spvc_compiler_type_struct_member_matrix_stride(spvc_compiler compiler, spvc_type type, unsigned index, unsigned *stride)$/;"	f
spvc_compiler_type_struct_member_offset	spirv_cross_c.cpp	/^spvc_result spvc_compiler_type_struct_member_offset(spvc_compiler compiler, spvc_type type, unsigned index, unsigned *offset)$/;"	f
spvc_compiler_unset_decoration	spirv_cross_c.cpp	/^void spvc_compiler_unset_decoration(spvc_compiler compiler, SpvId id, SpvDecoration decoration)$/;"	f
spvc_compiler_unset_execution_mode	spirv_cross_c.cpp	/^void spvc_compiler_unset_execution_mode(spvc_compiler compiler, SpvExecutionMode mode)$/;"	f
spvc_compiler_unset_member_decoration	spirv_cross_c.cpp	/^void spvc_compiler_unset_member_decoration(spvc_compiler compiler, spvc_type_id id, unsigned member_index,$/;"	f
spvc_compiler_update_active_builtins	spirv_cross_c.cpp	/^void spvc_compiler_update_active_builtins(spvc_compiler compiler)$/;"	f
spvc_compiler_variable_is_depth_or_compare	spirv_cross_c.cpp	/^spvc_bool spvc_compiler_variable_is_depth_or_compare(spvc_compiler compiler, spvc_variable_id id)$/;"	f
spvc_constant	spirv_cross_c.h	/^typedef struct spvc_constant_s *spvc_constant;$/;"	t	typeref:struct:spvc_constant_s
spvc_constant_get_scalar_fp16	spirv_cross_c.cpp	/^float spvc_constant_get_scalar_fp16(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_fp32	spirv_cross_c.cpp	/^float spvc_constant_get_scalar_fp32(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_fp64	spirv_cross_c.cpp	/^double spvc_constant_get_scalar_fp64(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_i16	spirv_cross_c.cpp	/^int spvc_constant_get_scalar_i16(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_i32	spirv_cross_c.cpp	/^int spvc_constant_get_scalar_i32(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_i8	spirv_cross_c.cpp	/^int spvc_constant_get_scalar_i8(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_u16	spirv_cross_c.cpp	/^unsigned spvc_constant_get_scalar_u16(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_u32	spirv_cross_c.cpp	/^unsigned spvc_constant_get_scalar_u32(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_scalar_u8	spirv_cross_c.cpp	/^unsigned spvc_constant_get_scalar_u8(spvc_constant constant, unsigned column, unsigned row)$/;"	f
spvc_constant_get_subconstants	spirv_cross_c.cpp	/^void spvc_constant_get_subconstants(spvc_constant constant, const spvc_constant_id **constituents, size_t *count)$/;"	f
spvc_constant_get_type	spirv_cross_c.cpp	/^spvc_type_id spvc_constant_get_type(spvc_constant constant)$/;"	f
spvc_constant_id	spirv_cross_c.h	/^typedef SpvId spvc_constant_id;$/;"	t
spvc_constant_s	spirv_cross_c.cpp	/^struct spvc_constant_s : SPIRConstant$/;"	s	file:
spvc_context	spirv_cross_c.h	/^typedef struct spvc_context_s *spvc_context;$/;"	t	typeref:struct:spvc_context_s
spvc_context_create	spirv_cross_c.cpp	/^spvc_result spvc_context_create(spvc_context *context)$/;"	f
spvc_context_create_compiler	spirv_cross_c.cpp	/^spvc_result spvc_context_create_compiler(spvc_context context, spvc_backend backend, spvc_parsed_ir parsed_ir,$/;"	f
spvc_context_destroy	spirv_cross_c.cpp	/^void spvc_context_destroy(spvc_context context)$/;"	f
spvc_context_get_last_error_string	spirv_cross_c.cpp	/^const char *spvc_context_get_last_error_string(spvc_context context)$/;"	f
spvc_context_parse_spirv	spirv_cross_c.cpp	/^spvc_result spvc_context_parse_spirv(spvc_context context, const SpvId *spirv, size_t word_count,$/;"	f
spvc_context_release_allocations	spirv_cross_c.cpp	/^void spvc_context_release_allocations(spvc_context context)$/;"	f
spvc_context_s	spirv_cross_c.cpp	/^struct spvc_context_s$/;"	s	file:
spvc_context_set_error_callback	spirv_cross_c.cpp	/^SPVC_PUBLIC_API void spvc_context_set_error_callback(spvc_context context, spvc_error_callback cb, void *userdata)$/;"	f
spvc_convert_msl_sampler	spirv_cross_c.cpp	/^static void spvc_convert_msl_sampler(MSLConstexprSampler &samp, const spvc_msl_constexpr_sampler *sampler)$/;"	f	file:
spvc_convert_msl_sampler_ycbcr_conversion	spirv_cross_c.cpp	/^static void spvc_convert_msl_sampler_ycbcr_conversion(MSLConstexprSampler &samp, const spvc_msl_sampler_ycbcr_conversion *conv)$/;"	f	file:
spvc_entry_point	spirv_cross_c.h	/^typedef struct spvc_entry_point$/;"	s
spvc_entry_point	spirv_cross_c.h	/^} spvc_entry_point;$/;"	t	typeref:struct:spvc_entry_point
spvc_error_callback	spirv_cross_c.h	/^typedef void (*spvc_error_callback)(void *userdata, const char *error);$/;"	t
spvc_get_commit_revision_and_timestamp	spirv_cross_c.cpp	/^const char *spvc_get_commit_revision_and_timestamp(void)$/;"	f
spvc_get_version	spirv_cross_c.cpp	/^void spvc_get_version(unsigned *major, unsigned *minor, unsigned *patch)$/;"	f
spvc_hlsl_binding_flag_bits	spirv_cross_c.h	/^typedef enum spvc_hlsl_binding_flag_bits$/;"	g
spvc_hlsl_binding_flag_bits	spirv_cross_c.h	/^} spvc_hlsl_binding_flag_bits;$/;"	t	typeref:enum:spvc_hlsl_binding_flag_bits
spvc_hlsl_binding_flags	spirv_cross_c.h	/^typedef unsigned spvc_hlsl_binding_flags;$/;"	t
spvc_hlsl_resource_binding	spirv_cross_c.h	/^typedef struct spvc_hlsl_resource_binding$/;"	s
spvc_hlsl_resource_binding	spirv_cross_c.h	/^} spvc_hlsl_resource_binding;$/;"	t	typeref:struct:spvc_hlsl_resource_binding
spvc_hlsl_resource_binding_init	spirv_cross_c.cpp	/^void spvc_hlsl_resource_binding_init(spvc_hlsl_resource_binding *binding)$/;"	f
spvc_hlsl_resource_binding_mapping	spirv_cross_c.h	/^typedef struct spvc_hlsl_resource_binding_mapping$/;"	s
spvc_hlsl_resource_binding_mapping	spirv_cross_c.h	/^} spvc_hlsl_resource_binding_mapping;$/;"	t	typeref:struct:spvc_hlsl_resource_binding_mapping
spvc_hlsl_root_constants	spirv_cross_c.h	/^typedef struct spvc_hlsl_root_constants$/;"	s
spvc_hlsl_root_constants	spirv_cross_c.h	/^} spvc_hlsl_root_constants;$/;"	t	typeref:struct:spvc_hlsl_root_constants
spvc_hlsl_vertex_attribute_remap	spirv_cross_c.h	/^typedef struct spvc_hlsl_vertex_attribute_remap$/;"	s
spvc_hlsl_vertex_attribute_remap	spirv_cross_c.h	/^} spvc_hlsl_vertex_attribute_remap;$/;"	t	typeref:struct:spvc_hlsl_vertex_attribute_remap
spvc_msl_chroma_location	spirv_cross_c.h	/^typedef enum spvc_msl_chroma_location$/;"	g
spvc_msl_chroma_location	spirv_cross_c.h	/^} spvc_msl_chroma_location;$/;"	t	typeref:enum:spvc_msl_chroma_location
spvc_msl_component_swizzle	spirv_cross_c.h	/^typedef enum spvc_msl_component_swizzle$/;"	g
spvc_msl_component_swizzle	spirv_cross_c.h	/^} spvc_msl_component_swizzle;$/;"	t	typeref:enum:spvc_msl_component_swizzle
spvc_msl_constexpr_sampler	spirv_cross_c.h	/^typedef struct spvc_msl_constexpr_sampler$/;"	s
spvc_msl_constexpr_sampler	spirv_cross_c.h	/^} spvc_msl_constexpr_sampler;$/;"	t	typeref:struct:spvc_msl_constexpr_sampler
spvc_msl_constexpr_sampler_init	spirv_cross_c.cpp	/^void spvc_msl_constexpr_sampler_init(spvc_msl_constexpr_sampler *sampler)$/;"	f
spvc_msl_format_resolution	spirv_cross_c.h	/^typedef enum spvc_msl_format_resolution$/;"	g
spvc_msl_format_resolution	spirv_cross_c.h	/^} spvc_msl_format_resolution;$/;"	t	typeref:enum:spvc_msl_format_resolution
spvc_msl_get_aux_buffer_struct_version	spirv_cross_c.cpp	/^unsigned spvc_msl_get_aux_buffer_struct_version(void)$/;"	f
spvc_msl_index_type	spirv_cross_c.h	/^typedef enum spvc_msl_index_type$/;"	g
spvc_msl_index_type	spirv_cross_c.h	/^} spvc_msl_index_type;$/;"	t	typeref:enum:spvc_msl_index_type
spvc_msl_platform	spirv_cross_c.h	/^typedef enum spvc_msl_platform$/;"	g
spvc_msl_platform	spirv_cross_c.h	/^} spvc_msl_platform;$/;"	t	typeref:enum:spvc_msl_platform
spvc_msl_resource_binding	spirv_cross_c.h	/^typedef struct spvc_msl_resource_binding$/;"	s
spvc_msl_resource_binding	spirv_cross_c.h	/^} spvc_msl_resource_binding;$/;"	t	typeref:struct:spvc_msl_resource_binding
spvc_msl_resource_binding_init	spirv_cross_c.cpp	/^void spvc_msl_resource_binding_init(spvc_msl_resource_binding *binding)$/;"	f
spvc_msl_sampler_address	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_address$/;"	g
spvc_msl_sampler_address	spirv_cross_c.h	/^} spvc_msl_sampler_address;$/;"	t	typeref:enum:spvc_msl_sampler_address
spvc_msl_sampler_border_color	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_border_color$/;"	g
spvc_msl_sampler_border_color	spirv_cross_c.h	/^} spvc_msl_sampler_border_color;$/;"	t	typeref:enum:spvc_msl_sampler_border_color
spvc_msl_sampler_compare_func	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_compare_func$/;"	g
spvc_msl_sampler_compare_func	spirv_cross_c.h	/^} spvc_msl_sampler_compare_func;$/;"	t	typeref:enum:spvc_msl_sampler_compare_func
spvc_msl_sampler_coord	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_coord$/;"	g
spvc_msl_sampler_coord	spirv_cross_c.h	/^} spvc_msl_sampler_coord;$/;"	t	typeref:enum:spvc_msl_sampler_coord
spvc_msl_sampler_filter	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_filter$/;"	g
spvc_msl_sampler_filter	spirv_cross_c.h	/^} spvc_msl_sampler_filter;$/;"	t	typeref:enum:spvc_msl_sampler_filter
spvc_msl_sampler_mip_filter	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_mip_filter$/;"	g
spvc_msl_sampler_mip_filter	spirv_cross_c.h	/^} spvc_msl_sampler_mip_filter;$/;"	t	typeref:enum:spvc_msl_sampler_mip_filter
spvc_msl_sampler_ycbcr_conversion	spirv_cross_c.h	/^typedef struct spvc_msl_sampler_ycbcr_conversion$/;"	s
spvc_msl_sampler_ycbcr_conversion	spirv_cross_c.h	/^} spvc_msl_sampler_ycbcr_conversion;$/;"	t	typeref:struct:spvc_msl_sampler_ycbcr_conversion
spvc_msl_sampler_ycbcr_conversion_init	spirv_cross_c.cpp	/^void spvc_msl_sampler_ycbcr_conversion_init(spvc_msl_sampler_ycbcr_conversion *conv)$/;"	f
spvc_msl_sampler_ycbcr_model_conversion	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_ycbcr_model_conversion$/;"	g
spvc_msl_sampler_ycbcr_model_conversion	spirv_cross_c.h	/^} spvc_msl_sampler_ycbcr_model_conversion;$/;"	t	typeref:enum:spvc_msl_sampler_ycbcr_model_conversion
spvc_msl_sampler_ycbcr_range	spirv_cross_c.h	/^typedef enum spvc_msl_sampler_ycbcr_range$/;"	g
spvc_msl_sampler_ycbcr_range	spirv_cross_c.h	/^} spvc_msl_sampler_ycbcr_range;$/;"	t	typeref:enum:spvc_msl_sampler_ycbcr_range
spvc_msl_shader_input	spirv_cross_c.h	/^typedef struct spvc_msl_shader_input$/;"	s
spvc_msl_shader_input	spirv_cross_c.h	/^} spvc_msl_shader_input;$/;"	t	typeref:struct:spvc_msl_shader_input
spvc_msl_shader_input_format	spirv_cross_c.h	/^typedef enum spvc_msl_shader_input_format$/;"	g
spvc_msl_shader_input_format	spirv_cross_c.h	/^} spvc_msl_shader_input_format, spvc_msl_vertex_format;$/;"	t	typeref:enum:spvc_msl_shader_input_format
spvc_msl_shader_input_init	spirv_cross_c.cpp	/^void spvc_msl_shader_input_init(spvc_msl_shader_input *input)$/;"	f
spvc_msl_vertex_attribute	spirv_cross_c.h	/^typedef struct spvc_msl_vertex_attribute$/;"	s
spvc_msl_vertex_attribute	spirv_cross_c.h	/^} spvc_msl_vertex_attribute;$/;"	t	typeref:struct:spvc_msl_vertex_attribute
spvc_msl_vertex_attribute_init	spirv_cross_c.cpp	/^void spvc_msl_vertex_attribute_init(spvc_msl_vertex_attribute *attr)$/;"	f
spvc_msl_vertex_format	spirv_cross_c.h	/^} spvc_msl_shader_input_format, spvc_msl_vertex_format;$/;"	t	typeref:enum:spvc_msl_shader_input_format
spvc_parsed_ir	spirv_cross_c.h	/^typedef struct spvc_parsed_ir_s *spvc_parsed_ir;$/;"	t	typeref:struct:spvc_parsed_ir_s
spvc_parsed_ir_s	spirv_cross_c.cpp	/^struct spvc_parsed_ir_s : ScratchMemoryAllocation$/;"	s	file:
spvc_reflected_builtin_resource	spirv_cross_c.h	/^typedef struct spvc_reflected_builtin_resource$/;"	s
spvc_reflected_builtin_resource	spirv_cross_c.h	/^} spvc_reflected_builtin_resource;$/;"	t	typeref:struct:spvc_reflected_builtin_resource
spvc_reflected_resource	spirv_cross_c.h	/^typedef struct spvc_reflected_resource$/;"	s
spvc_reflected_resource	spirv_cross_c.h	/^} spvc_reflected_resource;$/;"	t	typeref:struct:spvc_reflected_resource
spvc_resource_type	spirv_cross_c.h	/^typedef enum spvc_resource_type$/;"	g
spvc_resource_type	spirv_cross_c.h	/^} spvc_resource_type;$/;"	t	typeref:enum:spvc_resource_type
spvc_resources	spirv_cross_c.h	/^typedef struct spvc_resources_s *spvc_resources;$/;"	t	typeref:struct:spvc_resources_s
spvc_resources_get_builtin_resource_list_for_type	spirv_cross_c.cpp	/^spvc_result spvc_resources_get_builtin_resource_list_for_type($/;"	f
spvc_resources_get_resource_list_for_type	spirv_cross_c.cpp	/^spvc_result spvc_resources_get_resource_list_for_type(spvc_resources resources, spvc_resource_type type,$/;"	f
spvc_resources_s	spirv_cross_c.cpp	/^struct spvc_resources_s : ScratchMemoryAllocation$/;"	s	file:
spvc_result	spirv_cross_c.h	/^typedef enum spvc_result$/;"	g
spvc_result	spirv_cross_c.h	/^} spvc_result;$/;"	t	typeref:enum:spvc_result
spvc_set	spirv_cross_c.h	/^typedef const struct spvc_set_s *spvc_set;$/;"	t	typeref:struct:spvc_set_s
spvc_set_s	spirv_cross_c.cpp	/^struct spvc_set_s : ScratchMemoryAllocation$/;"	s	file:
spvc_specialization_constant	spirv_cross_c.h	/^typedef struct spvc_specialization_constant$/;"	s
spvc_specialization_constant	spirv_cross_c.h	/^} spvc_specialization_constant;$/;"	t	typeref:struct:spvc_specialization_constant
spvc_type	spirv_cross_c.h	/^typedef const struct spvc_type_s *spvc_type;$/;"	t	typeref:struct:spvc_type_s
spvc_type_array_dimension_is_literal	spirv_cross_c.cpp	/^spvc_bool spvc_type_array_dimension_is_literal(spvc_type type, unsigned dimension)$/;"	f
spvc_type_get_array_dimension	spirv_cross_c.cpp	/^SpvId spvc_type_get_array_dimension(spvc_type type, unsigned dimension)$/;"	f
spvc_type_get_base_type_id	spirv_cross_c.cpp	/^spvc_type_id spvc_type_get_base_type_id(spvc_type type)$/;"	f
spvc_type_get_basetype	spirv_cross_c.cpp	/^spvc_basetype spvc_type_get_basetype(spvc_type type)$/;"	f
spvc_type_get_bit_width	spirv_cross_c.cpp	/^unsigned spvc_type_get_bit_width(spvc_type type)$/;"	f
spvc_type_get_columns	spirv_cross_c.cpp	/^unsigned spvc_type_get_columns(spvc_type type)$/;"	f
spvc_type_get_image_access_qualifier	spirv_cross_c.cpp	/^SpvAccessQualifier spvc_type_get_image_access_qualifier(spvc_type type)$/;"	f
spvc_type_get_image_arrayed	spirv_cross_c.cpp	/^spvc_bool spvc_type_get_image_arrayed(spvc_type type)$/;"	f
spvc_type_get_image_dimension	spirv_cross_c.cpp	/^SpvDim spvc_type_get_image_dimension(spvc_type type)$/;"	f
spvc_type_get_image_is_depth	spirv_cross_c.cpp	/^spvc_bool spvc_type_get_image_is_depth(spvc_type type)$/;"	f
spvc_type_get_image_is_storage	spirv_cross_c.cpp	/^spvc_bool spvc_type_get_image_is_storage(spvc_type type)$/;"	f
spvc_type_get_image_multisampled	spirv_cross_c.cpp	/^spvc_bool spvc_type_get_image_multisampled(spvc_type type)$/;"	f
spvc_type_get_image_sampled_type	spirv_cross_c.cpp	/^spvc_type_id spvc_type_get_image_sampled_type(spvc_type type)$/;"	f
spvc_type_get_image_storage_format	spirv_cross_c.cpp	/^SpvImageFormat spvc_type_get_image_storage_format(spvc_type type)$/;"	f
spvc_type_get_member_type	spirv_cross_c.cpp	/^spvc_type_id spvc_type_get_member_type(spvc_type type, unsigned index)$/;"	f
spvc_type_get_num_array_dimensions	spirv_cross_c.cpp	/^unsigned spvc_type_get_num_array_dimensions(spvc_type type)$/;"	f
spvc_type_get_num_member_types	spirv_cross_c.cpp	/^unsigned spvc_type_get_num_member_types(spvc_type type)$/;"	f
spvc_type_get_storage_class	spirv_cross_c.cpp	/^SpvStorageClass spvc_type_get_storage_class(spvc_type type)$/;"	f
spvc_type_get_vector_size	spirv_cross_c.cpp	/^unsigned spvc_type_get_vector_size(spvc_type type)$/;"	f
spvc_type_id	spirv_cross_c.h	/^typedef SpvId spvc_type_id;$/;"	t
spvc_type_s	spirv_cross_c.cpp	/^struct spvc_type_s : SPIRType$/;"	s	file:
spvc_variable_id	spirv_cross_c.h	/^typedef SpvId spvc_variable_id;$/;"	t
src_id	spirv_glsl.hpp	/^		uint32_t src_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::TemporaryCopy
src_name	main.cpp	/^	string src_name;$/;"	m	struct:Remap	file:
srv	spirv_cross_c.h	/^	spvc_hlsl_resource_binding_mapping cbv, uav, srv, sampler;$/;"	m	struct:spvc_hlsl_resource_binding
srv	spirv_hlsl.hpp	/^		uint64_t srv;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureSizeVariants
srv	spirv_hlsl.hpp	/^	} cbv, uav, srv, sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding	typeref:struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
sso	main.cpp	/^	bool sso = false;$/;"	m	struct:CLIArguments	file:
stack	spirv_reflect.cpp	/^	Stack stack;$/;"	m	class:simple_json::Stream	file:
stack_buffer	spirv_cross_containers.hpp	/^	char stack_buffer[StackSize];$/;"	m	class:SPIRV_CROSS_NAMESPACE::StringStream
stack_storage	spirv_cross_containers.hpp	/^	AlignedBuffer<T, N> stack_storage;$/;"	m	class:SPIRV_CROSS_NAMESPACE::SmallVector
stage	spirv_cross_c.h	/^	SpvExecutionModel stage;$/;"	m	struct:spvc_hlsl_resource_binding
stage	spirv_cross_c.h	/^	SpvExecutionModel stage;$/;"	m	struct:spvc_msl_resource_binding
stage	spirv_hlsl.hpp	/^	spv::ExecutionModel stage = spv::ExecutionModelMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding
stage	spirv_msl.hpp	/^	spv::ExecutionModel stage = spv::ExecutionModelMax;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLResourceBinding
stage_in_ptr_var_id	spirv_msl.hpp	/^	VariableID stage_in_ptr_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_in_var_id	spirv_msl.hpp	/^	VariableID stage_in_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_in_var_name	spirv_msl.hpp	/^	std::string stage_in_var_name = "in";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_inputs	spirv_cross.hpp	/^	SmallVector<Resource> stage_inputs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
stage_inputs	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> stage_inputs;$/;"	m	struct:spvc_resources_s	file:
stage_out_masked_builtin_type_id	spirv_msl.hpp	/^	VariableID stage_out_masked_builtin_type_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_out_ptr_var_id	spirv_msl.hpp	/^	VariableID stage_out_ptr_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_out_var_id	spirv_msl.hpp	/^	VariableID stage_out_var_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_out_var_name	spirv_msl.hpp	/^	std::string stage_out_var_name = "out";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
stage_outputs	spirv_cross.hpp	/^	SmallVector<Resource> stage_outputs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
stage_outputs	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> stage_outputs;$/;"	m	struct:spvc_resources_s	file:
stage_to_execution_model	main.cpp	/^static ExecutionModel stage_to_execution_model(const std::string &stage)$/;"	f	file:
start	spirv_cross_c.h	/^	unsigned start;$/;"	m	struct:spvc_hlsl_root_constants
start	spirv_hlsl.hpp	/^	uint32_t start;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::RootConstants
start_object_count	spirv_cross_containers.hpp	/^	unsigned start_object_count;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ObjectPool
statement	spirv_glsl.hpp	/^	inline void statement(Ts &&... ts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
statement	spirv_reflect.cpp	/^	inline void statement(Ts &&... ts)$/;"	f	class:simple_json::Stream	file:
statement_count	spirv_glsl.hpp	/^	uint32_t statement_count = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
statement_indent	spirv_reflect.cpp	/^	inline void statement_indent()$/;"	f	class:simple_json::Stream	file:
statement_inner	spirv_glsl.hpp	/^	inline void statement_inner(T &&t)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
statement_inner	spirv_glsl.hpp	/^	inline void statement_inner(T &&t, Ts &&... ts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
statement_inner	spirv_reflect.cpp	/^	inline void statement_inner(T &&t)$/;"	f	class:simple_json::Stream	file:
statement_inner	spirv_reflect.cpp	/^	inline void statement_inner(T &&t, Ts &&... ts)$/;"	f	class:simple_json::Stream	file:
statement_no_indent	spirv_glsl.hpp	/^	inline void statement_no_indent(Ts &&... ts)$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
statement_no_return	spirv_reflect.cpp	/^	void statement_no_return(Ts &&... ts)$/;"	f	class:simple_json::Stream	file:
static_expression	spirv_common.hpp	/^	ID static_expression = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
static_expression	spirv_cross.hpp	/^		uint32_t static_expression = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
static_index	spirv_common.hpp	/^	int32_t static_index;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
statically_assigned	spirv_common.hpp	/^	bool statically_assigned = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
std	spirv_common.hpp	/^namespace std$/;"	n
storage	spirv_common.hpp	/^	spv::StorageClass storage = spv::StorageClassGeneric;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
storage	spirv_common.hpp	/^	spv::StorageClass storage = spv::StorageClassGeneric;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRVariable
storage	spirv_common.hpp	/^	spv::StorageClass storage;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRAccessChain
storageClass	main.cpp	/^	StorageClass storageClass;$/;"	m	struct:InterfaceVariableRename	file:
storage_buffers	spirv_cross.hpp	/^	SmallVector<Resource> storage_buffers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
storage_buffers	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> storage_buffers;$/;"	m	struct:spvc_resources_s	file:
storage_class_array_is_thread	spirv_msl.cpp	/^static bool storage_class_array_is_thread(StorageClass storage)$/;"	f	file:
storage_class_is_interface	spirv_cross.cpp	/^static inline bool storage_class_is_interface(spv::StorageClass storage)$/;"	f	file:
storage_images	spirv_cross.hpp	/^	SmallVector<Resource> storage_images;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
storage_images	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> storage_images;$/;"	m	struct:spvc_resources_s	file:
storage_is_invariant	spirv_common.hpp	/^	bool storage_is_invariant = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
storage_is_packed	spirv_common.hpp	/^	bool storage_is_packed = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
storage_physical_type	spirv_common.hpp	/^	uint32_t storage_physical_type = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::AccessChainMeta
store_flattened_struct	spirv_glsl.cpp	/^void CompilerGLSL::store_flattened_struct(const string &basename, uint32_t rhs_id, const SPIRType &type,$/;"	f	class:CompilerGLSL
store_flattened_struct	spirv_glsl.cpp	/^void CompilerGLSL::store_flattened_struct(uint32_t lhs_id, uint32_t value)$/;"	f	class:CompilerGLSL
str	spirv_common.hpp	/^	std::string str;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRString
str	spirv_cross_c.cpp	/^	std::string str;$/;"	m	struct:StringAllocation	file:
str	spirv_cross_containers.hpp	/^	std::string str() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
str	spirv_reflect.cpp	/^	std::string str() const$/;"	f	class:simple_json::Stream
stream	spirv_common.hpp	/^		uint32_t stream = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
stream	spirv_cross.hpp	/^	const uint32_t *stream(const Instruction &instr) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
stream	spirv_parser.cpp	/^const uint32_t *Parser::stream(const Instruction &instr) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
stream_mutable	spirv_cross.hpp	/^	uint32_t *stream_mutable(const Instruction &instr) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Compiler
strip_array	spirv_msl.hpp	/^		bool strip_array = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::InterfaceBlockMeta
strip_enclosed_expression	spirv_glsl.cpp	/^void CompilerGLSL::strip_enclosed_expression(string &expr)$/;"	f	class:CompilerGLSL
subconstants	spirv_common.hpp	/^	SmallVector<ConstantID> subconstants;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
subpass_input_is_framebuffer_fetch	spirv_glsl.cpp	/^bool CompilerGLSL::subpass_input_is_framebuffer_fetch(uint32_t id) const$/;"	f	class:CompilerGLSL
subpass_inputs	spirv_cross.hpp	/^	SmallVector<Resource> subpass_inputs;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
subpass_inputs	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> subpass_inputs;$/;"	m	struct:spvc_resources_s	file:
subpass_to_framebuffer_fetch_attachment	spirv_glsl.hpp	/^	std::vector<std::pair<uint32_t, uint32_t>> subpass_to_framebuffer_fetch_attachment;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
succeeding_edges	spirv_cfg.hpp	/^	std::unordered_map<uint32_t, SmallVector<uint32_t>> succeeding_edges;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
support_64bit_switch	spirv_glsl.hpp	/^		bool support_64bit_switch = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
support_case_fallthrough	spirv_glsl.hpp	/^		bool support_case_fallthrough = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
support_nonzero_base_instance	spirv_glsl.hpp	/^			bool support_nonzero_base_instance = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::VertexOptions
support_nonzero_base_vertex_base_instance	spirv_hlsl.hpp	/^		bool support_nonzero_base_vertex_base_instance = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::Options
support_nonzero_baseinstance	main.cpp	/^	bool support_nonzero_baseinstance = true;$/;"	m	struct:CLIArguments	file:
support_pointer_to_pointer	spirv_glsl.hpp	/^		bool support_pointer_to_pointer = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
support_precise_qualifier	spirv_glsl.hpp	/^		bool support_precise_qualifier = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
support_small_type_sampling_result	spirv_glsl.hpp	/^		bool support_small_type_sampling_result = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
supports_empty_struct	spirv_glsl.hpp	/^		bool supports_empty_struct = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
supports_extensions	spirv_glsl.hpp	/^		bool supports_extensions = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
supports_msl_version	spirv_msl.hpp	/^		bool supports_msl_version(uint32_t major, uint32_t minor = 0, uint32_t patch = 0) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
suppress_missing_prototypes	spirv_msl.hpp	/^		bool suppress_missing_prototypes = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
suppress_missing_prototypes	spirv_msl.hpp	/^	bool suppress_missing_prototypes = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
suppressed_usage_tracking	spirv_cross.hpp	/^	std::unordered_set<uint32_t> suppressed_usage_tracking;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
swap_endian	spirv_parser.cpp	/^static inline uint32_t swap_endian(uint32_t v)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
swizzle	spirv_cross_c.h	/^	spvc_msl_component_swizzle swizzle[4];$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
swizzle	spirv_msl.hpp	/^	MSLComponentSwizzle swizzle[4]; \/\/ IDENTITY, IDENTITY, IDENTITY, IDENTITY$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
swizzle_buffer_id	spirv_msl.hpp	/^	uint32_t swizzle_buffer_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
swizzle_buffer_index	spirv_msl.hpp	/^		uint32_t swizzle_buffer_index = 30;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
swizzle_has_one_or_zero	spirv_msl.hpp	/^	bool swizzle_has_one_or_zero() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
swizzle_is_function	spirv_glsl.hpp	/^		bool swizzle_is_function = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
swizzle_is_identity	spirv_msl.hpp	/^	bool swizzle_is_identity() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
swizzle_name_suffix	spirv_msl.hpp	/^	std::string swizzle_name_suffix = "Swzl";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
swizzle_texture_samples	spirv_msl.hpp	/^		bool swizzle_texture_samples = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
sync_entry_point_aliases_and_names	spirv_msl.cpp	/^void CompilerMSL::sync_entry_point_aliases_and_names()$/;"	f	class:CompilerMSL
t_address	spirv_cross_c.h	/^	spvc_msl_sampler_address t_address;$/;"	m	struct:spvc_msl_constexpr_sampler
t_address	spirv_msl.hpp	/^	MSLSamplerAddress t_address = MSL_SAMPLER_ADDRESS_CLAMP_TO_EDGE;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
temporary_to_mirror_precision_alias	spirv_glsl.hpp	/^	std::unordered_map<uint32_t, uint32_t> temporary_to_mirror_precision_alias;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
terminator	spirv_common.hpp	/^	Terminator terminator = Unknown;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
tess_domain_origin_lower_left	spirv_msl.hpp	/^		bool tess_domain_origin_lower_left = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
tess_factor_buffer_var_name	spirv_msl.hpp	/^	std::string tess_factor_buffer_var_name = "spvTessLevel";$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
texel_buffer_texture_width	spirv_msl.hpp	/^		uint32_t texel_buffer_texture_width = 4096; \/\/ Width of 2D Metal textures used as 1D texel buffers$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
texture_1D_as_2D	spirv_msl.hpp	/^		bool texture_1D_as_2D = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
texture_buffer_native	spirv_msl.hpp	/^		bool texture_buffer_native = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
to_array_size	spirv_glsl.cpp	/^string CompilerGLSL::to_array_size(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
to_array_size_literal	spirv_glsl.cpp	/^uint32_t CompilerGLSL::to_array_size_literal(const SPIRType &type) const$/;"	f	class:CompilerGLSL
to_array_size_literal	spirv_glsl.cpp	/^uint32_t CompilerGLSL::to_array_size_literal(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerGLSL
to_buffer_size_expression	spirv_msl.cpp	/^string CompilerMSL::to_buffer_size_expression(uint32_t id)$/;"	f	class:CompilerMSL
to_combined_image_sampler	spirv_glsl.cpp	/^string CompilerGLSL::to_combined_image_sampler(VariableID image_id, VariableID samp_id)$/;"	f	class:CompilerGLSL
to_component_argument	spirv_msl.cpp	/^string CompilerMSL::to_component_argument(uint32_t id)$/;"	f	class:CompilerMSL
to_composite_constructor_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_composite_constructor_expression(uint32_t id, bool block_like_type)$/;"	f	class:CompilerGLSL
to_dereferenced_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_dereferenced_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_enclosed_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_enclosed_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_enclosed_pointer_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_enclosed_pointer_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_enclosed_unpacked_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_enclosed_unpacked_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_extract_component_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_extract_component_expression(uint32_t id, uint32_t index)$/;"	f	class:CompilerGLSL
to_extract_constant_composite_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_extract_constant_composite_expression(uint32_t result_type, const SPIRConstant &c,$/;"	f	class:CompilerGLSL
to_flattened_access_chain_expression	spirv_glsl.cpp	/^std::string CompilerGLSL::to_flattened_access_chain_expression(uint32_t id)$/;"	f	class:CompilerGLSL
to_flattened_struct_member	spirv_glsl.cpp	/^string CompilerGLSL::to_flattened_struct_member(const string &basename, const SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
to_func_call_arg	spirv_glsl.cpp	/^string CompilerGLSL::to_func_call_arg(const SPIRFunction::Parameter &, uint32_t id)$/;"	f	class:CompilerGLSL
to_func_call_arg	spirv_hlsl.cpp	/^string CompilerHLSL::to_func_call_arg(const SPIRFunction::Parameter &arg, uint32_t id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_func_call_arg	spirv_msl.cpp	/^string CompilerMSL::to_func_call_arg(const SPIRFunction::Parameter &arg, uint32_t id)$/;"	f	class:CompilerMSL
to_function_args	spirv_glsl.cpp	/^string CompilerGLSL::to_function_args(const TextureFunctionArguments &args, bool *p_forward)$/;"	f	class:CompilerGLSL
to_function_args	spirv_msl.cpp	/^string CompilerMSL::to_function_args(const TextureFunctionArguments &args, bool *p_forward)$/;"	f	class:CompilerMSL
to_function_name	spirv_glsl.cpp	/^string CompilerGLSL::to_function_name(const TextureFunctionNameArguments &args)$/;"	f	class:CompilerGLSL
to_function_name	spirv_msl.cpp	/^string CompilerMSL::to_function_name(const TextureFunctionNameArguments &args)$/;"	f	class:CompilerMSL
to_initializer_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_initializer_expression(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
to_initializer_expression	spirv_hlsl.cpp	/^std::string CompilerHLSL::to_initializer_expression(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_initializer_expression	spirv_msl.cpp	/^string CompilerMSL::to_initializer_expression(const SPIRVariable &var)$/;"	f	class:CompilerMSL
to_interpolation_qualifiers	spirv_glsl.cpp	/^string CompilerGLSL::to_interpolation_qualifiers(const Bitset &flags)$/;"	f	class:CompilerGLSL
to_interpolation_qualifiers	spirv_hlsl.cpp	/^string CompilerHLSL::to_interpolation_qualifiers(const Bitset &flags)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_member_name	spirv_glsl.cpp	/^string CompilerGLSL::to_member_name(const SPIRType &type, uint32_t index)$/;"	f	class:CompilerGLSL
to_member_name	spirv_reflect.cpp	/^string CompilerReflection::to_member_name(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerReflection
to_member_reference	spirv_glsl.cpp	/^string CompilerGLSL::to_member_reference(uint32_t, const SPIRType &type, uint32_t index, bool)$/;"	f	class:CompilerGLSL
to_member_reference	spirv_msl.cpp	/^string CompilerMSL::to_member_reference(uint32_t base, const SPIRType &type, uint32_t index, bool ptr_chain)$/;"	f	class:CompilerMSL
to_multi_member_reference	spirv_glsl.cpp	/^string CompilerGLSL::to_multi_member_reference(const SPIRType &type, const SmallVector<uint32_t> &indices)$/;"	f	class:CompilerGLSL
to_name	spirv_cross.cpp	/^string Compiler::to_name(uint32_t id, bool allow_alias) const$/;"	f	class:Compiler
to_name	spirv_msl.cpp	/^string CompilerMSL::to_name(uint32_t id, bool allow_alias) const$/;"	f	class:CompilerMSL
to_non_uniform_aware_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_non_uniform_aware_expression(uint32_t id)$/;"	f	class:CompilerGLSL
to_pls_layout	spirv_glsl.cpp	/^static const char *to_pls_layout(PlsFormat format)$/;"	f	file:
to_pls_qualifiers_glsl	spirv_glsl.cpp	/^const char *CompilerGLSL::to_pls_qualifiers_glsl(const SPIRVariable &variable)$/;"	f	class:CompilerGLSL
to_pointer_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_pointer_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_precision_qualifiers_glsl	spirv_glsl.cpp	/^string CompilerGLSL::to_precision_qualifiers_glsl(uint32_t id)$/;"	f	class:CompilerGLSL
to_qualifiers_glsl	spirv_glsl.cpp	/^string CompilerGLSL::to_qualifiers_glsl(uint32_t id)$/;"	f	class:CompilerGLSL
to_qualifiers_glsl	spirv_msl.cpp	/^string CompilerMSL::to_qualifiers_glsl(uint32_t id)$/;"	f	class:CompilerMSL
to_rerolled_array_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_rerolled_array_expression(const string &base_expr, const SPIRType &type)$/;"	f	class:CompilerGLSL
to_resource_binding	spirv_hlsl.cpp	/^string CompilerHLSL::to_resource_binding(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_resource_binding_sampler	spirv_hlsl.cpp	/^string CompilerHLSL::to_resource_binding_sampler(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_resource_register	spirv_hlsl.cpp	/^string CompilerHLSL::to_resource_register(HLSLBindingFlagBits flag, char space, uint32_t binding, uint32_t space_set)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_restrict	spirv_msl.cpp	/^const char *CompilerMSL::to_restrict(uint32_t id, bool space)$/;"	f	class:CompilerMSL
to_sampler_expression	spirv_hlsl.cpp	/^string CompilerHLSL::to_sampler_expression(uint32_t id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_sampler_expression	spirv_msl.cpp	/^string CompilerMSL::to_sampler_expression(uint32_t id)$/;"	f	class:CompilerMSL
to_semantic	spirv_hlsl.cpp	/^std::string CompilerHLSL::to_semantic(uint32_t location, ExecutionModel em, StorageClass sc)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_signed_basetype	spirv_common.hpp	/^static inline SPIRType::BaseType to_signed_basetype(uint32_t width)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
to_storage_qualifiers_glsl	spirv_glsl.cpp	/^const char *CompilerGLSL::to_storage_qualifiers_glsl(const SPIRVariable &var)$/;"	f	class:CompilerGLSL
to_storage_qualifiers_glsl	spirv_hlsl.cpp	/^const char *CompilerHLSL::to_storage_qualifiers_glsl(const SPIRVariable &var)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
to_struct_member	spirv_msl.cpp	/^string CompilerMSL::to_struct_member(const SPIRType &type, uint32_t member_type_id, uint32_t index,$/;"	f	class:CompilerMSL
to_swizzle_expression	spirv_msl.cpp	/^string CompilerMSL::to_swizzle_expression(uint32_t id)$/;"	f	class:CompilerMSL
to_ternary_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_ternary_expression(const SPIRType &restype, uint32_t select, uint32_t true_value,$/;"	f	class:CompilerGLSL
to_tesc_invocation_id	spirv_msl.cpp	/^string CompilerMSL::to_tesc_invocation_id()$/;"	f	class:CompilerMSL
to_texture_op	spirv_glsl.cpp	/^std::string CompilerGLSL::to_texture_op(const Instruction &i, bool sparse, bool *forward,$/;"	f	class:CompilerGLSL
to_texture_op	spirv_msl.cpp	/^string CompilerMSL::to_texture_op(const Instruction &i, bool sparse, bool *forward,$/;"	f	class:CompilerMSL
to_trivial_mix_op	spirv_glsl.cpp	/^bool CompilerGLSL::to_trivial_mix_op(const SPIRType &type, string &op, uint32_t left, uint32_t right, uint32_t lerp)$/;"	f	class:CompilerGLSL
to_unpacked_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_unpacked_expression(uint32_t id, bool register_expression_read)$/;"	f	class:CompilerGLSL
to_unpacked_row_major_matrix_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_unpacked_row_major_matrix_expression(uint32_t id)$/;"	f	class:CompilerGLSL
to_unsigned_basetype	spirv_common.hpp	/^static inline SPIRType::BaseType to_unsigned_basetype(uint32_t width)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
to_zero_initialized_expression	spirv_glsl.cpp	/^string CompilerGLSL::to_zero_initialized_expression(uint32_t type_id)$/;"	f	class:CompilerGLSL
to_zero_initialized_expression	spirv_msl.cpp	/^string CompilerMSL::to_zero_initialized_expression(uint32_t)$/;"	f	class:CompilerMSL
track_expression_read	spirv_glsl.cpp	/^void CompilerGLSL::track_expression_read(uint32_t id)$/;"	f	class:CompilerGLSL
traverse_all_reachable_opcodes	spirv_cross.cpp	/^bool Compiler::traverse_all_reachable_opcodes(const SPIRBlock &block, OpcodeHandler &handler) const$/;"	f	class:Compiler
traverse_all_reachable_opcodes	spirv_cross.cpp	/^bool Compiler::traverse_all_reachable_opcodes(const SPIRFunction &func, OpcodeHandler &handler) const$/;"	f	class:Compiler
true_block	spirv_common.hpp	/^	BlockID true_block = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock
type	spirv_common.hpp	/^		TypeID type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::Parameter
type	spirv_common.hpp	/^		TypeID type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType::ImageType
type	spirv_common.hpp	/^		type = TypeAccessChain$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRAccessChain::__anon11
type	spirv_common.hpp	/^		type = TypeBlock$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRBlock::__anon9
type	spirv_common.hpp	/^		type = TypeCombinedImageSampler$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRCombinedImageSampler::__anon3
type	spirv_common.hpp	/^		type = TypeConstant$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRConstant::__anon13
type	spirv_common.hpp	/^		type = TypeConstantOp$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRConstantOp::__anon4
type	spirv_common.hpp	/^		type = TypeExpression$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExpression::__anon7
type	spirv_common.hpp	/^		type = TypeExtension$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRExtension::__anon6
type	spirv_common.hpp	/^		type = TypeFunction$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRFunction::__anon10
type	spirv_common.hpp	/^		type = TypeFunctionPrototype$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRFunctionPrototype::__anon8
type	spirv_common.hpp	/^		type = TypeString$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRString::__anon2
type	spirv_common.hpp	/^		type = TypeType$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRType::__anon5
type	spirv_common.hpp	/^		type = TypeUndef$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRUndef::__anon1
type	spirv_common.hpp	/^		type = TypeVariable$/;"	e	enum:SPIRV_CROSS_NAMESPACE::SPIRVariable::__anon12
type	spirv_common.hpp	/^	Types type = TypeNone;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Variant
type	spirv_msl.hpp	/^		SPIRType &type;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::MemberSorter
type_alias	spirv_common.hpp	/^	TypeID type_alias = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
type_can_zero_initialize	spirv_glsl.cpp	/^bool CompilerGLSL::type_can_zero_initialize(const SPIRType &type) const$/;"	f	class:CompilerGLSL
type_id	spirv_cross.hpp	/^	TypeID type_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Resource
type_id	spirv_cross_c.h	/^	spvc_type_id type_id;$/;"	m	struct:spvc_reflected_resource
type_is_array_of_pointers	spirv_cross.cpp	/^bool Compiler::type_is_array_of_pointers(const SPIRType &type) const$/;"	f	class:Compiler
type_is_bda_block_entry	spirv_cross.cpp	/^bool Compiler::PhysicalStorageBufferPointerHandler::type_is_bda_block_entry(uint32_t type_id) const$/;"	f	class:Compiler::PhysicalStorageBufferPointerHandler
type_is_block_like	spirv_cross.cpp	/^bool Compiler::type_is_block_like(const SPIRType &type) const$/;"	f	class:Compiler
type_is_empty	spirv_glsl.cpp	/^bool CompilerGLSL::type_is_empty(const SPIRType &type)$/;"	f	class:CompilerGLSL
type_is_floating_point	spirv_common.hpp	/^static inline bool type_is_floating_point(const SPIRType &type)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
type_is_integral	spirv_common.hpp	/^static inline bool type_is_integral(const SPIRType &type)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
type_is_msl_framebuffer_fetch	spirv_msl.cpp	/^bool CompilerMSL::type_is_msl_framebuffer_fetch(const SPIRType &type) const$/;"	f	class:CompilerMSL
type_is_opaque_value	spirv_cross.cpp	/^bool Compiler::type_is_opaque_value(const SPIRType &type) const$/;"	f	class:Compiler
type_is_pointer	spirv_msl.cpp	/^bool CompilerMSL::type_is_pointer(const SPIRType &type) const$/;"	f	class:CompilerMSL
type_is_pointer_to_pointer	spirv_msl.cpp	/^bool CompilerMSL::type_is_pointer_to_pointer(const SPIRType &type) const$/;"	f	class:CompilerMSL
type_is_reference	spirv_reflect.cpp	/^bool CompilerReflection::type_is_reference(const SPIRType &type) const$/;"	f	class:CompilerReflection
type_is_top_level_physical_pointer	spirv_cross.cpp	/^bool Compiler::type_is_top_level_physical_pointer(const SPIRType &type) const$/;"	f	class:Compiler
type_struct_member_array_stride	spirv_cross.cpp	/^uint32_t Compiler::type_struct_member_array_stride(const SPIRType &type, uint32_t index) const$/;"	f	class:Compiler
type_struct_member_matrix_stride	spirv_cross.cpp	/^uint32_t Compiler::type_struct_member_matrix_stride(const SPIRType &type, uint32_t index) const$/;"	f	class:Compiler
type_struct_member_offset	spirv_cross.cpp	/^uint32_t Compiler::type_struct_member_offset(const SPIRType &type, uint32_t index) const$/;"	f	class:Compiler
type_to_array_glsl	spirv_glsl.cpp	/^string CompilerGLSL::type_to_array_glsl(const SPIRType &type)$/;"	f	class:CompilerGLSL
type_to_array_glsl	spirv_msl.cpp	/^string CompilerMSL::type_to_array_glsl(const SPIRType &type)$/;"	f	class:CompilerMSL
type_to_consumed_locations	spirv_hlsl.cpp	/^uint32_t CompilerHLSL::type_to_consumed_locations(const SPIRType &type) const$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
type_to_glsl	spirv_glsl.cpp	/^string CompilerGLSL::type_to_glsl(const SPIRType &type, uint32_t id)$/;"	f	class:CompilerGLSL
type_to_glsl	spirv_hlsl.cpp	/^string CompilerHLSL::type_to_glsl(const SPIRType &type, uint32_t id)$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
type_to_glsl	spirv_msl.cpp	/^string CompilerMSL::type_to_glsl(const SPIRType &type, uint32_t id)$/;"	f	class:CompilerMSL
type_to_glsl_constructor	spirv_glsl.cpp	/^string CompilerGLSL::type_to_glsl_constructor(const SPIRType &type)$/;"	f	class:CompilerGLSL
type_to_location_count	spirv_glsl.cpp	/^uint32_t CompilerGLSL::type_to_location_count(const SPIRType &type) const$/;"	f	class:CompilerGLSL
type_to_packed_alignment	spirv_glsl.cpp	/^uint32_t CompilerGLSL::type_to_packed_alignment(const SPIRType &type, const Bitset &flags,$/;"	f	class:CompilerGLSL
type_to_packed_array_stride	spirv_glsl.cpp	/^uint32_t CompilerGLSL::type_to_packed_array_stride(const SPIRType &type, const Bitset &flags,$/;"	f	class:CompilerGLSL
type_to_packed_base_size	spirv_glsl.cpp	/^uint32_t CompilerGLSL::type_to_packed_base_size(const SPIRType &type, BufferPackingStandard)$/;"	f	class:CompilerGLSL
type_to_packed_size	spirv_glsl.cpp	/^uint32_t CompilerGLSL::type_to_packed_size(const SPIRType &type, const Bitset &flags, BufferPackingStandard packing)$/;"	f	class:CompilerGLSL
typedef_lines	spirv_msl.hpp	/^	std::set<std::string> typedef_lines;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
types_are_logically_equivalent	spirv_cross.cpp	/^bool Compiler::types_are_logically_equivalent(const SPIRType &a, const SPIRType &b) const$/;"	f	class:Compiler
types_are_logically_equivalent	spirv_parser.cpp	/^bool Parser::types_are_logically_equivalent(const SPIRType &a, const SPIRType &b) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
u	spirv_cross_containers.hpp	/^	} u;$/;"	m	class:SPIRV_CROSS_NAMESPACE::AlignedBuffer	typeref:union:SPIRV_CROSS_NAMESPACE::AlignedBuffer::__anon14
u32	spirv_common.hpp	/^		uint32_t u32;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
u32	spirv_common.hpp	/^	inline void u32(uint32_t value)$/;"	f	class:SPIRV_CROSS_NAMESPACE::Hasher
u64	spirv_common.hpp	/^		uint64_t u64;$/;"	m	union:SPIRV_CROSS_NAMESPACE::SPIRConstant::Constant
uav	spirv_cross_c.h	/^	spvc_hlsl_resource_binding_mapping cbv, uav, srv, sampler;$/;"	m	struct:spvc_hlsl_resource_binding
uav	spirv_hlsl.hpp	/^		uint64_t uav[3][4];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerHLSL::TextureSizeVariants
uav	spirv_hlsl.hpp	/^	} cbv, uav, srv, sampler;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding	typeref:struct:SPIRV_CROSS_NAMESPACE::HLSLResourceBinding::Binding
uint16_t_literal_suffix	spirv_glsl.hpp	/^		const char *uint16_t_literal_suffix = "us";$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
uint32_t_literal_suffix	spirv_glsl.hpp	/^		bool uint32_t_literal_suffix = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
uint_type_id	spirv_msl.hpp	/^	uint32_t uint_type_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
uniform_buffers	spirv_cross.hpp	/^	SmallVector<Resource> uniform_buffers;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ShaderResources
uniform_buffers	spirv_cross_c.cpp	/^	SmallVector<spvc_reflected_resource> uniform_buffers;$/;"	m	struct:spvc_resources_s	file:
unique_identifier_count	spirv_hlsl.hpp	/^	uint32_t unique_identifier_count = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerHLSL
unpack_expression_type	spirv_glsl.cpp	/^string CompilerGLSL::unpack_expression_type(string expr_str, const SPIRType &, uint32_t, bool, bool)$/;"	f	class:CompilerGLSL
unpack_expression_type	spirv_msl.cpp	/^string CompilerMSL::unpack_expression_type(string expr_str, const SPIRType &type, uint32_t physical_type_id,$/;"	f	class:CompilerMSL
unroll_array_from_complex_load	spirv_glsl.cpp	/^void CompilerGLSL::unroll_array_from_complex_load(uint32_t target_id, uint32_t source_id, std::string &expr)$/;"	f	class:CompilerGLSL
unroll_array_to_complex_store	spirv_glsl.cpp	/^bool CompilerGLSL::unroll_array_to_complex_store(uint32_t target_id, uint32_t source_id)$/;"	f	class:CompilerGLSL
unset_decoration	spirv_cross.cpp	/^void Compiler::unset_decoration(ID id, Decoration decoration)$/;"	f	class:Compiler
unset_decoration	spirv_cross_parsed_ir.cpp	/^void ParsedIR::unset_decoration(ID id, Decoration decoration)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
unset_execution_mode	spirv_cross.cpp	/^void Compiler::unset_execution_mode(ExecutionMode mode)$/;"	f	class:Compiler
unset_extended_decoration	spirv_cross.cpp	/^void Compiler::unset_extended_decoration(uint32_t id, ExtendedDecorations decoration)$/;"	f	class:Compiler
unset_extended_member_decoration	spirv_cross.cpp	/^void Compiler::unset_extended_member_decoration(uint32_t type, uint32_t index, ExtendedDecorations decoration)$/;"	f	class:Compiler
unset_member_decoration	spirv_cross.cpp	/^void Compiler::unset_member_decoration(TypeID id, uint32_t index, Decoration decoration)$/;"	f	class:Compiler
unset_member_decoration	spirv_cross_parsed_ir.cpp	/^void ParsedIR::unset_member_decoration(TypeID id, uint32_t index, Decoration decoration)$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR
unsized_array_supported	spirv_glsl.hpp	/^		bool unsized_array_supported = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
update_active_builtins	spirv_cross.cpp	/^void Compiler::update_active_builtins()$/;"	f	class:Compiler
update_name_cache	spirv_cross.cpp	/^void Compiler::update_name_cache(unordered_set<string> &cache, string &name)$/;"	f	class:Compiler
update_name_cache	spirv_cross.cpp	/^void Compiler::update_name_cache(unordered_set<string> &cache_primary, const unordered_set<string> &cache_secondary,$/;"	f	class:Compiler
use_420pack_extension	main.cpp	/^	bool use_420pack_extension = true;$/;"	m	struct:CLIArguments	file:
use_array_constructor	spirv_glsl.hpp	/^		bool use_array_constructor = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
use_constructor_splatting	spirv_glsl.hpp	/^		bool use_constructor_splatting = true;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
use_critical_section	spirv_cross.hpp	/^		bool use_critical_section = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterlockedResourceAccessHandler
use_framebuffer_fetch_subpasses	spirv_msl.hpp	/^		bool use_framebuffer_fetch_subpasses = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
use_initializer_list	spirv_glsl.hpp	/^		bool use_initializer_list = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
use_quadgroup_operation	spirv_msl.hpp	/^		bool use_quadgroup_operation() const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
use_typed_initializer_list	spirv_glsl.hpp	/^		bool use_typed_initializer_list = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
used_swizzle_buffer	spirv_msl.hpp	/^	bool used_swizzle_buffer = false;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
uses_atomics	spirv_msl.hpp	/^		bool uses_atomics = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
uses_explicit_early_fragment_test	spirv_msl.cpp	/^bool CompilerMSL::uses_explicit_early_fragment_test()$/;"	f	class:CompilerMSL
uses_resource_write	spirv_msl.hpp	/^		bool uses_resource_write = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::OpCodePreprocessor
using_builtin_array	spirv_msl.cpp	/^bool CompilerMSL::using_builtin_array() const$/;"	f	class:CompilerMSL
v	spirv_cfg.hpp	/^		int v = -1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CFG::VisitOrder
vacants	spirv_cross_containers.hpp	/^	Vector<T *> vacants;$/;"	m	class:SPIRV_CROSS_NAMESPACE::ObjectPool
validate_member_packing_rules_msl	spirv_msl.cpp	/^bool CompilerMSL::validate_member_packing_rules_msl(const SPIRType &type, uint32_t index) const$/;"	f	class:CompilerMSL
validate_shader_model	spirv_hlsl.cpp	/^void CompilerHLSL::validate_shader_model()$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
value	spirv_common.hpp	/^		uint64_t value;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRBlock::Case
value_type_id	spirv_cross.hpp	/^	TypeID value_type_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::BuiltInResource
value_type_id	spirv_cross_c.h	/^	spvc_type_id value_type_id;$/;"	m	struct:spvc_reflected_builtin_resource
values	spirv_common.hpp	/^			uint32_t values[SPIRVCrossDecorationCount];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration::Extended
variable_decl	spirv_cpp.cpp	/^string CompilerCPP::variable_decl(const SPIRType &type, const string &name, uint32_t \/* id *\/)$/;"	f	class:CompilerCPP
variable_decl	spirv_glsl.cpp	/^string CompilerGLSL::variable_decl(const SPIRType &type, const string &name, uint32_t id)$/;"	f	class:CompilerGLSL
variable_decl	spirv_glsl.cpp	/^string CompilerGLSL::variable_decl(const SPIRVariable &variable)$/;"	f	class:CompilerGLSL
variable_decl	spirv_msl.cpp	/^std::string CompilerMSL::variable_decl(const SPIRType &type, const std::string &name, uint32_t id)$/;"	f	class:CompilerMSL
variable_decl	spirv_msl.cpp	/^std::string CompilerMSL::variable_decl(const SPIRVariable &variable)$/;"	f	class:CompilerMSL
variable_decl_function_local	spirv_glsl.cpp	/^string CompilerGLSL::variable_decl_function_local(SPIRVariable &var)$/;"	f	class:CompilerGLSL
variable_decl_is_remapped_storage	spirv_glsl.cpp	/^bool CompilerGLSL::variable_decl_is_remapped_storage(const SPIRVariable &var, StorageClass storage) const$/;"	f	class:CompilerGLSL
variable_decl_is_remapped_storage	spirv_msl.cpp	/^bool CompilerMSL::variable_decl_is_remapped_storage(const SPIRVariable &variable, spv::StorageClass storage) const$/;"	f	class:CompilerMSL
variable_id	spirv_cross.hpp	/^		uint32_t variable_id;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
variable_is_depth_or_compare	spirv_glsl.cpp	/^bool CompilerGLSL::variable_is_depth_or_compare(VariableID id) const$/;"	f	class:CompilerGLSL
variable_is_lut	spirv_glsl.cpp	/^bool CompilerGLSL::variable_is_lut(const SPIRVariable &var) const$/;"	f	class:CompilerGLSL
variable_name	main.cpp	/^	string variable_name;$/;"	m	struct:InterfaceVariableRename	file:
variable_name	main.cpp	/^	string variable_name;$/;"	m	struct:VariableTypeRemap	file:
variable_remap_callback	spirv_cross.hpp	/^	VariableTypeRemapCallback variable_remap_callback;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Compiler
variable_storage_is_aliased	spirv_cross.cpp	/^bool Compiler::variable_storage_is_aliased(const SPIRVariable &v)$/;"	f	class:Compiler
variable_storage_is_aliased	spirv_parser.cpp	/^bool Parser::variable_storage_is_aliased(const SPIRVariable &v) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::Parser
variable_storage_requires_stage_io	spirv_msl.cpp	/^bool CompilerMSL::variable_storage_requires_stage_io(spv::StorageClass storage) const$/;"	f	class:CompilerMSL
variable_type_remaps	main.cpp	/^	SmallVector<VariableTypeRemap> variable_type_remaps;$/;"	m	struct:CLIArguments	file:
variables	spirv_cross.hpp	/^		std::unordered_set<VariableID> &variables;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::InterfaceVariableAccessHandler
variant	spirv_common.hpp	/^	Variant(const Variant &variant) = delete;$/;"	m	class:SPIRV_CROSS_NAMESPACE::Variant
variant_get	spirv_common.hpp	/^T &variant_get(Variant &var)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
variant_get	spirv_common.hpp	/^const T &variant_get(const Variant &var)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
variant_set	spirv_common.hpp	/^T &variant_set(Variant &var, P &&... args)$/;"	f	namespace:SPIRV_CROSS_NAMESPACE
vars_needing_early_declaration	spirv_msl.hpp	/^	SmallVector<uint32_t> vars_needing_early_declaration;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
vecsize	spirv_common.hpp	/^		uint32_t vecsize = 1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant::ConstantVector
vecsize	spirv_common.hpp	/^	uint32_t vecsize = 1;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
vecsize	spirv_cross_c.h	/^	unsigned vecsize;$/;"	m	struct:spvc_msl_shader_input
vecsize	spirv_msl.hpp	/^	uint32_t vecsize = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLShaderInput
vector	spirv_common.hpp	/^	inline const ConstantVector &vector() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
vector_size	spirv_common.hpp	/^	inline uint32_t vector_size() const$/;"	f	struct:SPIRV_CROSS_NAMESPACE::SPIRConstant
vector_swizzle	spirv_glsl.cpp	/^const char *CompilerGLSL::vector_swizzle(int vecsize, int index)$/;"	f	class:CompilerGLSL
version	main.cpp	/^	uint32_t version = 0;$/;"	m	struct:CLIArguments	file:
version	spirv_cross_parsed_ir.hpp	/^		uint32_t version = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::ParsedIR::Source
version	spirv_glsl.hpp	/^		uint32_t version = 450;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
vertex	spirv_glsl.hpp	/^		} vertex;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options	typeref:struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options::VertexOptions
vertex_for_tessellation	spirv_msl.hpp	/^		bool vertex_for_tessellation = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
vertex_index_type	spirv_msl.hpp	/^		IndexType vertex_index_type = IndexType::None;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options::IndexType
view_index_from_device_index	spirv_msl.hpp	/^		bool view_index_from_device_index = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
view_mask_buffer_id	spirv_msl.hpp	/^	uint32_t view_mask_buffer_id = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerMSL
view_mask_buffer_index	spirv_msl.hpp	/^		uint32_t view_mask_buffer_index = 24;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerMSL::Options
visit_count	spirv_cfg.hpp	/^	uint32_t visit_count = 0;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
visit_order	spirv_cfg.hpp	/^	std::unordered_map<uint32_t, VisitOrder> visit_order;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CFG
vulkan_glsl_disable_ext_samplerless_texture_functions	main.cpp	/^	bool vulkan_glsl_disable_ext_samplerless_texture_functions = false;$/;"	m	struct:CLIArguments	file:
vulkan_semantics	main.cpp	/^	bool vulkan_semantics = false;$/;"	m	struct:CLIArguments	file:
vulkan_semantics	spirv_glsl.hpp	/^		bool vulkan_semantics = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::Options
walk_from	spirv_cfg.hpp	/^	void walk_from(std::unordered_set<uint32_t> &seen_blocks, uint32_t block, const Op &op) const$/;"	f	class:SPIRV_CROSS_NAMESPACE::CFG
weights	spirv_glsl.hpp	/^			uint32_t weights[CandidateCount];$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::ShaderSubgroupSupportHelper::Result
width	spirv_common.hpp	/^	uint32_t width = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRType
workaround_ubo_load_overload_types	spirv_glsl.hpp	/^	SmallVector<TypeID> workaround_ubo_load_overload_types;$/;"	m	class:SPIRV_CROSS_NAMESPACE::CompilerGLSL
workgroup_size	spirv_common.hpp	/^	} workgroup_size;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint	typeref:struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
workgroup_size_is_hidden	spirv_glsl.hpp	/^		bool workgroup_size_is_hidden = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::CompilerGLSL::BackendVariations
write_access_chain	spirv_hlsl.cpp	/^void CompilerHLSL::write_access_chain(const SPIRAccessChain &chain, uint32_t value,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
write_access_chain_array	spirv_hlsl.cpp	/^void CompilerHLSL::write_access_chain_array(const SPIRAccessChain &chain, uint32_t value,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
write_access_chain_struct	spirv_hlsl.cpp	/^void CompilerHLSL::write_access_chain_struct(const SPIRAccessChain &chain, uint32_t value,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
write_access_chain_value	spirv_hlsl.cpp	/^string CompilerHLSL::write_access_chain_value(uint32_t value, const SmallVector<uint32_t> &composite_chain,$/;"	f	class:ImageFormatNormalizedState::CompilerHLSL	file:
write_count	spirv_common.hpp	/^		uint32_t write_count;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIRFunction::Parameter
write_count	spirv_cross.hpp	/^		uint32_t write_count = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Compiler::StaticExpressionAccessHandler
write_string_to_file	main.cpp	/^static bool write_string_to_file(const char *path, const char *string)$/;"	f	file:
x	spirv_common.hpp	/^		uint32_t x = 0, y = 0, z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
x_chroma_offset	spirv_cross_c.h	/^	spvc_msl_chroma_location x_chroma_offset;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
x_chroma_offset	spirv_msl.hpp	/^	MSLChromaLocation x_chroma_offset = MSL_CHROMA_LOCATION_COSITED_EVEN;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
xfb_buffer	spirv_common.hpp	/^		uint32_t xfb_buffer = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
xfb_stride	spirv_common.hpp	/^		uint32_t xfb_stride = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::Meta::Decoration
y	spirv_common.hpp	/^		uint32_t x = 0, y = 0, z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
y_chroma_offset	spirv_cross_c.h	/^	spvc_msl_chroma_location y_chroma_offset;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
y_chroma_offset	spirv_msl.hpp	/^	MSLChromaLocation y_chroma_offset = MSL_CHROMA_LOCATION_COSITED_EVEN;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
ycbcr_conversion_enable	spirv_msl.hpp	/^	bool ycbcr_conversion_enable = false;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
ycbcr_model	spirv_cross_c.h	/^	spvc_msl_sampler_ycbcr_model_conversion ycbcr_model;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
ycbcr_model	spirv_msl.hpp	/^	MSLSamplerYCbCrModelConversion ycbcr_model = MSL_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
ycbcr_range	spirv_cross_c.h	/^	spvc_msl_sampler_ycbcr_range ycbcr_range;$/;"	m	struct:spvc_msl_sampler_ycbcr_conversion
ycbcr_range	spirv_msl.hpp	/^	MSLSamplerYCbCrRange ycbcr_range = MSL_SAMPLER_YCBCR_RANGE_ITU_FULL;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::MSLConstexprSampler
yflip	main.cpp	/^	bool yflip = false;$/;"	m	struct:CLIArguments	file:
z	spirv_common.hpp	/^		uint32_t x = 0, y = 0, z = 0;$/;"	m	struct:SPIRV_CROSS_NAMESPACE::SPIREntryPoint::WorkgroupSize
~LoopLock	spirv_cross_parsed_ir.cpp	/^ParsedIR::LoopLock::~LoopLock()$/;"	f	class:SPIRV_CROSS_NAMESPACE::ParsedIR::LoopLock
~SmallVector	spirv_cross_containers.hpp	/^	~SmallVector()$/;"	f	class:SPIRV_CROSS_NAMESPACE::SmallVector
~StringStream	spirv_cross_containers.hpp	/^	~StringStream()$/;"	f	class:SPIRV_CROSS_NAMESPACE::StringStream
~ValueSaver	spirv_common.hpp	/^	~ValueSaver()$/;"	f	struct:SPIRV_CROSS_NAMESPACE::ValueSaver
~Variant	spirv_common.hpp	/^	~Variant()$/;"	f	class:SPIRV_CROSS_NAMESPACE::Variant
