cmake_minimum_required(VERSION 3.15)

set(TARGET_NAME Dijiang)
# 获取OS信息
if (CMAKE_HOST_WIN32)
	MESSAGE(STATUS "WIN32")
	set(__win32__ 1)
elseif(CMAKE_HOST_APPLE)
	MESSAGE(STATUS "APPLE")
	add_compile_options(-Wno-nullability-completeness)
	set(__macosx__ 1)
elseif(CMAKE_HOST_UNIX)
	MESSAGE(STATUS "UNIX")
	set(__linux__ 1)
endif()



project(${TARGET_NAME})

include_directories(./)
include_directories(./render)
include_directories(./render/rhi)
include_directories(./render/vulkan)

aux_source_directory(./ SOURCES)
aux_source_directory(./math SOURCES)
aux_source_directory(./utils SOURCES)
aux_source_directory(./render SOURCES)
aux_source_directory(./resource SOURCES)
aux_source_directory(./framework SOURCES)
aux_source_directory(./render/rhi SOURCES)
aux_source_directory(./render/vulkan SOURCES)
aux_source_directory(./framework/components SOURCES)

add_executable(${TARGET_NAME} ${SOURCES})

find_package(Vulkan REQUIRED FATAL_ERROR)
find_package(assimp REQUIRED FATAL_ERROR)
find_package(yaml-cpp REQUIRED FATAL_ERROR)
if (Vulkan_FOUND)
	include_directories(${Vulkan_INCLUDE_DIRS})
	target_link_libraries(${TARGET_NAME} PRIVATE ${Vulkan_LIBRARIES})
endif(Vulkan_FOUND)
if (assimp_FOUND)
	include_directories(${ASSIMP_INCLUDE_DIRS})
	target_link_libraries(${TARGET_NAME} PRIVATE ${ASSIMP_LIBRARIES})
endif(assimp_FOUND)
if (yaml-cpp_FOUND)
	include_directories(${YAML_CPP_INCLUDE_DIRS})
	target_link_libraries(${TARGET_NAME} PRIVATE ${YAML_CPP_LIBRARIES})
endif(yaml-cpp_FOUND)

target_link_libraries(${TARGET_NAME} PRIVATE glfw)
target_link_libraries(${TARGET_NAME} PRIVATE glm)
target_link_libraries(${TARGET_NAME} PRIVATE vk_mem)
target_link_libraries(${TARGET_NAME} PRIVATE stb)
target_link_libraries(${TARGET_NAME} PRIVATE lua)
target_link_libraries(${TARGET_NAME} PRIVATE spirv-cross-core)
target_link_libraries(${TARGET_NAME} PRIVATE spirv-cross-cpp)
target_link_libraries(${TARGET_NAME} PRIVATE spirv-cross-reflect)
target_link_libraries(${TARGET_NAME} PRIVATE spirv-cross-hlsl)

add_subdirectory(lualib)

add_dependencies(${TARGET_NAME} shaders)
